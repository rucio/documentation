{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"accountclient.html","title":"Accountclient","text":""},{"location":"accountclient.html#rucio.client.accountclient.AccountClient","title":"<code>AccountClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>Account client class for working with rucio accounts</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.add_account","title":"<code>add_account(account, type_, email)</code>","text":"<p>Sends the request to create a new account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>the name of the account.</p> required <code>type_</code> <code>str</code> <p>The account type</p> required <code>email</code> <code>str</code> <p>The Email address associated with the account.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if account was created successfully else False.</p> <p>Raises:</p> Type Description <code>Duplicate</code> <p>if account already exists.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.delete_account","title":"<code>delete_account(account)</code>","text":"<p>Sends the request to disable an account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>the name of the account.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True is account was disabled successfully. False otherwise.</p> <p>Raises:</p> Type Description <code>AccountNotFound</code> <p>if account doesn't exist.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_account","title":"<code>get_account(account)</code>","text":"<p>Sends the request to get information about a given account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>the name of the account.</p> required <p>Returns:</p> Type Description <code>Optional[dict[str, Any]]</code> <p>a list of attributes for the account. None if failure.</p> <p>Raises:</p> Type Description <code>AccountNotFound</code> <p>if account doesn't exist.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.update_account","title":"<code>update_account(account, key, value)</code>","text":"<p>Update a property of an account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>Name of the account.</p> required <code>key</code> <code>str</code> <p>Account property like status.</p> required <code>value</code> <code>Any</code> <p>Property value.</p> required"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.list_accounts","title":"<code>list_accounts(account_type=None, identity=None, filters=None)</code>","text":"<p>Sends the request to list all rucio accounts.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <p>The account type</p> required <code>identity</code> <code>Optional[str]</code> <p>The identity key name. For example x509 DN, or a username.</p> <code>None</code> <code>filters</code> <code>Optional[dict[str, Any]]</code> <p>A dictionary key:account attribute to use for the filtering</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[dict[str, Any]]</code> <p>a list containing account info dictionary for all rucio accounts.</p> <p>Raises:</p> Type Description <code>AccountNotFound</code> <p>if account doesn't exist.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.whoami","title":"<code>whoami()</code>","text":"<p>Get information about account whose token is used</p> <p>Returns:</p> Type Description <code>Optional[dict[str, Any]]</code> <p>a list of attributes for the account. None if failure.</p> <p>Raises:</p> Type Description <code>AccountNotFound</code> <p>if account doesn't exist.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.add_identity","title":"<code>add_identity(account, identity, authtype, email, default=False, password=None)</code>","text":"<p>Adds a membership association between identity and account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The account name.</p> required <code>identity</code> <code>str</code> <p>The identity key name. For example x509 DN, or a username.</p> required <code>authtype</code> <code>str</code> <p>The type of the authentication (x509, gss, userpass).</p> required <code>default</code> <code>bool</code> <p>If True, the account should be used by default with the provided identity.</p> <code>False</code> <code>email</code> <code>str</code> <p>The Email address associated with the identity.</p> required <code>password</code> <code>Optional[str]</code> <p>Password if authtype is userpass.</p> <code>None</code>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.del_identity","title":"<code>del_identity(account, identity, authtype)</code>","text":"<p>Delete an identity's membership association with an account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The account name.</p> required <code>identity</code> <code>str</code> <p>The identity key name. For example x509 DN, or a username.</p> required <code>authtype</code> <code>str</code> <p>The type of the authentication (x509, gss, userpass).</p> required <code>default</code> <p>If True, the account should be used by default with the provided identity.</p> required"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.list_identities","title":"<code>list_identities(account)</code>","text":"<p>List all identities on an account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The account name.</p> required"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.list_account_rules","title":"<code>list_account_rules(account)</code>","text":"<p>List the associated rules of an account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The account name.</p> required"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_account_limits","title":"<code>get_account_limits(account, rse_expression, locality)</code>","text":"<p>Return the correct account limits for the given locality.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The account name.</p> required <code>rse_expression</code> <code>str</code> <p>Valid RSE expression</p> required <code>locality</code> <code>str</code> <p>The scope of the account limit. 'local' or 'global'.</p> required"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_global_account_limit","title":"<code>get_global_account_limit(account, rse_expression)</code>","text":"<p>List the account limit for the specific RSE expression.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The account name.</p> required <code>rse_expression</code> <code>str</code> <p>The rse expression.</p> required"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_global_account_limits","title":"<code>get_global_account_limits(account)</code>","text":"<p>List all RSE expression limits of this account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The account name.</p> required"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_local_account_limits","title":"<code>get_local_account_limits(account)</code>","text":"<p>List the account rse limits of this account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The account name.</p> required"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_local_account_limit","title":"<code>get_local_account_limit(account, rse)</code>","text":"<p>List the account rse limits of this account for the specific rse.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The account name.</p> required <code>rse</code> <code>str</code> <p>The rse name.</p> required"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_local_account_usage","title":"<code>get_local_account_usage(account, rse=None)</code>","text":"<p>List the account usage for one or all rses of this account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The account name.</p> required <code>rse</code> <code>Optional[str]</code> <p>The rse name.</p> <code>None</code>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_global_account_usage","title":"<code>get_global_account_usage(account, rse_expression=None)</code>","text":"<p>List the account usage for one or all RSE expressions of this account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The account name.</p> required <code>rse_expression</code> <code>Optional[str]</code> <p>The rse expression.</p> <code>None</code>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_account_usage_history","title":"<code>get_account_usage_history(account, rse)</code>","text":"<p>List the account usage history of this account on rse.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The account name.</p> required <code>rse</code> <code>str</code> <p>The rse name.</p> required"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.list_account_attributes","title":"<code>list_account_attributes(account)</code>","text":"<p>List the attributes for an account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The account name.</p> required"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.add_account_attribute","title":"<code>add_account_attribute(account, key, value)</code>","text":"<p>Adds an attribute to an account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The account name.</p> required <code>key</code> <code>str</code> <p>The attribute key.</p> required <code>value</code> <code>Any</code> <p>The attribute value.</p> required"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.delete_account_attribute","title":"<code>delete_account_attribute(account, key)</code>","text":"<p>Delete an attribute for an account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The account name.</p> required <code>key</code> <code>str</code> <p>The attribute key.</p> required"},{"location":"accountlimitclient.html","title":"Accountlimitclient","text":""},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient","title":"<code>AccountLimitClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>Account limit client class for working with account limits</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.set_account_limit","title":"<code>set_account_limit(account, rse, bytes_, locality)</code>","text":"<p>Sets an account limit for a given limit scope.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The name of the account.</p> required <code>rse</code> <code>str</code> <p>The rse name.</p> required <code>bytes_</code> <code>int</code> <p>An integer with the limit in bytes.</p> required <code>locality</code> <code>Literal['local', 'global']</code> <p>The scope of the account limit. 'local' or 'global'.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if quota was created successfully else False.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.delete_account_limit","title":"<code>delete_account_limit(account, rse, locality)</code>","text":"<p>Deletes an account limit for a given limit scope.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The name of the account.</p> required <code>rse</code> <code>str</code> <p>The rse name.</p> required <code>locality</code> <code>Literal['local', 'global']</code> <p>The scope of the account limit. 'local' or 'global'.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if quota was created successfully else False.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.set_local_account_limit","title":"<code>set_local_account_limit(account, rse, bytes_)</code>","text":"<p>Sends the request to set an account limit for an account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The name of the account.</p> required <code>rse</code> <code>str</code> <p>The rse name.</p> required <code>bytes_</code> <code>int</code> <p>An integer with the limit in bytes.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if quota was created successfully else False.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.delete_local_account_limit","title":"<code>delete_local_account_limit(account, rse)</code>","text":"<p>Sends the request to remove an account limit.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The name of the account.</p> required <code>rse</code> <code>str</code> <p>The rse name.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if quota was removed successfully. False otherwise.</p> <p>Raises:</p> Type Description <code>AccountNotFound</code> <p>if account doesn't exist.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.set_global_account_limit","title":"<code>set_global_account_limit(account, rse_expression, bytes_)</code>","text":"<p>Sends the request to set a global account limit for an account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The name of the account.</p> required <code>rse_expression</code> <code>str</code> <p>The rse expression.</p> required <code>bytes_</code> <code>int</code> <p>An integer with the limit in bytes.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if quota was created successfully else False.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.delete_global_account_limit","title":"<code>delete_global_account_limit(account, rse_expression)</code>","text":"<p>Sends the request to remove a global account limit.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>The name of the account.</p> required <code>rse_expression</code> <code>str</code> <p>The rse expression.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if quota was removed successfully. False otherwise.</p> <p>Raises:</p> Type Description <code>AccountNotFound</code> <p>if account doesn't exist.</p>"},{"location":"baseclient.html","title":"Baseclient","text":"<p>Client class for callers of the Rucio system</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient","title":"<code>BaseClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>Main client class for accessing Rucio resources. Handles the authentication.</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_userpass","title":"<code>__get_token_userpass()</code>","text":"<p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses username/password.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__refresh_token_OIDC","title":"<code>__refresh_token_OIDC()</code>","text":"<p>Checks if there is active refresh token and if so returns either active token with expiration timestamp or requests a new refresh and returns new access token with new expiration timestamp and saves these in the token directory.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_OIDC","title":"<code>__get_token_OIDC()</code>","text":"<p>First authenticates the user via a Identity Provider server (with user's username &amp; password), by specifying oidc_scope, user agrees to share the relevant information with Rucio. If all proceeds well, an access token is requested from the Identity Provider. Access Tokens are not stored in Rucio DB. Refresh Tokens are granted only in case no valid access token exists in user's local storage, oidc_scope includes 'offline_access'. In such case, refresh token is stored in Rucio DB.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_x509","title":"<code>__get_token_x509()</code>","text":"<p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses x509 authentication.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_ssh","title":"<code>__get_token_ssh()</code>","text":"<p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses SSH key exchange authentication.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_gss","title":"<code>__get_token_gss()</code>","text":"<p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses Kerberos authentication.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_saml","title":"<code>__get_token_saml()</code>","text":"<p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses saml authentication.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token","title":"<code>__get_token()</code>","text":"<p>Calls the corresponding method to receive an auth token depending on the auth type. To be used if a 401 - Unauthorized error is received.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__read_token","title":"<code>__read_token()</code>","text":"<p>Checks if a local token file exists and reads the token from it.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if a token could be read. False if no file exists.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__write_token","title":"<code>__write_token()</code>","text":"<p>Write the current auth_token to the local token file.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__authenticate","title":"<code>__authenticate()</code>","text":"<p>Main method for authentication. It first tries to read a locally saved token. If not available it requests a new one.</p>"},{"location":"baseclient.html#rucio.client.baseclient.choice","title":"<code>choice(hosts)</code>","text":"<p>Select randomly a host</p> <p>Parameters:</p> Name Type Description Default <code>hosts</code> <p>Lost of hosts</p> required <p>Returns:</p> Type Description <p>A randomly selected host.</p>"},{"location":"client.html","title":"Client","text":"<p>Client class for callers of the Rucio system</p>"},{"location":"client.html#rucio.client.client.Client","title":"<code>Client(**args)</code>","text":"<p>Main client class for accessing Rucio resources. Handles the authentication.</p> <p>Constructor for the Rucio main client class.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <p>the host of the rucio system.</p> required <code>auth_host</code> <p>the host of the rucio authentication server.</p> required <code>account</code> <p>the rucio account that should be used to interact with the rucio system.</p> required <code>ca_cert</code> <p>the certificate to verify the server.</p> required <code>auth_type</code> <p>the type of authentication to use (e.g. userpass, x509 ...)</p> required <code>creds</code> <p>credentials needed for authentication.</p> required <code>timeout</code> <p>Float describes the timeout of the request (in seconds).</p> required <code>vo</code> <p>The vo that the client will interact with.</p> required <code>logger</code> <p>Logger instance to use (optional)</p> required"},{"location":"configclient.html","title":"Configclient","text":""},{"location":"configclient.html#rucio.client.configclient.ConfigClient","title":"<code>ConfigClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>Client class for working with the configuration</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"configclient.html#rucio.client.configclient.ConfigClient.get_config","title":"<code>get_config(section=None, option=None)</code>","text":"<p>Sends the request to get the matching configuration.</p> <p>Parameters:</p> Name Type Description Default <code>section</code> <code>Optional[str]</code> <p>the optional name of the section.</p> <code>None</code> <code>option</code> <code>Optional[str]</code> <p>the optional option within the section.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dictionary containing the configuration.</p>"},{"location":"configclient.html#rucio.client.configclient.ConfigClient.set_config_option","title":"<code>set_config_option(section, option, value, use_body_for_params=True)</code>","text":"<p>Sends the request to create or set an option within a section. Missing sections will be created.</p> <p>Parameters:</p> Name Type Description Default <code>section</code> <code>str</code> <p>the name of the section.</p> required <code>option</code> <code>str</code> <p>the name of the option.</p> required <code>value</code> <code>Any</code> <p>the value to set on the config option</p> required <code>use_body_for_params</code> <code>bool</code> <p>send parameters in a json-encoded request body instead of url-encoded TODO: remove this parameter The format of the /config endpoint was recently changed. We migrated from performing a PUT on \"/config///\" to sending the parameters using a json-encoded body. This was done to fix multiple un-wanted side effects related to how the middleware treats values encoded in a path. For a smooth transition, we allow both cases for now, but we should migrate to only passing values via the request body. <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if option was removed successfully. False otherwise.</p>"},{"location":"configclient.html#rucio.client.configclient.ConfigClient.delete_config_option","title":"<code>delete_config_option(section, option)</code>","text":"<p>Sends the request to remove an option from a section</p> <p>Parameters:</p> Name Type Description Default <code>section</code> <code>str</code> <p>the name of the section.</p> required <code>option</code> <code>str</code> <p>the name of the option.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if option was removed successfully. False otherwise.</p>"},{"location":"credentialclient.html","title":"Credentialclient","text":""},{"location":"credentialclient.html#rucio.client.credentialclient.CredentialClient","title":"<code>CredentialClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>Credential client class for working with URL signing</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"credentialclient.html#rucio.client.credentialclient.CredentialClient.get_signed_url","title":"<code>get_signed_url(rse, service, operation, url, lifetime=3600)</code>","text":"<p>Return a signed version of the given URL for the given operation.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>The name of the RSE the URL points to.</p> required <code>service</code> <code>str</code> <p>The service the URL points to (gcs, s3, swift)</p> required <code>operation</code> <code>str</code> <p>The desired operation (read, write, delete)</p> required <code>url</code> <code>str</code> <p>The URL to sign</p> required <code>lifetime</code> <code>int</code> <p>The desired lifetime of the URL in seconds</p> <code>3600</code> <p>Returns:</p> Type Description <code>str</code> <p>The signed URL string</p>"},{"location":"didclient.html","title":"Didclient","text":""},{"location":"didclient.html#rucio.client.didclient.DIDClient","title":"<code>DIDClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>DataIdentifier client class for working with data identifiers</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_dids","title":"<code>list_dids(scope, filters, did_type='collection', long=False, recursive=False)</code>","text":"<p>List all data identifiers in a scope which match a given pattern.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>filters</code> <code>Sequence[dict[str, Any]]</code> <p>A nested dictionary of key/value pairs like [{'key1': 'value1', 'key2.lte': 'value2'}, {'key3.gte, 'value3'}]. Keypairs in the same dictionary are AND'ed together, dictionaries are OR'ed together. Keys should be suffixed like ., e.g. key1 &gt;= value1 is equivalent to {'key1.gte': value}, where  belongs to one of the set {'lte', 'gte', 'gt', 'lt', 'ne' or ''}. Equivalence doesn't require an operator. required <code>did_type</code> <code>Literal['all', 'collection', 'dataset', 'container', 'file']</code> <p>The type of the did: 'all'(container, dataset or file)|'collection'(dataset or container)|'dataset'|'container'|'file'</p> <code>'collection'</code> <code>long</code> <code>bool</code> <p>Long format option to display more information for each DID.</p> <code>False</code> <code>recursive</code> <code>bool</code> <p>Recursively list DIDs content.</p> <code>False</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_dids_extended","title":"<code>list_dids_extended(scope, filters, did_type='collection', long=False, recursive=False)</code>","text":"<p>List all data identifiers in a scope which match a given pattern (DEPRECATED)</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_did","title":"<code>add_did(scope, name, did_type, statuses=None, meta=None, rules=None, lifetime=None, dids=None, rse=None)</code>","text":"<p>Add data identifier for a dataset or container.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The data identifier name.</p> required <code>did_type</code> <code>Literal['DATASET', 'CONTAINER']</code> <p>The data identifier type (dataset|container).</p> required <code>statuses</code> <code>Optional[Mapping[str, Any]]</code> <p>Dictionary with statuses, e.g. {'monotonic':True}.</p> <code>None</code> <code>meta</code> <code>Optional[Mapping[str, Any]]</code> <p>Meta-data associated with the data identifier is represented using key/value pairs in a dictionary.</p> <code>None</code> <code>rules</code> <code>Optional[Sequence[Mapping[str, Any]]]</code> <p>Replication rules associated with the data identifier. A list of dictionaries, e.g., [{'copies': 2, 'rse_expression': 'TIERS1'}, ].</p> <code>None</code> <code>lifetime</code> <code>Optional[int]</code> <p>DID's lifetime (in seconds).</p> <code>None</code> <code>dids</code> <code>Optional[Sequence[Mapping[str, Any]]]</code> <p>The content.</p> <code>None</code> <code>rse</code> <code>Optional[str]</code> <p>The RSE name when registering replicas.</p> <code>None</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_dids","title":"<code>add_dids(dids)</code>","text":"<p>Bulk add datasets/containers.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_dataset","title":"<code>add_dataset(scope, name, statuses=None, meta=None, rules=None, lifetime=None, files=None, rse=None)</code>","text":"<p>Add data identifier for a dataset.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The data identifier name.</p> required <code>statuses</code> <code>Optional[Mapping[str, Any]]</code> <p>Dictionary with statuses, e.g.g {'monotonic':True}.</p> <code>None</code> <code>meta</code> <code>Optional[Mapping[str, Any]]</code> <p>Meta-data associated with the data identifier is represented using key/value pairs in a dictionary.</p> <code>None</code> <code>rules</code> <code>Optional[Sequence[Mapping[str, Any]]]</code> <p>Replication rules associated with the data identifier. A list of dictionaries, e.g., [{'copies': 2, 'rse_expression': 'TIERS1'}, ].</p> <code>None</code> <code>lifetime</code> <code>Optional[int]</code> <p>DID's lifetime (in seconds).</p> <code>None</code> <code>files</code> <code>Optional[Sequence[Mapping[str, Any]]]</code> <p>The content.</p> <code>None</code> <code>rse</code> <code>Optional[str]</code> <p>The RSE name when registering replicas.</p> <code>None</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_datasets","title":"<code>add_datasets(dsns)</code>","text":"<p>Bulk add datasets.</p> <p>Parameters:</p> Name Type Description Default <code>dsns</code> <code>Iterable[dict[str, Any]]</code> <p>A list of datasets.</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_container","title":"<code>add_container(scope, name, statuses=None, meta=None, rules=None, lifetime=None)</code>","text":"<p>Add data identifier for a container.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The data identifier name.</p> required <code>statuses</code> <code>Optional[Mapping[str, Any]]</code> <p>Dictionary with statuses, e.g.g {'monotonic':True}.</p> <code>None</code> <code>meta</code> <code>Optional[Mapping[str, Any]]</code> <p>Meta-data associated with the data identifier is represented using key/value pairs in a dictionary.</p> <code>None</code> <code>rules</code> <code>Optional[Sequence[Mapping[str, Any]]]</code> <p>Replication rules associated with the data identifier. A list of dictionaries, e.g., [{'copies': 2, 'rse_expression': 'TIERS1'}, ].</p> <code>None</code> <code>lifetime</code> <code>Optional[int]</code> <p>DID's lifetime (in seconds).</p> <code>None</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_containers","title":"<code>add_containers(cnts)</code>","text":"<p>Bulk add containers.</p> <p>Parameters:</p> Name Type Description Default <code>cnts</code> <code>Sequence[dict[str, Any]]</code> <p>A list of containers.</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.attach_dids","title":"<code>attach_dids(scope, name, dids, rse=None)</code>","text":"<p>Attach data identifier.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The data identifier name.</p> required <code>dids</code> <code>Sequence[Mapping[str, Any]]</code> <p>The content.</p> required <code>rse</code> <code>Optional[str]</code> <p>The RSE name when registering replicas.</p> <code>None</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.detach_dids","title":"<code>detach_dids(scope, name, dids=None)</code>","text":"<p>Detach data identifier</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The data identifier name.</p> required <code>dids</code> <code>Optional[Sequence[Mapping[str, Any]]]</code> <p>The content.</p> <code>None</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.attach_dids_to_dids","title":"<code>attach_dids_to_dids(attachments, ignore_duplicate=False)</code>","text":"<p>Add dids to dids.</p> <p>Parameters:</p> Name Type Description Default <code>attachments</code> <code>Sequence[dict[str, Union[str, Sequence[dict[str, Any]]]]]</code> <p>The attachments. attachments is: [attachment, attachment, ...] attachment is: {'scope': scope, 'name': name, 'dids': dids} dids is: [{'scope': scope, 'name': name}, ...]</p> required <code>ignore_duplicate</code> <code>bool</code> <p>If True, ignore duplicate entries.</p> <code>False</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_files_to_datasets","title":"<code>add_files_to_datasets(attachments, ignore_duplicate=False)</code>","text":"<p>Add files to datasets.</p> <p>Parameters:</p> Name Type Description Default <code>attachments</code> <code>Sequence[dict[str, Union[str, Sequence[dict[str, Any]]]]]</code> <p>The attachments. attachments is: [attachment, attachment, ...] attachment is: {'scope': scope, 'name': name, 'dids': dids} dids is: [{'scope': scope, 'name': name}, ...]</p> required <code>ignore_duplicate</code> <code>bool</code> <p>If True, ignore duplicate entries.</p> <code>False</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_datasets_to_containers","title":"<code>add_datasets_to_containers(attachments)</code>","text":"<p>Add datasets_to_containers.</p> <p>Parameters:</p> Name Type Description Default <code>attachments</code> <code>Sequence[dict[str, Union[str, Sequence[dict[str, Any]]]]]</code> <p>The attachments. attachments is: [attachment, attachment, ...] attachment is: {'scope': scope, 'name': name, 'dids': dids} dids is: [{'scope': scope, 'name': name}, ...]</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_containers_to_containers","title":"<code>add_containers_to_containers(attachments)</code>","text":"<p>Add containers_to_containers.</p> <p>Parameters:</p> Name Type Description Default <code>attachments</code> <code>Sequence[dict[str, Union[str, Sequence[dict[str, Any]]]]]</code> <p>The attachments. attachments is: [attachment, attachment, ...] attachment is: {'scope': scope, 'name': name, 'dids': dids} dids is: [{'scope': scope, 'name': name}, ...]</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_files_to_dataset","title":"<code>add_files_to_dataset(scope, name, files, rse=None)</code>","text":"<p>Add files to datasets.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The dataset name.</p> required <code>files</code> <code>Sequence[Mapping[str, Any]]</code> <p>The content.</p> required <code>rse</code> <code>Optional[str]</code> <p>The RSE name when registering replicas.</p> <code>None</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_files_to_archive","title":"<code>add_files_to_archive(scope, name, files)</code>","text":"<p>Add files to archive.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The dataset name.</p> required <code>files</code> <code>Sequence[Mapping[str, Any]]</code> <p>The content.</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_datasets_to_container","title":"<code>add_datasets_to_container(scope, name, dsns)</code>","text":"<p>Add datasets to container.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The dataset name.</p> required <code>dsns</code> <code>Sequence[Mapping[str, Any]]</code> <p>The content.</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_containers_to_container","title":"<code>add_containers_to_container(scope, name, cnts)</code>","text":"<p>Add containers to container.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The dataset name.</p> required <code>cnts</code> <code>Sequence[Mapping[str, Any]]</code> <p>The content.</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_content","title":"<code>list_content(scope, name)</code>","text":"<p>List data identifier contents.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The data identifier name.</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_content_history","title":"<code>list_content_history(scope, name)</code>","text":"<p>List data identifier contents history.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The data identifier name.</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_files","title":"<code>list_files(scope, name, long=None)</code>","text":"<p>List data identifier file contents.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The data identifier name.</p> required <code>long</code> <code>Optional[bool]</code> <p>A boolean to choose if GUID is returned or not.</p> <code>None</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.bulk_list_files","title":"<code>bulk_list_files(dids)</code>","text":"<p>List data identifier file contents.</p> <p>Parameters:</p> Name Type Description Default <code>dids</code> <code>list[dict[str, Any]]</code> <p>The list of DIDs.</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.get_did","title":"<code>get_did(scope, name, dynamic=False, dynamic_depth=None)</code>","text":"<p>Retrieve a single data identifier.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The data identifier name.</p> required <code>dynamic_depth</code> <code>Optional[str]</code> <p>The DID type as string ('FILE'/'DATASET') at which to stop the dynamic length/bytes calculation. If not set, the size will not be computed dynamically.</p> <code>None</code> <code>dynamic</code> <code>bool</code> <p>(Deprecated) same as dynamic_depth = 'FILE'</p> <code>False</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.get_metadata","title":"<code>get_metadata(scope, name, plugin='DID_COLUMN')</code>","text":"<p>Get data identifier metadata</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The data identifier name.</p> required <code>plugin</code> <code>str</code> <p>Backend Metadata plugin the Rucio server should use to query data.</p> <code>'DID_COLUMN'</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.get_metadata_bulk","title":"<code>get_metadata_bulk(dids, inherit=False)</code>","text":"<p>Bulk get data identifier metadata</p> <p>Parameters:</p> Name Type Description Default <code>inherit</code> <code>bool</code> <p>A boolean. If set to true, the metadata of the parent are concatenated.</p> <code>False</code> <code>dids</code> <code>Sequence[Mapping[str, Any]]</code> <p>A list of dids.</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.set_metadata","title":"<code>set_metadata(scope, name, key, value, recursive=False)</code>","text":"<p>Set data identifier metadata</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The data identifier name.</p> required <code>key</code> <code>str</code> <p>the key.</p> required <code>value</code> <code>Any</code> <p>the value.</p> required <code>recursive</code> <code>bool</code> <p>Option to propagate the metadata change to content.</p> <code>False</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.set_metadata_bulk","title":"<code>set_metadata_bulk(scope, name, meta, recursive=False)</code>","text":"<p>Set data identifier metadata in bulk.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The data identifier name.</p> required <code>meta</code> <code>Mapping[str, Any]</code> <p>the metadata key-values.</p> required <code>recursive</code> <code>bool</code> <p>Option to propagate the metadata change to content.</p> <code>False</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.set_dids_metadata_bulk","title":"<code>set_dids_metadata_bulk(dids, recursive=False)</code>","text":"<p>Set metadata to a list of data identifiers.</p> <p>Parameters:</p> Name Type Description Default <code>dids</code> <code>Sequence[Mapping[str, Any]]</code> <p>A list of dids including metadata, i.e. [{'scope': scope1, 'name': name1, 'meta': {key1: value1, key2: value2}] .</p> required <code>recursive</code> <code>bool</code> <p>Option to propagate the metadata update to content.</p> <code>False</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.set_status","title":"<code>set_status(scope, name, **kwargs)</code>","text":"<p>Set data identifier status</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The data identifier name.</p> required <code>kwargs</code> <p>Keyword arguments of the form status_name=value.</p> <code>{}</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.close","title":"<code>close(scope, name)</code>","text":"<p>close dataset/container</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The dataset/container name.</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.delete_metadata","title":"<code>delete_metadata(scope, name, key)</code>","text":"<p>Delete data identifier metadata</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The data identifier.</p> required <code>key</code> <code>str</code> <p>the key.</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_did_rules","title":"<code>list_did_rules(scope, name)</code>","text":"<p>List the associated rules of a data identifier.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The data identifier name.</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_associated_rules_for_file","title":"<code>list_associated_rules_for_file(scope, name)</code>","text":"<p>List the associated rules a file is affected from..</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The file name.</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.get_dataset_by_guid","title":"<code>get_dataset_by_guid(guid)</code>","text":"<p>Get the parent datasets for a given GUID.</p> <p>Parameters:</p> Name Type Description Default <code>guid</code> <code>str</code> <p>The GUID.</p> required <p>Returns:</p> Type Description <code>Iterator[dict[str, Any]]</code> <p>A did</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.scope_list","title":"<code>scope_list(scope, name=None, recursive=False)</code>","text":"<p>List data identifiers in a scope.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>Optional[str]</code> <p>The data identifier name.</p> <code>None</code> <code>recursive</code> <code>bool</code> <p>boolean, True or False.</p> <code>False</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_parent_dids","title":"<code>list_parent_dids(scope, name)</code>","text":"<p>List parent dataset/containers of a did.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope.</p> required <code>name</code> <code>str</code> <p>The name.</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.create_did_sample","title":"<code>create_did_sample(input_scope, input_name, output_scope, output_name, nbfiles)</code>","text":"<p>Create a sample from an input collection.</p> <p>Parameters:</p> Name Type Description Default <code>input_scope</code> <code>str</code> <p>The scope of the input DID.</p> required <code>input_name</code> <code>str</code> <p>The name of the input DID.</p> required <code>output_scope</code> <code>str</code> <p>The scope of the output dataset.</p> required <code>output_name</code> <code>str</code> <p>The name of the output dataset.</p> required <code>account</code> <p>The account.</p> required <code>nbfiles</code> <code>int</code> <p>The number of files to register in the output dataset.</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.resurrect","title":"<code>resurrect(dids)</code>","text":"<p>Resurrect a list of dids.</p> <p>Parameters:</p> Name Type Description Default <code>dids</code> <code>Sequence[Mapping[str, Any]]</code> <p>A list of dids [{'scope': scope, 'name': name}, ...]</p> required"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_archive_content","title":"<code>list_archive_content(scope, name)</code>","text":"<p>List archive contents.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>The scope name.</p> required <code>name</code> <code>str</code> <p>The data identifier name.</p> required"},{"location":"diracclient.html","title":"Diracclient","text":""},{"location":"diracclient.html#rucio.client.diracclient.DiracClient","title":"<code>DiracClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>DataIdentifier client class for working with data identifiers</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"diracclient.html#rucio.client.diracclient.DiracClient.add_files","title":"<code>add_files(lfns, ignore_availability=False, parents_metadata=None)</code>","text":"<p>Bulk add files : - Create the file and replica. - If doesn't exist create the dataset containing the file as well as a rule on the dataset on ANY sites. - Create all the ascendants of the dataset if they do not exist</p> <p>Parameters:</p> Name Type Description Default <code>lfns</code> <code>Iterable[Mapping[str, Any]]</code> <p>List of lfn (dictionary {'lfn': , 'rse': , 'bytes': , 'adler32': , 'guid': , 'pfn': } required <code>ignore_availability</code> <code>bool</code> <p>A boolean to ignore blocked sites.</p> <code>False</code> <code>parents_metadata</code> <code>Optional[Mapping[str, Mapping[str, Any]]]</code> <p>Metadata for selected hierarchy DIDs. (dictionary {'lpn': {key : value}}). Default=None</p> <code>None</code>"},{"location":"downloadclient.html","title":"Downloadclient","text":""},{"location":"downloadclient.html#rucio.client.downloadclient.FileDownloadState","title":"<code>FileDownloadState</code>","text":"<p>The state a file can be in before/while/after downloading.</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.BaseExtractionTool","title":"<code>BaseExtractionTool(program_name, useability_check_args, extract_args, logger=logging.log)</code>","text":"<p>Initialises a extraction tool object</p> <p>Parameters:</p> Name Type Description Default <code>program_name</code> <code>str</code> <p>the name of the archive extraction program, e.g., unzip</p> required <code>useability_check_args</code> <code>str</code> <p>the arguments of the extraction program to test if its installed, e.g., --version</p> required <code>extract_args</code> <code>str</code> <p>the arguments that will be passed to the program for extraction</p> required <code>logger</code> <code>LoggerFunction</code> <p>optional decorated logging.log object that can be passed from the calling daemon or client.</p> <code>log</code>"},{"location":"downloadclient.html#rucio.client.downloadclient.BaseExtractionTool.is_useable","title":"<code>is_useable()</code>","text":"<p>Checks if the extraction tool is installed and usable</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if it is usable otherwise False</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.BaseExtractionTool.try_extraction","title":"<code>try_extraction(archive_file_path, file_to_extract, dest_dir_path)</code>","text":"<p>Calls the extraction program to extract a file from an archive</p> <p>Parameters:</p> Name Type Description Default <code>archive_file_path</code> <code>str</code> <p>path to the archive</p> required <code>file_to_extract</code> <code>str</code> <p>file name to extract from the archive</p> required <code>dest_dir_path</code> <code>str</code> <p>destination directory where the extracted file will be stored</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True on success otherwise False</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient","title":"<code>DownloadClient(client=None, logger=None, tracing=True, check_admin=False, check_pcache=False)</code>","text":"<p>Initialises the basic settings for an DownloadClient object</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>Optional[Client]</code> <p>Optional: rucio.client.client.Client object. If None, a new object will be created.</p> <code>None</code> <code>external_traces</code> <p>Optional: reference to a list where traces can be added</p> required <code>logger</code> <code>Optional[LoggerFunction]</code> <p>Optional: logging.Logger object. If None, default logger will be used.</p> <code>None</code>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.download_pfns","title":"<code>download_pfns(items, num_threads=2, trace_custom_fields=None, traces_copy_out=None, deactivate_file_download_exceptions=False)</code>","text":"<p>Download items with a given PFN. This function can only download files, no datasets.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>list[dict[str, Any]]</code> <p>List of dictionaries. Each dictionary describing a file to download. Keys: pfn                            - PFN string of this file did                            - DID string of this file (e.g. 'scope:file.name'). Wildcards are not allowed rse                            - rse name (e.g. 'CERN-PROD_DATADISK'). RSE Expressions are not allowed base_dir                       - Optional: Base directory where the downloaded files will be stored. (Default: '.') no_subdir                      - Optional: If true, files are written directly into base_dir. (Default: False) adler32                        - Optional: The adler32 checmsum to compare the downloaded files adler32 checksum with md5                            - Optional: The md5 checksum to compare the downloaded files md5 checksum with transfer_timeout               - Optional: Timeout time for the download protocols. (Default: None) check_local_with_filesize_only - Optional: If true, already downloaded files will not be validated by checksum.</p> required <code>num_threads</code> <code>int</code> <p>Suggestion of number of threads to use for the download. It will be lowered if it's too high.</p> <code>2</code> <code>trace_custom_fields</code> <code>Optional[dict[str, Any]]</code> <p>Custom key value pairs to send with the traces</p> <code>None</code> <code>traces_copy_out</code> <code>Optional[list[dict[str, Any]]]</code> <p>reference to an external list, where the traces should be uploaded</p> <code>None</code> <code>deactivate_file_download_exceptions</code> <code>bool</code> <p>Boolean, if file download exceptions shouldn't be raised</p> <code>False</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>a list of dictionaries with an entry for each file, containing the input options, the did, and the clientState clientState can be one of the following: ALREADY_DONE, DONE, FILE_NOT_FOUND, FAIL_VALIDATE, FAILED</p> <p>Raises:</p> Type Description <code>InputValidationError</code> <p>if one of the input items is in the wrong format</p> <code>NoFilesDownloaded</code> <p>if no files could be downloaded</p> <code>NotAllFilesDownloaded</code> <p>if not all files could be downloaded</p> <code>RucioException</code> <p>if something unexpected went wrong during the download</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.download_dids","title":"<code>download_dids(items, num_threads=2, trace_custom_fields=None, traces_copy_out=None, deactivate_file_download_exceptions=False, sort=None)</code>","text":"<p>Download items with given DIDs. This function can also download datasets and wildcarded DIDs.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>list[dict[str, Any]]</code> <p>List of dictionaries. Each dictionary describing an item to download. Keys: did                            - DID string of this file (e.g. 'scope:file.name') filters                        - Filter to select DIDs for download. Optional if DID is given rse                            - Optional: rse name (e.g. 'CERN-PROD_DATADISK') or rse expression from where to download impl                           - Optional: name of the protocol implementation to be used to download this item. no_resolve_archives            - Optional: bool indicating whether archives should not be considered for download (Default: False) resolve_archives               - Deprecated: Use no_resolve_archives instead force_scheme                   - Optional: force a specific scheme to download this item. (Default: None) base_dir                       - Optional: base directory where the downloaded files will be stored. (Default: '.') no_subdir                      - Optional: If true, files are written directly into base_dir. (Default: False) nrandom                        - Optional: if the DID addresses a dataset, nrandom files will be randomly chosen for download from the dataset ignore_checksum                - Optional: If true, skips the checksum validation between the downloaded file and the rucio catalouge. (Default: False) transfer_timeout               - Optional: Timeout time for the download protocols. (Default: None) transfer_speed_timeout         - Optional: Minimum allowed transfer speed (in KBps). Ignored if transfer_timeout set. Otherwise, used to compute default timeout (Default: 500) check_local_with_filesize_only - Optional: If true, already downloaded files will not be validated by checksum.</p> required <code>num_threads</code> <code>int</code> <p>Suggestion of number of threads to use for the download. It will be lowered if it's too high.</p> <code>2</code> <code>trace_custom_fields</code> <code>Optional[dict[str, Any]]</code> <p>Custom key value pairs to send with the traces.</p> <code>None</code> <code>traces_copy_out</code> <code>Optional[list[dict[str, Any]]]</code> <p>reference to an external list, where the traces should be uploaded</p> <code>None</code> <code>deactivate_file_download_exceptions</code> <code>bool</code> <p>Boolean, if file download exceptions shouldn't be raised</p> <code>False</code> <code>sort</code> <code>Optional[SORTING_ALGORITHMS_LITERAL]</code> <p>Select best replica by replica sorting algorithm. Available algorithms: <code>geoip</code>       - based on src/dst IP topographical distance <code>closeness</code>   - based on src/dst closeness <code>dynamic</code>     - Rucio Dynamic Smart Sort (tm)</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>a list of dictionaries with an entry for each file, containing the input options, the did, and the clientState</p> <p>Raises:</p> Type Description <code>InputValidationError</code> <p>if one of the input items is in the wrong format</p> <code>NoFilesDownloaded</code> <p>if no files could be downloaded</p> <code>NotAllFilesDownloaded</code> <p>if not all files could be downloaded</p> <code>RucioException</code> <p>if something unexpected went wrong during the download</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.download_from_metalink_file","title":"<code>download_from_metalink_file(item, metalink_file_path, num_threads=2, trace_custom_fields=None, traces_copy_out=None, deactivate_file_download_exceptions=False)</code>","text":"<p>Download items using a given metalink file.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>dict[str, Any]</code> <p>dictionary describing an item to download. Keys: base_dir                       - Optional: base directory where the downloaded files will be stored. (Default: '.') no_subdir                      - Optional: If true, files are written directly into base_dir. (Default: False) ignore_checksum                - Optional: If true, skips the checksum validation between the downloaded file and the rucio catalouge. (Default: False) transfer_timeout               - Optional: Timeout time for the download protocols. (Default: None) check_local_with_filesize_only - Optional: If true, already downloaded files will not be validated by checksum.</p> required <code>num_threads</code> <code>int</code> <p>Suggestion of number of threads to use for the download. It will be lowered if it's too high.</p> <code>2</code> <code>trace_custom_fields</code> <code>Optional[dict[str, Any]]</code> <p>Custom key value pairs to send with the traces.</p> <code>None</code> <code>traces_copy_out</code> <code>Optional[list[dict[str, Any]]]</code> <p>reference to an external list, where the traces should be uploaded</p> <code>None</code> <code>deactivate_file_download_exceptions</code> <code>bool</code> <p>Boolean, if file download exceptions shouldn't be raised</p> <code>False</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>a list of dictionaries with an entry for each file, containing the input options, the did, and the clientState</p> <p>Raises:</p> Type Description <code>InputValidationError</code> <p>if one of the input items is in the wrong format</p> <code>NoFilesDownloaded</code> <p>if no files could be downloaded</p> <code>NotAllFilesDownloaded</code> <p>if not all files could be downloaded</p> <code>RucioException</code> <p>if something unexpected went wrong during the download</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.download_aria2c","title":"<code>download_aria2c(items, trace_custom_fields=None, filters=None, deactivate_file_download_exceptions=False, sort=None)</code>","text":"<p>Uses aria2c to download the items with given DIDs. This function can also download datasets and wildcarded DIDs. It only can download files that are available via https/davs. Aria2c needs to be installed and X509_USER_PROXY needs to be set!</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>list[dict[str, Any]]</code> <p>List of dictionaries. Each dictionary describing an item to download. Keys: did                            - DID string of this file (e.g. 'scope:file.name'). Wildcards are not allowed rse                            - Optional: rse name (e.g. 'CERN-PROD_DATADISK') or rse expression from where to download base_dir                       - Optional: base directory where the downloaded files will be stored. (Default: '.') no_subdir                      - Optional: If true, files are written directly into base_dir. (Default: False) nrandom                        - Optional: if the DID addresses a dataset, nrandom files will be randomly chosen for download from the dataset ignore_checksum                - Optional: If true, skips the checksum validation between the downloaded file and the rucio catalouge. (Default: False) check_local_with_filesize_only - Optional: If true, already downloaded files will not be validated by checksum.</p> required <code>trace_custom_fields</code> <code>Optional[dict[str, Any]]</code> <p>Custom key value pairs to send with the traces</p> <code>None</code> <code>filters</code> <code>Optional[dict[str, Any]]</code> <p>dictionary containing filter options</p> <code>None</code> <code>deactivate_file_download_exceptions</code> <code>bool</code> <p>Boolean, if file download exceptions shouldn't be raised</p> <code>False</code> <code>sort</code> <code>Optional[SORTING_ALGORITHMS_LITERAL]</code> <p>Select best replica by replica sorting algorithm. Available algorithms: <code>geoip</code>       - based on src/dst IP topographical distance <code>closeness</code>   - based on src/dst closeness <code>dynamic</code>     - Rucio Dynamic Smart Sort (tm)</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>a list of dictionaries with an entry for each file, containing the input options, the did, and the clientState</p> <p>Raises:</p> Type Description <code>InputValidationError</code> <p>if one of the input items is in the wrong format</p> <code>NoFilesDownloaded</code> <p>if no files could be downloaded</p> <code>NotAllFilesDownloaded</code> <p>if not all files could be downloaded</p> <code>RucioException</code> <p>if something went wrong during the download (e.g. aria2c could not be started)</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.preferred_impl","title":"<code>preferred_impl(sources)</code>","text":"<p>Finds the optimum protocol impl preferred by the client and supported by the remote RSE.</p> <p>Parameters:</p> Name Type Description Default <code>sources</code> <code>list[dict[str, Any]]</code> <p>List of sources for a given DID</p> required <p>Raises:</p> Type Description <code>RucioException(msg)</code> <p>general exception with msg for more details.</p>"},{"location":"exportclient.html","title":"Exportclient","text":""},{"location":"exportclient.html#rucio.client.exportclient.ExportClient","title":"<code>ExportClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>RSE client class for exporting data from Rucio</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"exportclient.html#rucio.client.exportclient.ExportClient.export_data","title":"<code>export_data(distance=True)</code>","text":"<p>Export RSE data (RSE, settings, attributes and distance).</p> <p>Parameters:</p> Name Type Description Default <code>distance</code> <code>bool</code> <p>To include the distance.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A dict containing data</p>"},{"location":"fileclient.html","title":"Fileclient","text":""},{"location":"fileclient.html#rucio.client.fileclient.FileClient","title":"<code>FileClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>Dataset client class for working with dataset</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"fileclient.html#rucio.client.fileclient.FileClient.list_file_replicas","title":"<code>list_file_replicas(scope, lfn)</code>","text":"<p>List file replicas.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>the scope.</p> required <code>lfn</code> <code>str</code> <p>the lfn.</p> required <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>List of replicas.</p>"},{"location":"importclient.html","title":"Importclient","text":""},{"location":"importclient.html#rucio.client.importclient.ImportClient","title":"<code>ImportClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>RSE client class for importing data into Rucio</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"importclient.html#rucio.client.importclient.ImportClient.import_data","title":"<code>import_data(data)</code>","text":"<p>Imports data into Rucio.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>a dict containing data to be imported into Rucio.</p> required"},{"location":"lifetimeclient.html","title":"Lifetimeclient","text":""},{"location":"lifetimeclient.html#rucio.client.lifetimeclient.LifetimeClient","title":"<code>LifetimeClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>Lifetime client class for working with Lifetime Model exceptions</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"lifetimeclient.html#rucio.client.lifetimeclient.LifetimeClient.list_exceptions","title":"<code>list_exceptions(exception_id=None, states=None)</code>","text":"<p>List exceptions to Lifetime Model.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <p>The id of the exception</p> required <code>states</code> <code>Optional[Sequence[LifetimeExceptionsState]]</code> <p>The states to filter</p> <code>None</code>"},{"location":"lifetimeclient.html#rucio.client.lifetimeclient.LifetimeClient.add_exception","title":"<code>add_exception(dids, account, pattern, comments, expires_at)</code>","text":"<p>Add exceptions to Lifetime Model.</p> <p>Parameters:</p> Name Type Description Default <code>dids</code> <code>list[dict[str, Any]]</code> <p>The list of dids</p> required <code>account</code> <code>str</code> <p>The account of the requester.</p> required <code>pattern</code> <code>str</code> <p>The account.</p> required <code>comments</code> <code>str</code> <p>The comments associated to the exception.</p> required <code>expires_at</code> <code>datetime</code> <p>The expiration date of the exception.  returns:            The id of the exception.</p> required"},{"location":"lockclient.html","title":"Lockclient","text":""},{"location":"lockclient.html#rucio.client.lockclient.LockClient","title":"<code>LockClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>Lock client class for working with rucio locks</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"lockclient.html#rucio.client.lockclient.LockClient.get_dataset_locks","title":"<code>get_dataset_locks(scope, name)</code>","text":"<p>Get a dataset locks of the specified dataset.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>the scope of the did of the locks to list.</p> required <code>name</code> <code>str</code> <p>the name of the did of the locks to list.</p> required"},{"location":"lockclient.html#rucio.client.lockclient.LockClient.get_locks_for_dids","title":"<code>get_locks_for_dids(dids, **filter_args)</code>","text":"<p>Get list of locks for for all the files found, recursively, in the listed datasets or containers.</p> <p>Parameters:</p> Name Type Description Default <code>dids</code> <code>list[Mapping[str, Any]]</code> <p>list of dictionaries {\"scope\":..., \"name\":..., \"type\":...} type can be either \"dataset\" or \"container\" type is optional, but if specified, improves the query performance</p> required <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>list of dictionaries with lock info</p>"},{"location":"lockclient.html#rucio.client.lockclient.LockClient.get_dataset_locks_by_rse","title":"<code>get_dataset_locks_by_rse(rse)</code>","text":"<p>Get all dataset locks of the specified rse.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>the rse of the locks to list.</p> required"},{"location":"metaconventionsclient.html","title":"Metaconventionsclient","text":""},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient","title":"<code>MetaConventionClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>Metadata client class for working with data identifier attributes</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.add_key","title":"<code>add_key(key, key_type, value_type=None, value_regexp=None)</code>","text":"<p>Sends the request to add an allowed key for DID metadata (update the DID Metadata Conventions table with a new key).</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>the name for the new key.</p> required <code>key_type</code> <code>Union[KeyType, str]</code> <p>the type of the key: all(container, dataset, file), collection(dataset or container), file, derived(compute from file for collection).</p> required <code>value_type</code> <code>Optional[str]</code> <p>the type of the value, if defined.</p> <code>None</code> <code>value_regexp</code> <code>Optional[str]</code> <p>the regular expression that values should match, if defined.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[bool]</code> <p>True if key was created successfully.</p> <p>Raises:</p> Type Description <code>Duplicate</code> <p>if key already exists.</p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.list_keys","title":"<code>list_keys()</code>","text":"<p>Sends the request to list all keys for DID Metadata Conventions.</p> <p>Returns:</p> Type Description <code>Optional[list[str]]</code> <p>a list containing the names of all keys.</p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.list_values","title":"<code>list_values(key)</code>","text":"<pre><code>    Sends the request to lists all allowed values for a DID key (all values for a key in DID Metadata Conventions).\n</code></pre> <p>.</p> <pre><code>    :return: a list containing the names of all values for a key.\n</code></pre>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.add_value","title":"<code>add_value(key, value)</code>","text":"<p>Sends the request to add a value for a key in DID Metadata Convention.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>the name for key.</p> required <code>value</code> <code>str</code> <p>the value.</p> required <p>Returns:</p> Type Description <code>Optional[bool]</code> <p>True if value was created successfully.</p> <p>Raises:</p> Type Description <code>Duplicate</code> <p>if valid already exists.</p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.del_value","title":"<code>del_value(key, value)</code>","text":"<p>Delete a key in the DID Metadata Conventions table.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>the name for key.</p> required <code>value</code> <p>the value.</p> required"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.del_key","title":"<code>del_key(key)</code>","text":"<p>Delete an allowed key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>the name for key.</p> required"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.update_key","title":"<code>update_key(key, type_=None, regexp=None)</code>","text":"<p>Update a key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>the name for key.</p> required <code>type_</code> <p>the type of the value, if defined.</p> <code>None</code> <code>regexp</code> <p>the regular expression that values should match, if defined.</p> <code>None</code>"},{"location":"pingclient.html","title":"Pingclient","text":""},{"location":"pingclient.html#rucio.client.pingclient.PingClient","title":"<code>PingClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>Ping client class</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"pingclient.html#rucio.client.pingclient.PingClient.ping","title":"<code>ping()</code>","text":"<p>Sends a ping request to the rucio server.</p> <p>Returns:</p> Type Description <p>Dictonnary with server information</p>"},{"location":"replicaclient.html","title":"Replicaclient","text":""},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient","title":"<code>ReplicaClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>Replica client class for working with replicas</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.quarantine_replicas","title":"<code>quarantine_replicas(replicas, rse=None, rse_id=None)</code>","text":"<p>Add quaratined replicas for RSE.</p> <p>Parameters:</p> Name Type Description Default <code>replicas</code> <p>List of replica infos: {'scope':  (optional), 'name':  (optional), 'path': (required)}. required <code>rse</code> <p>RSE name.</p> <code>None</code> <code>rse_id</code> <p>RSE id. Either RSE name or RSE id must be specified, but not both</p> <code>None</code>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.declare_bad_file_replicas","title":"<code>declare_bad_file_replicas(replicas, reason, force=False)</code>","text":"<p>Declare a list of bad replicas.</p> <p>Parameters:</p> Name Type Description Default <code>replicas</code> <p>Either a list of PFNs (string) or a list of dicts {'scope': , 'name': , 'rse_id':  or 'rse': } required <code>reason</code> <p>The reason of the loss.</p> required <code>force</code> <p>boolean, tell the serrver to ignore existing replica status in the bad_replicas table. Default: False</p> <code>False</code> <p>Returns:</p> Type Description <p>Dictionary {\"rse_name\": [\"did: error\",...]} - list of strings for DIDs failed to declare, by RSE</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.declare_bad_did_replicas","title":"<code>declare_bad_did_replicas(rse, dids, reason)</code>","text":"<p>Declare a list of bad replicas.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <p>The RSE where the bad replicas reside</p> required <code>dids</code> <p>The DIDs of the bad replicas</p> required <code>reason</code> <p>The reason of the loss.</p> required"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.declare_suspicious_file_replicas","title":"<code>declare_suspicious_file_replicas(pfns, reason)</code>","text":"<p>Declare a list of bad replicas.</p> <p>Parameters:</p> Name Type Description Default <code>pfns</code> <p>The list of PFNs.</p> required <code>reason</code> <p>The reason of the loss.</p> required"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.get_did_from_pfns","title":"<code>get_did_from_pfns(pfns, rse=None)</code>","text":"<p>Get the DIDs associated to a PFN on one given RSE</p> <p>Parameters:</p> Name Type Description Default <code>pfns</code> <p>The list of PFNs.</p> required <code>rse</code> <p>The RSE name.</p> <code>None</code> <p>Returns:</p> Type Description <p>A list of dictionaries {pfn: {'scope': scope, 'name': name}}</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_replicas","title":"<code>list_replicas(dids, schemes=None, ignore_availability=True, all_states=False, metalink=False, rse_expression=None, client_location=None, sort=None, domain=None, signature_lifetime=None, nrandom=None, resolve_archives=True, resolve_parents=False, updated_after=None)</code>","text":"<p>List file replicas for a list of data identifiers (DIDs).</p> <p>Parameters:</p> Name Type Description Default <code>dids</code> <p>The list of data identifiers (DIDs) like : [{'scope': , 'name': }, {'scope': , 'name': }, ...] required <code>schemes</code> <p>A list of schemes to filter the replicas. (e.g. file, http, ...)</p> <code>None</code> <code>ignore_availability</code> <p>Also include replicas from blocked RSEs into the list</p> <code>True</code> <code>metalink</code> <p><code>False</code> (default) retrieves as JSON, <code>True</code> retrieves as metalink4+xml.</p> <code>False</code> <code>rse_expression</code> <p>The RSE expression to restrict replicas on a set of RSEs.</p> <code>None</code> <code>client_location</code> <p>Client location dictionary for PFN modification {'ip', 'fqdn', 'site', 'latitude', 'longitude'}</p> <code>None</code> <code>sort</code> <p>Sort the replicas: <code>geoip</code> - based on src/dst IP topographical distance <code>closeness</code> - based on src/dst closeness <code>dynamic</code> - Rucio Dynamic Smart Sort (tm)</p> <code>None</code> <code>domain</code> <p>Define the domain. None is fallback to 'wan', otherwise 'wan, 'lan', or 'all'</p> <code>None</code> <code>signature_lifetime</code> <p>If supported, in seconds, restrict the lifetime of the signed PFN.</p> <code>None</code> <code>nrandom</code> <p>pick N random replicas. If the initial number of replicas is smaller than N, returns all replicas.</p> <code>None</code> <code>resolve_archives</code> <p>When set to True, find archives which contain the replicas.</p> <code>True</code> <code>resolve_parents</code> <p>When set to True, find all parent datasets which contain the replicas.</p> <code>False</code> <code>updated_after</code> <p>epoch timestamp or datetime object (UTC time), only return replicas updated after this time</p> <code>None</code> <p>Returns:</p> Type Description <p>A list of dictionaries with replica information.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_suspicious_replicas","title":"<code>list_suspicious_replicas(rse_expression=None, younger_than=None, nattempts=None)</code>","text":"<p>List file replicas tagged as suspicious.</p> <p>Parameters:</p> Name Type Description Default <code>rse_expression</code> <p>The RSE expression to restrict replicas on a set of RSEs.</p> <code>None</code> <code>younger_than</code> <p>Datetime object to select the replicas which were declared since younger_than date. Default value = 10 days ago.</p> <code>None</code> <code>nattempts</code> <p>The minimum number of replica appearances in the bad_replica DB table from younger_than date. Default value = 0.</p> <code>None</code> <code>state</code> <p>State of the replica, either 'BAD' or 'SUSPICIOUS'. No value returns replicas with either state.</p> required"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.add_replica","title":"<code>add_replica(rse, scope, name, bytes_, adler32, pfn=None, md5=None, meta=None)</code>","text":"<p>Add file replicas to a RSE.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>the RSE name.</p> required <code>scope</code> <code>str</code> <p>The scope of the file.</p> required <code>name</code> <code>str</code> <p>The name of the file.</p> required <code>bytes_</code> <code>int</code> <p>The size in bytes.</p> required <code>adler32</code> <code>str</code> <p>adler32 checksum.</p> required <code>pfn</code> <code>Optional[str]</code> <p>PFN of the file for non deterministic RSE.</p> <code>None</code> <code>md5</code> <code>Optional[str]</code> <p>md5 checksum.</p> <code>None</code> <code>meta</code> <code>Optional[dict[str, Any]]</code> <p>Metadata attributes.</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if files were created successfully.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.add_replicas","title":"<code>add_replicas(rse, files, ignore_availability=True)</code>","text":"<p>Bulk add file replicas to a RSE.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <p>the RSE name.</p> required <code>files</code> <p>The list of files. This is a list of DIDs like : [{'scope': , 'name': }, {'scope': , 'name': }, ...] required <code>ignore_availability</code> <p>Ignore the RSE blocklsit.</p> <code>True</code> <p>Returns:</p> Type Description <p>True if files were created successfully.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.delete_replicas","title":"<code>delete_replicas(rse, files, ignore_availability=True)</code>","text":"<p>Bulk delete file replicas from a RSE.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <p>the RSE name.</p> required <code>files</code> <p>The list of files. This is a list of DIDs like : [{'scope': , 'name': }, {'scope': , 'name': }, ...] required <code>ignore_availability</code> <p>Ignore the RSE blocklist.</p> <code>True</code> <p>Returns:</p> Type Description <p>True if files have been deleted successfully.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.update_replicas_states","title":"<code>update_replicas_states(rse, files)</code>","text":"<p>Bulk update the file replicas states from a RSE.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <p>the RSE name.</p> required <code>files</code> <p>The list of files. This is a list of DIDs like : [{'scope': , 'name': , 'state': }, {'scope': , 'name': , 'state': }, ...], where a state value can be either of: 'A' (AVAILABLE) 'U' (UNAVAILABLE) 'C' (COPYING) 'B' (BEING_DELETED) 'D' (BAD) 'T' (TEMPORARY_UNAVAILABLE) required <p>Returns:</p> Type Description <p>True if replica states have been updated successfully, otherwise an exception is raised.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_dataset_replicas","title":"<code>list_dataset_replicas(scope, name, deep=False)</code>","text":"<p>List dataset replicas for a did (scope:name).</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <p>The scope of the dataset.</p> required <code>name</code> <p>The name of the dataset.</p> required <code>deep</code> <p>Lookup at the file level.</p> <code>False</code> <p>Returns:</p> Type Description <p>A list of dict dataset replicas.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_dataset_replicas_bulk","title":"<code>list_dataset_replicas_bulk(dids)</code>","text":"<p>List dataset replicas for a did (scope:name).</p> <p>Parameters:</p> Name Type Description Default <code>dids</code> <p>The list of DIDs of the datasets.</p> required <p>Returns:</p> Type Description <p>A list of dict dataset replicas.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_dataset_replicas_vp","title":"<code>list_dataset_replicas_vp(scope, name, deep=False)</code>","text":"<p>List dataset replicas for a DID (scope:name) using the Virtual Placement service.</p> <p>NOTICE: This is an RnD function and might change or go away at any time.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <p>The scope of the dataset.</p> required <code>name</code> <p>The name of the dataset.</p> required <code>deep</code> <p>Lookup at the file level.</p> <code>False</code> <p>Returns:</p> Type Description <p>If VP exists a list of dicts of sites</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_datasets_per_rse","title":"<code>list_datasets_per_rse(rse, filters=None, limit=None)</code>","text":"<p>List datasets at a RSE.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <p>the rse name.</p> required <code>filters</code> <p>dictionary of attributes by which the results should be filtered.</p> <code>None</code> <code>limit</code> <p>limit number.</p> <code>None</code> <p>Returns:</p> Type Description <p>A list of dict dataset replicas.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.add_bad_pfns","title":"<code>add_bad_pfns(pfns, reason, state, expires_at)</code>","text":"<p>Declare a list of bad replicas.</p> <p>Parameters:</p> Name Type Description Default <code>pfns</code> <p>The list of PFNs.</p> required <code>reason</code> <p>The reason of the loss.</p> required <code>state</code> <p>The state of the replica. Either BAD, SUSPICIOUS, TEMPORARY_UNAVAILABLE</p> required <code>expires_at</code> <p>Specify a timeout for the TEMPORARY_UNAVAILABLE replicas. None for BAD files.</p> required <p>Returns:</p> Type Description <p>True if PFNs were created successfully.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.set_tombstone","title":"<code>set_tombstone(replicas)</code>","text":"<p>Set a tombstone on a list of replicas.</p> <p>Parameters:</p> Name Type Description Default <code>replicas</code> <p>list of replicas.</p> required"},{"location":"requestclient.html","title":"Requestclient","text":""},{"location":"requestclient.html#rucio.client.requestclient.RequestClient","title":"<code>RequestClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.list_requests","title":"<code>list_requests(src_rse, dst_rse, request_states)</code>","text":"<p>Return latest request details</p> <p>Returns:</p> Type Description <code>Iterator[dict[str, Any]]</code> <p>request information</p>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.list_requests_history","title":"<code>list_requests_history(src_rse, dst_rse, request_states, offset=0, limit=100)</code>","text":"<p>Return historical request details</p> <p>Returns:</p> Type Description <code>Iterator[dict[str, Any]]</code> <p>request information</p>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.list_request_by_did","title":"<code>list_request_by_did(name, rse, scope=None)</code>","text":"<p>Return latest request details for a DID</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>DID</p> required <code>rse</code> <code>str</code> <p>Destination RSE name</p> required <code>scope</code> <code>Optional[str]</code> <p>rucio scope, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[dict[str, Any]]</code> <p>request information</p> <p>Raises:</p> Type Description <code>exc_cls</code> <p>from BaseClient._get_exception</p>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.list_request_history_by_did","title":"<code>list_request_history_by_did(name, rse, scope=None)</code>","text":"<p>Return latest request details for a DID</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>DID</p> required <code>rse</code> <code>str</code> <p>Destination RSE name</p> required <code>scope</code> <code>Optional[str]</code> <p>rucio scope, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[dict[str, Any]]</code> <p>request information</p> <p>Raises:</p> Type Description <code>exc_cls</code> <p>from BaseClient._get_exception</p>"},{"location":"richclient.html","title":"Richclient","text":""},{"location":"richclient.html#rucio.client.richclient.CLITheme","title":"<code>CLITheme</code>","text":"<p>Class to define styles for Rich widgets and prints in the CLI.</p>"},{"location":"richclient.html#rucio.client.richclient.setup_rich_logger","title":"<code>setup_rich_logger(module_name=None, logger_name=None, logger_level=None, verbose=False, console=None)</code>","text":"<p>Factory method to set logger with RichHandler.</p> <p>The function is a copy of the method in rucio.common.utils setup_logger() with minor changes.</p> <p>Parameters:</p> Name Type Description Default <code>module_name</code> <code>Optional[str]</code> <p>name of the module that is calling this method</p> <code>None</code> <code>logger_name</code> <code>Optional[str]</code> <p>name of the logger, typically name of the module.</p> <code>None</code> <code>logger_level</code> <code>Optional[int]</code> <p>if not given, fetched from config.</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>verbose option set in bin/rucio</p> <code>False</code> <code>console</code> <code>Optional[Console]</code> <p>Rich console object</p> <code>None</code> <p>Returns:</p> Type Description <code>Logger</code> <p>logger with RichHandler</p>"},{"location":"richclient.html#rucio.client.richclient.generate_table","title":"<code>generate_table(rows, headers=None, row_styles=None, col_alignments=None, table_format=CLITheme.TABLE_FMT)</code>","text":"<p>Generates a Rich Table object from given input rows.</p> <p>The elements in each row can be either plain strings or Rich renderable objects. Passing strings will display them as simple text, while using Rich objects allows you to introduce additional structure, styling, and widgets (e.g. Text, Trees) into the table. Strings with style markup will be rendered as styled text.</p> <p>Parameters:</p> Name Type Description Default <code>table_format</code> <code>Box</code> <p>style of the table</p> <code>TABLE_FMT</code> <code>headers</code> <code>Optional[Sequence[RenderableType]]</code> <p>list of headers</p> <code>None</code> <code>rows</code> <code>Sequence[Sequence[Union[RenderableType, int, float, bool, datetime]]]</code> <p>list of rows</p> required <code>col_alignments</code> <code>Optional[list[JustifyMethod]]</code> <p>list of column alignments</p> <code>None</code> <code>row_styles</code> <code>Optional[Sequence[StyleType]]</code> <p>list of row styles</p> <code>None</code> <p>Returns:</p> Type Description <code>Table</code> <p>a Rich Table object</p>"},{"location":"richclient.html#rucio.client.richclient.print_output","title":"<code>print_output(*output, console, no_pager=False)</code>","text":"<p>Prints the objects using the specified Rich console object. Optionally disables the pager if specified.</p> <p>The function works similarly to Rich's <code>console.print()</code> method but provides additional control over the pager feature.</p> <p>Parameters:</p> Name Type Description Default <code>output</code> <code>Any</code> <p>objects to print to the terminal</p> <code>()</code> <code>console</code> <code>Console</code> <p>Rich console object</p> required <code>no_pager</code> <code>bool</code> <p>flag to disable the pager</p> <code>False</code>"},{"location":"richclient.html#rucio.client.richclient.get_cli_config","title":"<code>get_cli_config()</code>","text":"<p>Returns the CLI type from the config file.</p> <p>Returns:</p> Type Description <code>str</code> <p>CLI type (Rich or tabulate)</p>"},{"location":"richclient.html#rucio.client.richclient.get_pager","title":"<code>get_pager()</code>","text":"<p>Returns the pager function based on the terminal availability.</p> <p>Returns:</p> Type Description <code>Callable[[str], None]</code> <p>pager</p>"},{"location":"rseclient.html","title":"Rseclient","text":""},{"location":"rseclient.html#rucio.client.rseclient.RSEClient","title":"<code>RSEClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>RSE client class for working with rucio RSEs</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_rse","title":"<code>get_rse(rse)</code>","text":"<p>Returns details about the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>Name of the referred RSE</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A dict containing all attributes of the referred RSE</p> <p>Raises:</p> Type Description <code>RSENotFound</code> <p>if the referred RSE was not found in the database</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_rse","title":"<code>add_rse(rse, **kwargs)</code>","text":"<p>Sends the request to create a new RSE.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>the name of the rse.</p> required <code>deterministic</code> <p>Boolean to know if the pfn is generated deterministically.</p> required <code>volatile</code> <p>Boolean for RSE cache.</p> required <code>city</code> <p>City for the RSE.</p> required <code>region_code</code> <p>The region code for the RSE.</p> required <code>country_name</code> <p>The country.</p> required <code>continent</code> <p>The continent.</p> required <code>time_zone</code> <p>Timezone.</p> required <code>staging_area</code> <p>Staging area.</p> required <code>ISP</code> <p>Internet service provider.</p> required <code>rse_type</code> <p>RSE type.</p> required <code>latitude</code> <p>Latitude coordinate of RSE.</p> required <code>longitude</code> <p>Longitude coordinate of RSE.</p> required <code>ASN</code> <p>Access service network.</p> required <code>availability</code> <p>Availability.</p> required <p>Returns:</p> Type Description <code>Literal[True]</code> <p>True if location was created successfully else False.</p> <p>Raises:</p> Type Description <code>Duplicate</code> <p>if rse already exists.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.update_rse","title":"<code>update_rse(rse, parameters)</code>","text":"<p>Update RSE properties like availability or name.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>the name of the new rse.</p> required <code>parameters</code> <p>A dictionary with property (name, read, write, delete as keys).</p> required"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_rse","title":"<code>delete_rse(rse)</code>","text":"<p>Sends the request to delete a rse.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>the name of the rse.</p> required <p>Returns:</p> Type Description <code>Literal[True]</code> <p>True if location was created successfully else False.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.list_rses","title":"<code>list_rses(rse_expression=None)</code>","text":"<p>Sends the request to list all rucio locations(RSEs).</p> <p>:rse_expression: RSE Expression to use as filter.</p> <p>Returns:</p> Type Description <code>Iterator[dict[str, Any]]</code> <p>a list containing the names of all rucio locations.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_rse_attribute","title":"<code>add_rse_attribute(rse, key, value)</code>","text":"<p>Sends the request to add a RSE attribute.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>the name of the rse.</p> required <code>key</code> <code>str</code> <p>the attribute key.</p> required <code>value</code> <code>Any</code> <p>the attribute value.</p> required <p>Returns:</p> Type Description <code>Literal[True]</code> <p>True if RSE attribute was created successfully else False.</p> <p>Raises:</p> Type Description <code>Duplicate</code> <p>if RSE attribute already exists.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_rse_attribute","title":"<code>delete_rse_attribute(rse, key)</code>","text":"<p>Sends the request to delete a RSE attribute.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>the RSE name.</p> required <code>key</code> <code>str</code> <p>the attribute key.</p> required <p>Returns:</p> Type Description <code>Literal[True]</code> <p>True if RSE attribute was deleted successfully else False.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.list_rse_attributes","title":"<code>list_rse_attributes(rse)</code>","text":"<p>Sends the request to get RSE attributes.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>The RSE name.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A <code>dict</code> with the RSE attribute name/value pairs.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_protocol","title":"<code>add_protocol(rse, params)</code>","text":"<p>Sends the request to create a new protocol for the given RSE.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>the name of the  rse.</p> required <code>scheme</code> <p>identifier of this protocol</p> required <code>params</code> <code>dict[str, Any]</code> <p>Attributes of the protocol. Supported are: hostname:       hostname for this protocol (default = localhost) port:           port for this protocol (default = 0) prefix:         string used as a prfeix for this protocol when generating the PFN (default = None) impl:           qualified name of the implementation class for this protocol (mandatory) read:           integer representing the priority of this procotol for read operations (default = -1) write:          integer representing the priority of this procotol for write operations (default = -1) delete:         integer representing the priority of this procotol for delete operations (default = -1) extended_attributes:  miscellaneous protocol specific information e.g. spacetoken for SRM (default = None)</p> required <p>Returns:</p> Type Description <code>Literal[True]</code> <p>True if protocol was created successfully else False.</p> <p>Raises:</p> Type Description <code>Duplicate</code> <p>if protocol with same hostname, port and protocol identifier already exists for the given RSE.</p> <code>RSENotFound</code> <p>if the RSE doesn't exist.</p> <code>KeyNotFound</code> <p>if params is missing manadtory attributes to create the protocol.</p> <code>AccessDenied</code> <p>if not authorized.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_protocols","title":"<code>get_protocols(rse, protocol_domain='ALL', operation=None, default=False, scheme=None)</code>","text":"<p>Returns protocol information. Parameter combinations are: (operation OR default) XOR protocol.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>the RSE name.</p> required <code>protocol_domain</code> <code>RSE_SUPPORTED_PROTOCOL_DOMAINS_LITERAL</code> <p>The scope of the protocol. Supported are 'LAN', 'WAN', and 'ALL' (as default).</p> <code>'ALL'</code> <code>operation</code> <code>Optional[RSE_ALL_SUPPORTED_PROTOCOL_OPERATIONS_LITERAL]</code> <p>The name of the requested operation (read, write, or delete). If None, all operations are queried.</p> <code>None</code> <code>default</code> <code>bool</code> <p>Indicates if only the default operations should be returned.</p> <code>False</code> <code>scheme</code> <code>Optional[SUPPORTED_PROTOCOLS_LITERAL]</code> <p>The identifier of the requested protocol.</p> <code>None</code> <p>Returns:</p> Type Description <code>Any</code> <p>A dict with details about each matching protocol.</p> <p>Raises:</p> Type Description <code>RSENotFound</code> <p>if the RSE doesn't exist.</p> <code>RSEProtocolNotSupported</code> <p>if no matching protocol entry could be found.</p> <code>RSEOperationNotSupported</code> <p>if no matching protocol entry for the requested operation could be found.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.lfns2pfns","title":"<code>lfns2pfns(rse, lfns, protocol_domain='ALL', operation=None, scheme=None)</code>","text":"<p>Returns PFNs that should be used at a RSE, corresponding to requested LFNs. The PFNs are generated for the RSE regardless of whether a replica exists for the LFN.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>the RSE name</p> required <code>lfns</code> <code>Iterable[str]</code> <p>A list of LFN strings to translate to PFNs.</p> required <code>protocol_domain</code> <code>RSE_SUPPORTED_PROTOCOL_DOMAINS_LITERAL</code> <p>The scope of the protocol. Supported are 'LAN', 'WAN', and 'ALL' (as default).</p> <code>'ALL'</code> <code>operation</code> <code>Optional[RSE_ALL_SUPPORTED_PROTOCOL_OPERATIONS_LITERAL]</code> <p>The name of the requested operation (read, write, or delete). If None, all operations are queried.</p> <code>None</code> <code>scheme</code> <code>Optional[SUPPORTED_PROTOCOLS_LITERAL]</code> <p>The identifier of the requested protocol (gsiftp, https, davs, etc).</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>A dictionary of LFN / PFN pairs.</p> <p>Raises:</p> Type Description <code>RSENotFound</code> <p>if the RSE doesn't exist.</p> <code>RSEProtocolNotSupported</code> <p>if no matching protocol entry could be found.</p> <code>RSEOperationNotSupported</code> <p>if no matching protocol entry for the requested operation could be found.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_protocols","title":"<code>delete_protocols(rse, scheme, hostname=None, port=None)</code>","text":"<p>Deletes matching protocols from RSE. Protocols using the same identifier can be distinguished by hostname and port.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>the RSE name.</p> required <code>scheme</code> <code>SUPPORTED_PROTOCOLS_LITERAL</code> <p>identifier of the protocol.</p> required <code>hostname</code> <code>Optional[str]</code> <p>hostname of the protocol.</p> <code>None</code> <code>port</code> <code>Optional[int]</code> <p>port of the protocol.</p> <code>None</code> <p>Returns:</p> Type Description <code>Literal[True]</code> <p>True if success.</p> <p>Raises:</p> Type Description <code>RSEProtocolNotSupported</code> <p>if no matching protocol entry could be found.</p> <code>RSENotFound</code> <p>if the RSE doesn't exist.</p> <code>AccessDenied</code> <p>if not authorized.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.update_protocols","title":"<code>update_protocols(rse, scheme, data, hostname=None, port=None)</code>","text":"<p>Updates matching protocols from RSE. Protocol using the same identifier can be distinguished by hostname and port.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>the RSE name.</p> required <code>scheme</code> <code>SUPPORTED_PROTOCOLS_LITERAL</code> <p>identifier of the protocol.</p> required <code>data</code> <code>dict[str, Any]</code> <p>A dict providing the new values of the protocol attributes. Keys must match column names in database.</p> required <code>hostname</code> <code>Optional[str]</code> <p>hostname of the protocol.</p> <code>None</code> <code>port</code> <code>Optional[int]</code> <p>port of the protocol.</p> <code>None</code> <p>Returns:</p> Type Description <p>True if success.</p> <p>Raises:</p> Type Description <code>RSEProtocolNotSupported</code> <p>if no matching protocol entry could be found.</p> <code>RSENotFound</code> <p>if the RSE doesn't exist.</p> <code>KeyNotFound</code> <p>if invalid data was provided for update.</p> <code>AccessDenied</code> <p>if not authorized.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.swap_protocols","title":"<code>swap_protocols(rse, domain, operation, scheme_a, scheme_b)</code>","text":"<p>Swaps the priorities of the provided operation.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>the RSE name.</p> required <code>domain</code> <code>RSE_SUPPORTED_PROTOCOL_DOMAINS_LITERAL</code> <p>the domain in which priorities should be swapped i.e. wan or lan.</p> required <code>operation</code> <code>RSE_ALL_SUPPORTED_PROTOCOL_OPERATIONS_LITERAL</code> <p>the operation that should be swapped i.e. read, write, or delete.</p> required <code>scheme_a</code> <code>SUPPORTED_PROTOCOLS_LITERAL</code> <p>the scheme of one of the two protocols to be swapped, e.g. srm.</p> required <code>scheme_b</code> <code>SUPPORTED_PROTOCOLS_LITERAL</code> <p>the scheme of the other of the two protocols to be swapped, e.g. http.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if success.</p> <p>Raises:</p> Type Description <code>RSEProtocolNotSupported</code> <p>if no matching protocol entry could be found.</p> <code>RSENotFound</code> <p>if the RSE doesn't exist.</p> <code>KeyNotFound</code> <p>if invalid data was provided for update.</p> <code>AccessDenied</code> <p>if not authorized.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_qos_policy","title":"<code>add_qos_policy(rse, qos_policy)</code>","text":"<p>Add a QoS policy from an RSE.</p> <p>Parameters:</p> Name Type Description Default <code>rse_id</code> <p>The id of the RSE.</p> required <code>qos_policy</code> <code>str</code> <p>The QoS policy to add.</p> required <code>session</code> <p>The database session in use.</p> required <p>Returns:</p> Type Description <code>Literal[True]</code> <p>True if successful, except otherwise.</p> <p>Raises:</p> Type Description <code>Duplicate</code> <p>If the QoS policy already exists.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_qos_policy","title":"<code>delete_qos_policy(rse, qos_policy)</code>","text":"<p>Delete a QoS policy from an RSE.</p> <p>Parameters:</p> Name Type Description Default <code>rse_id</code> <p>The id of the RSE.</p> required <code>qos_policy</code> <code>str</code> <p>The QoS policy to delete.</p> required <code>session</code> <p>The database session in use.</p> required <p>Returns:</p> Type Description <code>Literal[True]</code> <p>True if successful, silent failure if QoS policy does not exist.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.list_qos_policies","title":"<code>list_qos_policies(rse)</code>","text":"<p>List all QoS policies of an RSE.</p> <p>Parameters:</p> Name Type Description Default <code>rse_id</code> <p>The id of the RSE.</p> required <code>session</code> <p>The database session in use.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>List containing all QoS policies.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.set_rse_usage","title":"<code>set_rse_usage(rse, source, used, free, files=None)</code>","text":"<p>Set RSE usage information.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>the RSE name.</p> required <code>source</code> <code>str</code> <p>the information source, e.g. srm.</p> required <code>used</code> <code>int</code> <p>the used space in bytes.</p> required <code>free</code> <code>int</code> <p>the free in bytes.</p> required <code>files</code> <code>Optional[int]</code> <p>the number of files</p> <code>None</code> <p>Returns:</p> Type Description <code>Literal[True]</code> <p>True if successful</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_rse_usage","title":"<code>get_rse_usage(rse, filters=None)</code>","text":"<p>Get RSE usage information.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>the RSE name.</p> required <code>filters</code> <code>Optional[dict[str, Any]]</code> <p>dictionary of attributes by which the results should be filtered</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[dict[str, Any]]</code> <p>True if successful, otherwise false.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.list_rse_usage_history","title":"<code>list_rse_usage_history(rse, filters=None)</code>","text":"<p>List RSE usage history information.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>The RSE name.</p> required <code>filters</code> <code>Optional[dict[str, Any]]</code> <p>dictionary of attributes by which the results should be filtered.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[dict[str, Any]]</code> <p>list of dictionaries.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.set_rse_limits","title":"<code>set_rse_limits(rse, name, value)</code>","text":"<p>Set RSE limit information.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>The RSE name.</p> required <code>name</code> <code>str</code> <p>The name of the limit.</p> required <code>value</code> <code>int</code> <p>The feature value.</p> required <p>Returns:</p> Type Description <code>Literal[True]</code> <p>True if successful</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_rse_limits","title":"<code>get_rse_limits(rse)</code>","text":"<p>Get RSE limits.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>The RSE name.</p> required <p>Returns:</p> Type Description <code>Iterator[dict[str, Union[str, int]]]</code> <p>An iterator of RSE limits as dicts with 'name' and 'value' as keys.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_rse_limits","title":"<code>delete_rse_limits(rse, name)</code>","text":"<p>Delete RSE limit information.</p> <p>Parameters:</p> Name Type Description Default <code>rse</code> <code>str</code> <p>The RSE name.</p> required <code>name</code> <code>str</code> <p>The name of the limit.</p> required <p>Returns:</p> Type Description <code>Literal[True]</code> <p>True if successful</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_distance","title":"<code>add_distance(source, destination, parameters)</code>","text":"<p>Add a src-dest distance.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>The source.</p> required <code>destination</code> <code>str</code> <p>The destination.</p> required <code>parameters</code> <code>dict[str, int]</code> <p>A dictionary with property.</p> required"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.update_distance","title":"<code>update_distance(source, destination, parameters)</code>","text":"<p>Update distances with the given RSE ids.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>The source.</p> required <code>destination</code> <code>str</code> <p>The destination.</p> required <code>parameters</code> <code>dict[str, int]</code> <p>A dictionary with property.</p> required"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_distance","title":"<code>get_distance(source, destination)</code>","text":"<p>Get distances between rses.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>The source RSE.</p> required <code>destination</code> <code>str</code> <p>The destination RSE.</p> required <p>Returns:</p> Type Description <code>list[dict[str, Union[str, int]]]</code> <p>List of dictionaries.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_distance","title":"<code>delete_distance(source, destination)</code>","text":"<p>Delete distances with the given RSE ids.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>The source.</p> required <code>destination</code> <code>str</code> <p>The destination.</p> required"},{"location":"ruleclient.html","title":"Ruleclient","text":""},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient","title":"<code>RuleClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>RuleClient class for working with replication rules</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.add_replication_rule","title":"<code>add_replication_rule(dids, copies, rse_expression, priority=3, lifetime=None, grouping='DATASET', notify='N', source_replica_expression=None, activity=None, account=None, meta=None, ignore_availability=False, purge_replicas=False, ask_approval=False, asynchronous=False, locked=False, delay_injection=None, comment=None, weight=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>dids</code> <code>Sequence[dict[str, str]]</code> <p>The data identifier set.</p> required <code>copies</code> <code>int</code> <p>The number of replicas.</p> required <code>rse_expression</code> <code>str</code> <p>Boolean string expression to give the list of RSEs.</p> required <code>priority</code> <code>int</code> <p>Priority of the transfers.</p> <code>3</code> <code>lifetime</code> <code>Optional[int]</code> <p>The lifetime of the replication rules (in seconds).</p> <code>None</code> <code>grouping</code> <code>str</code> <p>ALL -  All files will be replicated to the same RSE. DATASET - All files in the same dataset will be replicated to the same RSE. NONE - Files will be completely spread over all allowed RSEs without any grouping considerations at all.</p> <code>'DATASET'</code> <code>notify</code> <code>str</code> <p>Notification setting for the rule (Y, N, C).</p> <code>'N'</code> <code>source_replica_expression</code> <code>Optional[str]</code> <p>RSE Expression for RSEs to be considered for source replicas.</p> <code>None</code> <code>activity</code> <code>Optional[str]</code> <p>Transfer Activity to be passed to FTS.</p> <code>None</code> <code>account</code> <code>Optional[str]</code> <p>The account owning the rule.</p> <code>None</code> <code>meta</code> <code>Optional[str]</code> <p>Metadata, as dictionary.</p> <code>None</code> <code>ignore_availability</code> <code>bool</code> <p>Option to ignore the availability of RSEs.</p> <code>False</code> <code>purge_replicas</code> <code>bool</code> <p>When the rule gets deleted purge the associated replicas immediately.</p> <code>False</code> <code>ask_approval</code> <code>bool</code> <p>Ask for approval of this replication rule.</p> <code>False</code> <code>asynchronous</code> <code>bool</code> <p>Create rule asynchronously by judge-injector.</p> <code>False</code> <code>locked</code> <code>bool</code> <p>If the rule is locked, it cannot be deleted.</p> <code>False</code> <code>delay_injection</code> <code>Optional[int]</code> <code>None</code> <code>comment</code> <code>Optional[str]</code> <p>Comment about the rule.</p> <code>None</code> <code>weight</code> <code>Optional[int]</code> <p>If the weighting option of the replication rule is used, the choice of RSEs takes their weight into account.</p> <code>None</code>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.delete_replication_rule","title":"<code>delete_replication_rule(rule_id, purge_replicas=None)</code>","text":"<p>Deletes a replication rule and all associated locks.</p> <p>Parameters:</p> Name Type Description Default <code>rule_id</code> <code>str</code> <p>The id of the rule to be deleted</p> required <code>purge_replicas</code> <code>Optional[bool]</code> <p>Immediately delete the replicas.</p> <code>None</code>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.get_replication_rule","title":"<code>get_replication_rule(rule_id)</code>","text":"<p>Get a replication rule.</p> <p>Parameters:</p> Name Type Description Default <code>rule_id</code> <code>str</code> <p>The id of the rule to be retrieved.</p> required"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.update_replication_rule","title":"<code>update_replication_rule(rule_id, options)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>rule_id</code> <code>str</code> <p>The id of the rule to be retrieved.</p> required <code>options</code> <code>dict[str, Any]</code> <p>Options dictionary.</p> required"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.reduce_replication_rule","title":"<code>reduce_replication_rule(rule_id, copies, exclude_expression=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>rule_id</code> <code>str</code> <p>Rule to be reduced.</p> required <code>copies</code> <code>int</code> <p>Number of copies of the new rule.</p> required <code>exclude_expression</code> <code>Optional[str]</code> <p>RSE Expression of RSEs to exclude.</p> <code>None</code>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.move_replication_rule","title":"<code>move_replication_rule(rule_id, rse_expression, override)</code>","text":"<p>Move a replication rule to another RSE and, once done, delete the original one.</p> <p>Parameters:</p> Name Type Description Default <code>rule_id</code> <code>str</code> <p>Rule to be moved.</p> required <code>rse_expression</code> <code>str</code> <p>RSE expression of the new rule.</p> required <code>override</code> <code>Mapping[str, Any]</code> <p>Configurations to update for the new rule.</p> required"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.approve_replication_rule","title":"<code>approve_replication_rule(rule_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>rule_id</code> <code>str</code> <p>Rule to be approved.</p> required"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.deny_replication_rule","title":"<code>deny_replication_rule(rule_id, reason=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>rule_id</code> <code>str</code> <p>Rule to be denied.</p> required <code>reason</code> <code>Optional[str]</code> <p>Reason for denying the rule.</p> <code>None</code>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.list_replication_rule_full_history","title":"<code>list_replication_rule_full_history(scope, name)</code>","text":"<p>List the rule history of a DID.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>Union[str, bytes]</code> <p>The scope of the DID.</p> required <code>name</code> <code>Union[str, bytes]</code> <p>The name of the DID.</p> required"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.examine_replication_rule","title":"<code>examine_replication_rule(rule_id)</code>","text":"<p>Examine a replication rule for errors during transfer.</p> <p>Parameters:</p> Name Type Description Default <code>rule_id</code> <code>str</code> <p>Rule to be denied.</p> required"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.list_replica_locks","title":"<code>list_replica_locks(rule_id)</code>","text":"<p>List details of all replica locks for a rule.</p> <p>Parameters:</p> Name Type Description Default <code>rule_id</code> <code>str</code> <p>Rule to be denied.</p> required"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.list_replication_rules","title":"<code>list_replication_rules(filters=None)</code>","text":"<p>List all replication rules which match a filter</p> <p>Parameters:</p> Name Type Description Default <code>filters</code> <code>Optional[dict[str, Any]]</code> <p>dictionary of attributes by which the rules should be filtered</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[dict[str, Any]]</code> <p>True if successful, otherwise false.</p>"},{"location":"scopeclient.html","title":"Scopeclient","text":""},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient","title":"<code>ScopeClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>Scope client class for working with rucio scopes</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient.add_scope","title":"<code>add_scope(account, scope)</code>","text":"<p>Sends the request to add a new scope.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>the name of the account to add the scope to.</p> required <code>scope</code> <code>str</code> <p>the name of the new scope.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if scope was created successfully.</p> <p>Raises:</p> Type Description <code>Duplicate</code> <p>if scope already exists.</p> <code>AccountNotFound</code> <p>if account doesn't exist.</p>"},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient.list_scopes","title":"<code>list_scopes()</code>","text":"<p>Sends the request to list all scopes.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>a list containing the names of all scopes.</p>"},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient.list_scopes_for_account","title":"<code>list_scopes_for_account(account)</code>","text":"<p>Sends the request to list all scopes for a rucio account.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>the rucio account to list scopes for.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>a list containing the names of all scopes for a rucio account.</p> <p>Raises:</p> Type Description <code>AccountNotFound</code> <p>if account doesn't exist.</p> <code>ScopeNotFound</code> <p>if no scopes exist for account.</p>"},{"location":"subscriptionclient.html","title":"Subscriptionclient","text":""},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient","title":"<code>SubscriptionClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>SubscriptionClient class for working with subscriptions</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient.add_subscription","title":"<code>add_subscription(name, account, filter_, replication_rules, comments, lifetime, retroactive, dry_run, priority=3)</code>","text":"<p>Adds a new subscription which will be verified against every new added file and dataset</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the subscription</p> required <code>account</code> <code>str</code> <p>Account identifier</p> required <code>filter_</code> <code>dict[str, Any]</code> <p>Dictionary of attributes by which the input data should be filtered Example: <code>{'dsn': 'data11_hi*.express_express.*,data11_hi*physics_MinBiasOverlay*', 'account': 'tzero'}</code></p> required <code>replication_rules</code> <code>dict[str, Any]</code> <p>Replication rules to be set : Dictionary with keys copies, rse_expression, weight, rse_expression</p> required <code>comments</code> <code>str</code> <p>Comments for the subscription</p> required <code>lifetime</code> <code>Union[int, Literal[False]]</code> <p>Subscription's lifetime (days); False if subscription has no lifetime</p> required <code>retroactive</code> <code>bool</code> <p>Flag to know if the subscription should be applied on previous data</p> required <code>dry_run</code> <code>bool</code> <p>Just print the subscriptions actions without actually executing them (Useful if retroactive flag is set)</p> required <code>priority</code> <code>int</code> <p>The priority of the subscription (3 by default)</p> <code>3</code>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient.list_subscriptions","title":"<code>list_subscriptions(name=None, account=None)</code>","text":"<p>Returns a dictionary with the subscription information : Examples: <code>{'status': 'INACTIVE/ACTIVE/BROKEN', 'last_modified_date': ...}</code></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Name of the subscription</p> <code>None</code> <code>account</code> <code>Optional[dict[str, Any]]</code> <p>Account identifier</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Iterator[dict[str, Any]], list]</code> <p>Dictionary containing subscription parameter</p>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient.update_subscription","title":"<code>update_subscription(name, account=None, filter_=None, replication_rules=None, comments=None, lifetime=None, retroactive=None, dry_run=None, priority=None)</code>","text":"<p>Updates a subscription</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <p>Name of the subscription</p> required <code>account</code> <code>Optional[str]</code> <p>Account identifier</p> <code>None</code> <code>filter_</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary of attributes by which the input data should be filtered Example: <code>{'dsn': 'data11_hi*.express_express.*,data11_hi*physics_MinBiasOverlay*', 'account': 'tzero'}</code></p> <code>None</code> <code>replication_rules</code> <code>Optional[dict[str, Any]]</code> <p>Replication rules to be set : Dictionary with keys copies, rse_expression, weight, rse_expression</p> <code>None</code> <code>comments</code> <code>Optional[str]</code> <p>Comments for the subscription</p> <code>None</code> <code>lifetime</code> <code>Optional[Union[int, Literal[False]]]</code> <p>Subscription's lifetime (days); False if subscription has no lifetime</p> <code>None</code> <code>retroactive</code> <code>Optional[bool]</code> <p>Flag to know if the subscription should be applied on previous data</p> <code>None</code> <code>dry_run</code> <code>Optional[bool]</code> <p>Just print the subscriptions actions without actually executing them (Useful if retroactive flag is set)</p> <code>None</code> <code>priority</code> <code>Optional[int]</code> <p>The priority of the subscription</p> <code>None</code>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient.list_subscription_rules","title":"<code>list_subscription_rules(account, name)</code>","text":"<p>List the associated rules of a subscription.</p> <p>Parameters:</p> Name Type Description Default <code>account</code> <code>str</code> <p>Account of the subscription.</p> required <code>name</code> <code>str</code> <p>Name of the subscription.</p> required"},{"location":"touchclient.html","title":"Touchclient","text":""},{"location":"touchclient.html#rucio.client.touchclient.TouchClient","title":"<code>TouchClient(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None, logger=LOG)</code>","text":"<p>Touch client class to send a trace that can be used to update accessed_at for file or dataset DIDs</p> <p>Constructor of the BaseClient.</p> <p>Parameters:</p> Name Type Description Default <code>rucio_host</code> <code>Optional[str]</code> <p>The address of the rucio server, if None it is read from the config file.</p> <code>None</code> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> required <code>auth_host</code> <code>Optional[str]</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <code>None</code> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> required <code>account</code> <code>Optional[str]</code> <p>The account to authenticate to rucio.</p> <code>None</code> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> required <code>ca_cert</code> <code>Optional[str]</code> <p>The path to the rucio server certificate.</p> <code>None</code> <code>auth_type</code> <code>Optional[str]</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <code>None</code> <code>creds</code> <code>Optional[dict[str, Any]]</code> <p>Dictionary with credentials needed for authentication.</p> <code>None</code> <code>user_agent</code> <code>Optional[str]</code> <p>Indicates the client.</p> <code>'rucio-clients'</code> <code>vo</code> <code>Optional[str]</code> <p>The VO to authenticate into.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <code>LOG</code>"},{"location":"touchclient.html#rucio.client.touchclient.TouchClient.touch","title":"<code>touch(scope, name, rse=None)</code>","text":"<p>Sends a touch trace for a given file or dataset.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>str</code> <p>the scope of the file/dataset to update.</p> required <code>name</code> <code>str</code> <p>the name of file/dataset to update.</p> required <code>rse</code> <code>Optional[str]</code> <p>optional parameter if a specific replica should be touched.</p> <code>None</code> <p>Raises:</p> Type Description <code>DataIdentifierNotFound</code> <p>if given dids does not exist.</p> <code>RSENotFound</code> <p>if rse is not None and given rse does not exist.</p> <code>UnsupportedDIDType</code> <p>if type of the given DID is not FILE or DATASET.</p> <code>RucioException</code> <p>if trace could not be sent successfully.</p>"},{"location":"uploadclient.html","title":"Uploadclient","text":""},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient","title":"<code>UploadClient(_client=None, logger=None, tracing=True)</code>","text":"<p>Initialises the basic settings for an UploadClient object</p> <p>Parameters:</p> Name Type Description Default <code>_client</code> <code>Optional[Client]</code> <ul> <li>Optional: rucio.client.client.Client object. If None, a new object will be created.</li> </ul> <code>None</code> <code>logger</code> <code>Optional[LoggerFunction]</code> <ul> <li>Optional: logging.Logger object. If None, default logger will be used.</li> </ul> <code>None</code>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient.upload","title":"<code>upload(items, summary_file_path=None, traces_copy_out=None, ignore_availability=False, activity=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>items</code> <code>Iterable[FileToUploadDict]</code> <p>List of dictionaries. Each dictionary describing a file to upload. Keys: path                  - path of the file that will be uploaded rse                   - rse expression/name (e.g. 'CERN-PROD_DATADISK') where to upload the file did_scope             - Optional: custom did scope (Default: user.) did_name              - Optional: custom did name (Default: name of the file) dataset_scope         - Optional: custom dataset scope dataset_name          - Optional: custom dataset name dataset_meta          - Optional: custom metadata for dataset impl                  - Optional: name of the protocol implementation to be used to upload this item. force_scheme          - Optional: force a specific scheme (if PFN upload this will be overwritten) (Default: None) pfn                   - Optional: use a given PFN (this sets no_register to True, and no_register becomes mandatory) no_register           - Optional: if True, the file will not be registered in the rucio catalogue register_after_upload - Optional: if True, the file will be registered after successful upload lifetime              - Optional: the lifetime of the file after it was uploaded transfer_timeout      - Optional: time after the upload will be aborted guid                  - Optional: guid of the file recursive             - Optional: if set, parses the folder structure recursively into collections required <code>summary_file_path</code> <code>Optional[str]</code> <p>Optional: a path where a summary in form of a json file will be stored</p> <code>None</code> <code>traces_copy_out</code> <code>Optional[list[TraceBaseDict]]</code> <p>reference to an external list, where the traces should be uploaded</p> <code>None</code> <code>ignore_availability</code> <code>bool</code> <p>ignore the availability of a RSE</p> <code>False</code> <code>activity</code> <code>Optional[str]</code> <p>the activity set to the rule if no dataset is specified</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>0 on success</p> <p>Raises:</p> Type Description <code>InputValidationError</code> <p>if any input arguments are in a wrong format</p> <code>RSEWriteBlocked</code> <p>if a given RSE is not available for writing</p> <code>NoFilesUploaded</code> <p>if no files were successfully uploaded</p> <code>NotAllFilesUploaded</code> <p>if not all files were successfully uploaded</p>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient.preferred_impl","title":"<code>preferred_impl(rse_settings, domain)</code>","text":"<p>Finds the optimum protocol impl preferred by the client and supported by the remote RSE.</p> <p>Parameters:</p> Name Type Description Default <code>rse_settings</code> <code>RSESettingsDict</code> <p>dictionary containing the RSE settings</p> required <code>domain</code> <code>str</code> <p>The network domain, either 'wan' (default) or 'lan'</p> required <p>Raises:</p> Type Description <code>RucioException(msg)</code> <p>general exception with msg for more details.</p>"}]}