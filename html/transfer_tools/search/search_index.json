{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"fts3.html","title":"Fts3","text":""},{"location":"fts3.html#rucio.transfertool.fts3.Fts3TransferStatusReport","title":"<code>Fts3TransferStatusReport(external_host, request_id, request=None)</code>","text":""},{"location":"fts3.html#rucio.transfertool.fts3.Fts3TransferStatusReport._find_used_source_rse","title":"<code>_find_used_source_rse(session, logger)</code>","text":"<p>For multi-source transfers, FTS has a choice between multiple sources. Find which of the possible sources FTS actually used for the transfer.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.Fts3TransferStatusReport._dst_file_set_and_file_corrupted","title":"<code>_dst_file_set_and_file_corrupted(request, dst_file)</code>  <code>staticmethod</code>","text":"<p>Returns True if the <code>dst_file</code> dict returned by fts was filled and its content allows to affirm that the file is corrupted.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.Fts3TransferStatusReport._dst_file_set_and_file_correct","title":"<code>_dst_file_set_and_file_correct(request, dst_file)</code>  <code>staticmethod</code>","text":"<p>Returns True if the <code>dst_file</code> dict returned by fts was filled and its content allows to affirm that the file is correct.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.Fts3TransferStatusReport._is_recoverable_fts_overwrite_error","title":"<code>_is_recoverable_fts_overwrite_error(request, reason, file_metadata)</code>  <code>classmethod</code>","text":"<p>Verify the special case when FTS cannot copy a file because destination exists and overwrite is disabled, but the destination file is actually correct.</p> <p>This can happen when some transitory error happened during a previous submission attempt. Hence, the transfer is correctly executed by FTS, but rucio doesn't know about it.</p> <p>Returns true when the request must be marked as successful even if it was reported failed by FTS.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3CompletionMessageTransferStatusReport","title":"<code>FTS3CompletionMessageTransferStatusReport(external_host, request_id, fts_message)</code>","text":"<p>Parses FTS Completion messages received via the message queue</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3ApiTransferStatusReport","title":"<code>FTS3ApiTransferStatusReport(external_host, request_id, job_response, file_response, request=None)</code>","text":"<p>Parses FTS api response</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool","title":"<code>FTS3Transfertool(external_host, oidc_support=False, vo=None, group_bulk=1, group_policy='rule', source_strategy=None, max_time_in_queue=None, bring_online=43200, default_lifetime=172800, archive_timeout_override=None, logger=logging.log)</code>","text":"<p>FTS3 implementation of a Rucio transfertool</p> <p>Initializes the transfertool</p> <p>Parameters:</p> Name Type Description Default <code>external_host</code> <code>str</code> <p>The external host where the transfertool API is running</p> required"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool._pick_fts_servers","title":"<code>_pick_fts_servers(source_rse, dest_rse)</code>  <code>classmethod</code>","text":"<p>Pick fts servers to use for submission between the two given rse</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.submit","title":"<code>submit(transfers, job_params, timeout=None)</code>","text":"<p>Submit transfers to FTS3 via JSON.</p> <p>Parameters:</p> Name Type Description Default <code>files</code> <p>List of dictionaries describing the file transfers.</p> required <code>job_params</code> <code>dict[str, str]</code> <p>Dictionary containing key/value pairs, for all transfers.</p> required <code>timeout</code> <code>Optional[int]</code> <p>Timeout in seconds.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>FTS transfer identifier.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.cancel","title":"<code>cancel(transfer_ids, timeout=None)</code>","text":"<p>Cancel transfers that have been submitted to FTS3.</p> <p>Parameters:</p> Name Type Description Default <code>transfer_ids</code> <code>Sequence[str]</code> <p>FTS transfer identifiers as list of strings.</p> required <code>timeout</code> <code>Optional[int]</code> <p>Timeout in seconds.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>True if cancellation was successful.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.update_priority","title":"<code>update_priority(transfer_id, priority, timeout=None)</code>","text":"<p>Update the priority of a transfer that has been submitted to FTS via JSON.</p> <p>Parameters:</p> Name Type Description Default <code>transfer_id</code> <code>str</code> <p>FTS transfer identifier as a string.</p> required <code>priority</code> <code>int</code> <p>FTS job priority as an integer from 1 to 5.</p> required <code>timeout</code> <code>Optional[int]</code> <p>Timeout in seconds.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>True if update was successful.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.query","title":"<code>query(transfer_ids, details=False, timeout=None)</code>","text":"<p>Query the status of a transfer in FTS3 via JSON.</p> <p>Parameters:</p> Name Type Description Default <code>transfer_ids</code> <code>Sequence[str]</code> <p>FTS transfer identifiers as list of strings.</p> required <code>details</code> <code>bool</code> <p>Switch if detailed information should be listed.</p> <code>False</code> <code>timeout</code> <code>Optional[int]</code> <p>Timeout in seconds.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Optional[dict[str, Any]], list[dict[str, Any]]]</code> <p>Transfer status information as a list of dictionaries.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.whoami","title":"<code>whoami()</code>","text":"<p>Returns credential information from the FTS3 server.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Credentials as stored by the FTS3 server as a dictionary.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.version","title":"<code>version()</code>","text":"<p>Returns FTS3 server information.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>FTS3 server information as a dictionary.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.bulk_query","title":"<code>bulk_query(requests_by_eid, timeout=None)</code>","text":"<p>Query the status of a bulk of transfers in FTS3 via JSON.</p> <p>Parameters:</p> Name Type Description Default <code>requests_by_eid</code> <code>dict[str, dict[str, dict[str, Any]]]</code> <p>dictionary {external_id1: {request_id1: request1, ...}, ...} of request to be queried</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Transfer status information as a dictionary.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.list_se_status","title":"<code>list_se_status()</code>","text":"<p>Get the list of banned Storage Elements.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Detailed dictionary of banned Storage Elements.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.get_se_config","title":"<code>get_se_config(storage_element)</code>","text":"<p>Get the Json response for the configuration of a storage element.</p> <p>Parameters:</p> Name Type Description Default <code>storage_element</code> <code>str</code> <p>the storage element you want the configuration for.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>a Json result for the configuration of a storage element.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.set_se_config","title":"<code>set_se_config(storage_element, inbound_max_active=None, outbound_max_active=None, inbound_max_throughput=None, outbound_max_throughput=None, staging=None)</code>","text":"<p>Set the configuration for a storage element. Used for alleviating transfer failures due to timeout.</p> <p>Parameters:</p> Name Type Description Default <code>storage_element</code> <code>str</code> <p>The storage element to be configured</p> required <code>inbound_max_active</code> <code>Optional[int]</code> <p>the integer to set the inbound_max_active for the SE.</p> <code>None</code> <code>outbound_max_active</code> <code>Optional[int]</code> <p>the integer to set the outbound_max_active for the SE.</p> <code>None</code> <code>inbound_max_throughput</code> <code>Optional[float]</code> <p>the float to set the inbound_max_throughput for the SE.</p> <code>None</code> <code>outbound_max_throughput</code> <code>Optional[float]</code> <p>the float to set the outbound_max_throughput for the SE.</p> <code>None</code> <code>staging</code> <code>Optional[int]</code> <p>the integer to set the staging for the operation of a SE.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>JSON post response in case of success, otherwise raise Exception.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.set_se_status","title":"<code>set_se_status(storage_element, message, ban=True, timeout=None)</code>","text":"<p>Ban a Storage Element. Used when a site is in downtime. One can use a timeout in seconds. In that case the jobs will wait before being cancel. If no timeout is specified, the jobs are canceled immediately</p> <p>Parameters:</p> Name Type Description Default <code>storage_element</code> <code>str</code> <p>The Storage Element that will be banned.</p> required <code>message</code> <code>str</code> <p>The reason of the ban.</p> required <code>ban</code> <code>bool</code> <p>Boolean. If set to True, ban the SE, if set to False unban the SE.</p> <code>True</code> <code>timeout</code> <code>Optional[int]</code> <p>if None, send to FTS status 'cancel' else 'waiting' + the corresponding timeout.</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>0 in case of success, otherwise raise Exception</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.__get_transfer_baseid_voname","title":"<code>__get_transfer_baseid_voname()</code>","text":"<p>Get transfer VO name from the external host.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.__get_deterministic_id","title":"<code>__get_deterministic_id(sid)</code>","text":"<p>Get deterministic FTS job id.</p> <p>Parameters:</p> Name Type Description Default <code>sid</code> <code>str</code> <p>FTS seed id.</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>FTS transfer identifier.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.__query_details","title":"<code>__query_details(transfer_id)</code>","text":"<p>Query the detailed status of a transfer in FTS3 via JSON.</p> <p>Parameters:</p> Name Type Description Default <code>transfer_id</code> <code>str</code> <p>FTS transfer identifier as a string.</p> required <p>Returns:</p> Type Description <code>Optional[dict[str, Any]]</code> <p>Detailed transfer status information as a dictionary.</p>"},{"location":"fts3.html#rucio.transfertool.fts3._scitags_ids","title":"<code>_scitags_ids(logger=logging.log)</code>","text":"<p>Re-fetch if needed and return the scitags ids</p>"},{"location":"fts3.html#rucio.transfertool.fts3._configured_source_strategy","title":"<code>_configured_source_strategy(activity, logger)</code>","text":"<p>Retrieve from the configuration the source selection strategy for the given activity</p>"},{"location":"fts3.html#rucio.transfertool.fts3._available_checksums","title":"<code>_available_checksums(transfer)</code>","text":"<p>Get checksums which can be used for file validation on the source and the destination RSE</p>"},{"location":"fts3.html#rucio.transfertool.fts3._hop_checksum_validation_strategy","title":"<code>_hop_checksum_validation_strategy(transfer, logger)</code>","text":"<p>Compute the checksum validation strategy (none, source, destination or both) depending on available source and destination checksums for a single hop transfer</p>"},{"location":"fts3.html#rucio.transfertool.fts3._path_checksum_validation_strategy","title":"<code>_path_checksum_validation_strategy(transfer_path, logger)</code>","text":"<p>Compute the checksum validation strategy for the whole transfer path.</p>"},{"location":"fts3.html#rucio.transfertool.fts3._pick_fts_checksum","title":"<code>_pick_fts_checksum(transfer, path_strategy)</code>","text":"<p>Pick the checksum to use for validating file integrity on this particular transfer hop. This function will only work correctly for values of 'path_strategy' which are valid for the englobing multi-hop transfer path.</p> <p>Returns the checksum as a string in the format expected by the FTS bulks submission API.</p>"},{"location":"fts3.html#rucio.transfertool.fts3._use_tokens","title":"<code>_use_tokens(transfer_hop)</code>","text":"<p>Whether a transfer can be performed with tokens.</p> <p>In order to be so, all the involved RSEs must have it explicitly enabled and the protocol being used must be WebDAV.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.build_job_params","title":"<code>build_job_params(transfer_path, bring_online=None, default_lifetime=None, archive_timeout_override=None, max_time_in_queue=None, logger=logging.log)</code>","text":"<p>Prepare the job parameters which will be passed to FTS transfertool Please refer to https://fts3-docs.web.cern.ch/fts3-docs/fts-rest/docs/bulk.html#parameters for the list of parameters.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.bulk_group_transfers","title":"<code>bulk_group_transfers(transfer_paths, policy='rule', group_bulk=200, source_strategy=None, max_time_in_queue=None, logger=logging.log, archive_timeout_override=None, bring_online=None, default_lifetime=None)</code>","text":"<p>Group transfers in bulk based on certain criteria</p> <p>Parameters:</p> Name Type Description Default <code>transfer_paths</code> <code>Iterable[list[DirectTransfer]]</code> <p>List of transfer paths to group. Each path is a list of single-hop transfers.</p> required <code>policy</code> <code>str</code> <p>Policy to use to group.</p> <code>'rule'</code> <code>group_bulk</code> <code>int</code> <p>Bulk sizes.</p> <code>200</code> <code>source_strategy</code> <code>Optional[str]</code> <p>Strategy to group sources</p> <code>None</code> <code>max_time_in_queue</code> <code>Optional[dict]</code> <p>Maximum time in queue</p> <code>None</code> <code>archive_timeout_override</code> <code>Optional[int]</code> <p>Override the archive_timeout parameter for any transfers with it set (0 to unset)</p> <code>None</code> <code>logger</code> <code>LoggerFunction</code> <p>Optional decorated logger that can be passed from the calling daemons or servers.</p> <code>log</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>List of grouped transfers.</p>"},{"location":"globus.html","title":"Globus","text":""},{"location":"globus.html#rucio.transfertool.globus.GlobusTransferTool","title":"<code>GlobusTransferTool(external_host, logger=logging.log, group_bulk=200, group_policy='single')</code>","text":"<p>Globus implementation of Transfertool abstract base class</p> <p>Initializes the transfertool</p> <p>Parameters:</p> Name Type Description Default <code>external_host</code> <p>The external host where the transfertool API is running</p> required"},{"location":"globus.html#rucio.transfertool.globus.GlobusTransferTool.submit_one","title":"<code>submit_one(files, timeout=None)</code>","text":"<p>Submit transfers to globus API</p> <p>Parameters:</p> Name Type Description Default <code>files</code> <p>List of dictionaries describing the file transfers.</p> required <code>job_params</code> <p>Dictionary containing key/value pairs, for all transfers.</p> required <code>timeout</code> <p>Timeout in seconds.</p> <code>None</code> <p>Returns:</p> Type Description <p>Globus transfer identifier.</p>"},{"location":"globus.html#rucio.transfertool.globus.GlobusTransferTool.submit","title":"<code>submit(transfers, job_params, timeout=None)</code>","text":"<p>Submit a bulk transfer to globus API</p> <p>Parameters:</p> Name Type Description Default <code>transfers</code> <p>List of dictionaries describing the file transfers.</p> required <code>job_params</code> <p>Not used by Globus Transfsertool</p> required <code>timeout</code> <p>Timeout in seconds.</p> <code>None</code> <p>Returns:</p> Type Description <p>Globus transfer identifier.</p>"},{"location":"globus.html#rucio.transfertool.globus.GlobusTransferTool.bulk_query","title":"<code>bulk_query(requests_by_eid, timeout=None)</code>","text":"<p>Query the status of a bulk of transfers in globus API</p> <p>Parameters:</p> Name Type Description Default <code>requests_by_eid</code> <p>dictionary {external_id1: {request_id1: request1, ...}, ...}</p> required <p>Returns:</p> Type Description <p>Transfer status information as a dictionary.</p>"},{"location":"globus.html#rucio.transfertool.globus.bulk_group_transfers","title":"<code>bulk_group_transfers(transfer_paths, policy='single', group_bulk=200)</code>","text":"<p>Group transfers in bulk based on certain criteria</p> <p>Parameters:</p> Name Type Description Default <code>transfer_paths</code> <p>List of (potentially multihop) transfer paths to group. Each path is a list of single-hop transfers.</p> required <code>policy</code> <p>Policy to use to group.</p> <code>'single'</code> <code>group_bulk</code> <p>Bulk sizes.</p> <code>200</code> <p>Returns:</p> Type Description <p>List of transfer groups</p>"}]}