{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"fts3.html","title":"Fts3","text":""},{"location":"fts3.html#rucio.transfertool.fts3-classes","title":"Classes","text":""},{"location":"fts3.html#rucio.transfertool.fts3.Fts3TransferStatusReport","title":"Fts3TransferStatusReport","text":"<pre><code>Fts3TransferStatusReport(\n    external_host, request_id, request=None\n)\n</code></pre>"},{"location":"fts3.html#rucio.transfertool.fts3.Fts3TransferStatusReport-functions","title":"Functions","text":""},{"location":"fts3.html#rucio.transfertool.fts3.Fts3TransferStatusReport._find_used_source_rse","title":"_find_used_source_rse","text":"<pre><code>_find_used_source_rse(session, logger)\n</code></pre> <p>For multi-source transfers, FTS has a choice between multiple sources. Find which of the possible sources FTS actually used for the transfer.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.Fts3TransferStatusReport._dst_file_set_and_file_corrupted","title":"_dst_file_set_and_file_corrupted  <code>staticmethod</code>","text":"<pre><code>_dst_file_set_and_file_corrupted(request, dst_file)\n</code></pre> <p>Returns True if the <code>dst_file</code> dict returned by fts was filled and its content allows to affirm that the file is corrupted.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.Fts3TransferStatusReport._dst_file_set_and_file_correct","title":"_dst_file_set_and_file_correct  <code>staticmethod</code>","text":"<pre><code>_dst_file_set_and_file_correct(request, dst_file)\n</code></pre> <p>Returns True if the <code>dst_file</code> dict returned by fts was filled and its content allows to affirm that the file is correct.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.Fts3TransferStatusReport._is_recoverable_fts_overwrite_error","title":"_is_recoverable_fts_overwrite_error  <code>classmethod</code>","text":"<pre><code>_is_recoverable_fts_overwrite_error(\n    request, reason, file_metadata\n)\n</code></pre> <p>Verify the special case when FTS cannot copy a file because destination exists and overwrite is disabled, but the destination file is actually correct.</p> <p>This can happen when some transitory error happened during a previous submission attempt. Hence, the transfer is correctly executed by FTS, but rucio doesn't know about it.</p> <p>Returns true when the request must be marked as successful even if it was reported failed by FTS.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3CompletionMessageTransferStatusReport","title":"FTS3CompletionMessageTransferStatusReport","text":"<pre><code>FTS3CompletionMessageTransferStatusReport(\n    external_host, request_id, fts_message\n)\n</code></pre> <p>Parses FTS Completion messages received via the message queue</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3ApiTransferStatusReport","title":"FTS3ApiTransferStatusReport","text":"<pre><code>FTS3ApiTransferStatusReport(\n    external_host,\n    request_id,\n    job_response,\n    file_response,\n    request=None,\n)\n</code></pre> <p>Parses FTS api response</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool","title":"FTS3Transfertool","text":"<pre><code>FTS3Transfertool(\n    external_host,\n    oidc_support=False,\n    vo=None,\n    group_bulk=1,\n    group_policy=\"rule\",\n    source_strategy=None,\n    max_time_in_queue=None,\n    bring_online=43200,\n    default_lifetime=172800,\n    archive_timeout_override=None,\n    logger=logging.log,\n)\n</code></pre> <p>FTS3 implementation of a Rucio transfertool</p> <p>Initializes the transfertool</p> PARAMETER DESCRIPTION <code>external_host</code> <p>The external host where the transfertool API is running</p> <p> TYPE: <code>str</code> </p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool-functions","title":"Functions","text":""},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool._pick_fts_servers","title":"_pick_fts_servers  <code>classmethod</code>","text":"<pre><code>_pick_fts_servers(source_rse, dest_rse)\n</code></pre> <p>Pick fts servers to use for submission between the two given rse</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.submit","title":"submit","text":"<pre><code>submit(transfers, job_params, timeout=None)\n</code></pre> <p>Submit transfers to FTS3 via JSON.</p> PARAMETER DESCRIPTION <code>files</code> <p>List of dictionaries describing the file transfers.</p> <p> </p> <code>job_params</code> <p>Dictionary containing key/value pairs, for all transfers.</p> <p> TYPE: <code>dict[str, str]</code> </p> <code>timeout</code> <p>Timeout in seconds.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>str</code> <p>FTS transfer identifier.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.cancel","title":"cancel","text":"<pre><code>cancel(transfer_ids, timeout=None)\n</code></pre> <p>Cancel transfers that have been submitted to FTS3.</p> PARAMETER DESCRIPTION <code>transfer_ids</code> <p>FTS transfer identifiers as list of strings.</p> <p> TYPE: <code>Sequence[str]</code> </p> <code>timeout</code> <p>Timeout in seconds.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>True if cancellation was successful.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.update_priority","title":"update_priority","text":"<pre><code>update_priority(transfer_id, priority, timeout=None)\n</code></pre> <p>Update the priority of a transfer that has been submitted to FTS via JSON.</p> PARAMETER DESCRIPTION <code>transfer_id</code> <p>FTS transfer identifier as a string.</p> <p> TYPE: <code>str</code> </p> <code>priority</code> <p>FTS job priority as an integer from 1 to 5.</p> <p> TYPE: <code>int</code> </p> <code>timeout</code> <p>Timeout in seconds.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>True if update was successful.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.query","title":"query","text":"<pre><code>query(transfer_ids, details=False, timeout=None)\n</code></pre> <p>Query the status of a transfer in FTS3 via JSON.</p> PARAMETER DESCRIPTION <code>transfer_ids</code> <p>FTS transfer identifiers as list of strings.</p> <p> TYPE: <code>Sequence[str]</code> </p> <code>details</code> <p>Switch if detailed information should be listed.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>timeout</code> <p>Timeout in seconds.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Union[Optional[dict[str, Any]], list[dict[str, Any]]]</code> <p>Transfer status information as a list of dictionaries.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.whoami","title":"whoami","text":"<pre><code>whoami()\n</code></pre> <p>Returns credential information from the FTS3 server.</p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>Credentials as stored by the FTS3 server as a dictionary.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.version","title":"version","text":"<pre><code>version()\n</code></pre> <p>Returns FTS3 server information.</p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>FTS3 server information as a dictionary.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.bulk_query","title":"bulk_query","text":"<pre><code>bulk_query(requests_by_eid, timeout=None)\n</code></pre> <p>Query the status of a bulk of transfers in FTS3 via JSON.</p> PARAMETER DESCRIPTION <code>requests_by_eid</code> <p>dictionary {external_id1: {request_id1: request1, ...}, ...} of request to be queried</p> <p> TYPE: <code>dict[str, dict[str, dict[str, Any]]]</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>Transfer status information as a dictionary.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.list_se_status","title":"list_se_status","text":"<pre><code>list_se_status()\n</code></pre> <p>Get the list of banned Storage Elements.</p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>Detailed dictionary of banned Storage Elements.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.get_se_config","title":"get_se_config","text":"<pre><code>get_se_config(storage_element)\n</code></pre> <p>Get the Json response for the configuration of a storage element.</p> PARAMETER DESCRIPTION <code>storage_element</code> <p>the storage element you want the configuration for.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>a Json result for the configuration of a storage element.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.set_se_config","title":"set_se_config","text":"<pre><code>set_se_config(\n    storage_element,\n    inbound_max_active=None,\n    outbound_max_active=None,\n    inbound_max_throughput=None,\n    outbound_max_throughput=None,\n    staging=None,\n)\n</code></pre> <p>Set the configuration for a storage element. Used for alleviating transfer failures due to timeout.</p> PARAMETER DESCRIPTION <code>storage_element</code> <p>The storage element to be configured</p> <p> TYPE: <code>str</code> </p> <code>inbound_max_active</code> <p>the integer to set the inbound_max_active for the SE.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>outbound_max_active</code> <p>the integer to set the outbound_max_active for the SE.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>inbound_max_throughput</code> <p>the float to set the inbound_max_throughput for the SE.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>outbound_max_throughput</code> <p>the float to set the outbound_max_throughput for the SE.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>staging</code> <p>the integer to set the staging for the operation of a SE.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>JSON post response in case of success, otherwise raise Exception.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.set_se_status","title":"set_se_status","text":"<pre><code>set_se_status(\n    storage_element, message, ban=True, timeout=None\n)\n</code></pre> <p>Ban a Storage Element. Used when a site is in downtime. One can use a timeout in seconds. In that case the jobs will wait before being cancel. If no timeout is specified, the jobs are canceled immediately</p> PARAMETER DESCRIPTION <code>storage_element</code> <p>The Storage Element that will be banned.</p> <p> TYPE: <code>str</code> </p> <code>message</code> <p>The reason of the ban.</p> <p> TYPE: <code>str</code> </p> <code>ban</code> <p>Boolean. If set to True, ban the SE, if set to False unban the SE.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>timeout</code> <p>if None, send to FTS status 'cancel' else 'waiting' + the corresponding timeout.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>int</code> <p>0 in case of success, otherwise raise Exception</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.__get_transfer_baseid_voname","title":"__get_transfer_baseid_voname","text":"<pre><code>__get_transfer_baseid_voname()\n</code></pre> <p>Get transfer VO name from the external host.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.__get_deterministic_id","title":"__get_deterministic_id","text":"<pre><code>__get_deterministic_id(sid)\n</code></pre> <p>Get deterministic FTS job id.</p> PARAMETER DESCRIPTION <code>sid</code> <p>FTS seed id.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Optional[str]</code> <p>FTS transfer identifier.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.FTS3Transfertool.__query_details","title":"__query_details","text":"<pre><code>__query_details(transfer_id)\n</code></pre> <p>Query the detailed status of a transfer in FTS3 via JSON.</p> PARAMETER DESCRIPTION <code>transfer_id</code> <p>FTS transfer identifier as a string.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Optional[dict[str, Any]]</code> <p>Detailed transfer status information as a dictionary.</p>"},{"location":"fts3.html#rucio.transfertool.fts3-functions","title":"Functions","text":""},{"location":"fts3.html#rucio.transfertool.fts3._scitags_ids","title":"_scitags_ids","text":"<pre><code>_scitags_ids(logger=logging.log)\n</code></pre> <p>Re-fetch if needed and return the scitags ids</p>"},{"location":"fts3.html#rucio.transfertool.fts3._configured_source_strategy","title":"_configured_source_strategy","text":"<pre><code>_configured_source_strategy(activity, logger)\n</code></pre> <p>Retrieve from the configuration the source selection strategy for the given activity</p>"},{"location":"fts3.html#rucio.transfertool.fts3._available_checksums","title":"_available_checksums","text":"<pre><code>_available_checksums(transfer)\n</code></pre> <p>Get checksums which can be used for file validation on the source and the destination RSE</p>"},{"location":"fts3.html#rucio.transfertool.fts3._hop_checksum_validation_strategy","title":"_hop_checksum_validation_strategy","text":"<pre><code>_hop_checksum_validation_strategy(transfer, logger)\n</code></pre> <p>Compute the checksum validation strategy (none, source, destination or both) depending on available source and destination checksums for a single hop transfer</p>"},{"location":"fts3.html#rucio.transfertool.fts3._path_checksum_validation_strategy","title":"_path_checksum_validation_strategy","text":"<pre><code>_path_checksum_validation_strategy(transfer_path, logger)\n</code></pre> <p>Compute the checksum validation strategy for the whole transfer path.</p>"},{"location":"fts3.html#rucio.transfertool.fts3._pick_fts_checksum","title":"_pick_fts_checksum","text":"<pre><code>_pick_fts_checksum(transfer, path_strategy)\n</code></pre> <p>Pick the checksum to use for validating file integrity on this particular transfer hop. This function will only work correctly for values of 'path_strategy' which are valid for the englobing multi-hop transfer path.</p> <p>Returns the checksum as a string in the format expected by the FTS bulks submission API.</p>"},{"location":"fts3.html#rucio.transfertool.fts3._use_tokens","title":"_use_tokens","text":"<pre><code>_use_tokens(transfer_hop)\n</code></pre> <p>Whether a transfer can be performed with tokens.</p> <p>In order to be so, all the involved RSEs must have it explicitly enabled and the protocol being used must be WebDAV.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.build_job_params","title":"build_job_params","text":"<pre><code>build_job_params(\n    transfer_path,\n    bring_online=None,\n    default_lifetime=None,\n    archive_timeout_override=None,\n    max_time_in_queue=None,\n    logger=logging.log,\n)\n</code></pre> <p>Prepare the job parameters which will be passed to FTS transfertool Please refer to https://fts3-docs.web.cern.ch/fts3-docs/fts-rest/docs/bulk.html#parameters for the list of parameters.</p>"},{"location":"fts3.html#rucio.transfertool.fts3.bulk_group_transfers","title":"bulk_group_transfers","text":"<pre><code>bulk_group_transfers(\n    transfer_paths,\n    policy=\"rule\",\n    group_bulk=200,\n    source_strategy=None,\n    max_time_in_queue=None,\n    logger=logging.log,\n    archive_timeout_override=None,\n    bring_online=None,\n    default_lifetime=None,\n)\n</code></pre> <p>Group transfers in bulk based on certain criteria</p> PARAMETER DESCRIPTION <code>transfer_paths</code> <p>List of transfer paths to group. Each path is a list of single-hop transfers.</p> <p> TYPE: <code>Iterable[list[DirectTransfer]]</code> </p> <code>policy</code> <p>Policy to use to group.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'rule'</code> </p> <code>group_bulk</code> <p>Bulk sizes.</p> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>source_strategy</code> <p>Strategy to group sources</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>max_time_in_queue</code> <p>Maximum time in queue</p> <p> TYPE: <code>Optional[dict]</code> DEFAULT: <code>None</code> </p> <code>archive_timeout_override</code> <p>Override the archive_timeout parameter for any transfers with it set (0 to unset)</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>logger</code> <p>Optional decorated logger that can be passed from the calling daemons or servers.</p> <p> TYPE: <code>LoggerFunction</code> DEFAULT: <code>log</code> </p> RETURNS DESCRIPTION <code>list[dict[str, Any]]</code> <p>List of grouped transfers.</p>"},{"location":"globus.html","title":"Globus","text":""},{"location":"globus.html#rucio.transfertool.globus-classes","title":"Classes","text":""},{"location":"globus.html#rucio.transfertool.globus.GlobusTransferTool","title":"GlobusTransferTool","text":"<pre><code>GlobusTransferTool(\n    external_host,\n    logger=logging.log,\n    group_bulk=200,\n    group_policy=\"single\",\n)\n</code></pre> <p>Globus implementation of Transfertool abstract base class</p> <p>Initializes the transfertool</p> PARAMETER DESCRIPTION <code>external_host</code> <p>The external host where the transfertool API is running</p> <p> </p>"},{"location":"globus.html#rucio.transfertool.globus.GlobusTransferTool-functions","title":"Functions","text":""},{"location":"globus.html#rucio.transfertool.globus.GlobusTransferTool.submit_one","title":"submit_one","text":"<pre><code>submit_one(files, timeout=None)\n</code></pre> <p>Submit transfers to globus API</p> PARAMETER DESCRIPTION <code>files</code> <p>List of dictionaries describing the file transfers.</p> <p> </p> <code>job_params</code> <p>Dictionary containing key/value pairs, for all transfers.</p> <p> </p> <code>timeout</code> <p>Timeout in seconds.</p> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <p>Globus transfer identifier.</p>"},{"location":"globus.html#rucio.transfertool.globus.GlobusTransferTool.submit","title":"submit","text":"<pre><code>submit(transfers, job_params, timeout=None)\n</code></pre> <p>Submit a bulk transfer to globus API</p> PARAMETER DESCRIPTION <code>transfers</code> <p>List of dictionaries describing the file transfers.</p> <p> </p> <code>job_params</code> <p>Not used by Globus Transfsertool</p> <p> </p> <code>timeout</code> <p>Timeout in seconds.</p> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <p>Globus transfer identifier.</p>"},{"location":"globus.html#rucio.transfertool.globus.GlobusTransferTool.bulk_query","title":"bulk_query","text":"<pre><code>bulk_query(requests_by_eid, timeout=None)\n</code></pre> <p>Query the status of a bulk of transfers in globus API</p> PARAMETER DESCRIPTION <code>requests_by_eid</code> <p>dictionary {external_id1: {request_id1: request1, ...}, ...}</p> <p> </p> RETURNS DESCRIPTION <p>Transfer status information as a dictionary.</p>"},{"location":"globus.html#rucio.transfertool.globus-functions","title":"Functions","text":""},{"location":"globus.html#rucio.transfertool.globus.bulk_group_transfers","title":"bulk_group_transfers","text":"<pre><code>bulk_group_transfers(\n    transfer_paths, policy=\"single\", group_bulk=200\n)\n</code></pre> <p>Group transfers in bulk based on certain criteria</p> PARAMETER DESCRIPTION <code>transfer_paths</code> <p>List of (potentially multihop) transfer paths to group. Each path is a list of single-hop transfers.</p> <p> </p> <code>policy</code> <p>Policy to use to group.</p> <p> DEFAULT: <code>'single'</code> </p> <code>group_bulk</code> <p>Bulk sizes.</p> <p> DEFAULT: <code>200</code> </p> RETURNS DESCRIPTION <p>List of transfer groups</p>"}]}