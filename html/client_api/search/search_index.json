{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"accountclient.html","title":"Accountclient","text":""},{"location":"accountclient.html#rucio.client.accountclient-classes","title":"Classes","text":""},{"location":"accountclient.html#rucio.client.accountclient.AccountClient","title":"AccountClient","text":"<pre><code>AccountClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Account client class for working with rucio accounts</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient-functions","title":"Functions","text":""},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.add_account","title":"add_account","text":"<pre><code>add_account(account, type_, email)\n</code></pre> <p>Sends the request to create a new account.</p> PARAMETER DESCRIPTION <code>account</code> <p>the name of the account.</p> <p> TYPE: <code>str</code> </p> <code>type_</code> <p>The account type</p> <p> TYPE: <code>str</code> </p> <code>email</code> <p>The Email address associated with the account.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if account was created successfully else False.</p> RAISES DESCRIPTION <code>Duplicate</code> <p>if account already exists.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.delete_account","title":"delete_account","text":"<pre><code>delete_account(account)\n</code></pre> <p>Sends the request to disable an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>the name of the account.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True is account was disabled successfully. False otherwise.</p> RAISES DESCRIPTION <code>AccountNotFound</code> <p>if account doesn't exist.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_account","title":"get_account","text":"<pre><code>get_account(account)\n</code></pre> <p>Sends the request to get information about a given account.</p> PARAMETER DESCRIPTION <code>account</code> <p>the name of the account.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Optional[dict[str, Any]]</code> <p>a list of attributes for the account. None if failure.</p> RAISES DESCRIPTION <code>AccountNotFound</code> <p>if account doesn't exist.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.update_account","title":"update_account","text":"<pre><code>update_account(account, key, value)\n</code></pre> <p>Update a property of an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>Name of the account.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>Account property like status.</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>Property value.</p> <p> TYPE: <code>Any</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.list_accounts","title":"list_accounts","text":"<pre><code>list_accounts(\n    account_type=None, identity=None, filters=None\n)\n</code></pre> <p>Sends the request to list all rucio accounts.</p> PARAMETER DESCRIPTION <code>type</code> <p>The account type</p> <p> </p> <code>identity</code> <p>The identity key name. For example x509 DN, or a username.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>filters</code> <p>A dictionary key:account attribute to use for the filtering</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Iterator[dict[str, Any]]</code> <p>a list containing account info dictionary for all rucio accounts.</p> RAISES DESCRIPTION <code>AccountNotFound</code> <p>if account doesn't exist.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.whoami","title":"whoami","text":"<pre><code>whoami()\n</code></pre> <p>Get information about account whose token is used</p> RETURNS DESCRIPTION <code>Optional[dict[str, Any]]</code> <p>a list of attributes for the account. None if failure.</p> RAISES DESCRIPTION <code>AccountNotFound</code> <p>if account doesn't exist.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.add_identity","title":"add_identity","text":"<pre><code>add_identity(\n    account,\n    identity,\n    authtype,\n    email,\n    default=False,\n    password=None,\n)\n</code></pre> <p>Adds a membership association between identity and account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>identity</code> <p>The identity key name. For example x509 DN, or a username.</p> <p> TYPE: <code>str</code> </p> <code>authtype</code> <p>The type of the authentication (x509, gss, userpass).</p> <p> TYPE: <code>str</code> </p> <code>default</code> <p>If True, the account should be used by default with the provided identity.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>email</code> <p>The Email address associated with the identity.</p> <p> TYPE: <code>str</code> </p> <code>password</code> <p>Password if authtype is userpass.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.del_identity","title":"del_identity","text":"<pre><code>del_identity(account, identity, authtype)\n</code></pre> <p>Delete an identity's membership association with an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>identity</code> <p>The identity key name. For example x509 DN, or a username.</p> <p> TYPE: <code>str</code> </p> <code>authtype</code> <p>The type of the authentication (x509, gss, userpass).</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.list_identities","title":"list_identities","text":"<pre><code>list_identities(account)\n</code></pre> <p>List all identities on an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.list_account_rules","title":"list_account_rules","text":"<pre><code>list_account_rules(account)\n</code></pre> <p>List the associated rules of an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_account_limits","title":"get_account_limits","text":"<pre><code>get_account_limits(account, rse_expression, locality)\n</code></pre> <p>Return the correct account limits for the given locality.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>rse_expression</code> <p>Valid RSE expression</p> <p> TYPE: <code>str</code> </p> <code>locality</code> <p>The scope of the account limit. 'local' or 'global'.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_global_account_limit","title":"get_global_account_limit","text":"<pre><code>get_global_account_limit(account, rse_expression)\n</code></pre> <p>List the account limit for the specific RSE expression.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>rse_expression</code> <p>The rse expression.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_global_account_limits","title":"get_global_account_limits","text":"<pre><code>get_global_account_limits(account)\n</code></pre> <p>List all RSE expression limits of this account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_local_account_limits","title":"get_local_account_limits","text":"<pre><code>get_local_account_limits(account)\n</code></pre> <p>List the account rse limits of this account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_local_account_limit","title":"get_local_account_limit","text":"<pre><code>get_local_account_limit(account, rse)\n</code></pre> <p>List the account rse limits of this account for the specific rse.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>The rse name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_local_account_usage","title":"get_local_account_usage","text":"<pre><code>get_local_account_usage(account, rse=None)\n</code></pre> <p>List the account usage for one or all rses of this account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>The rse name.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_global_account_usage","title":"get_global_account_usage","text":"<pre><code>get_global_account_usage(account, rse_expression=None)\n</code></pre> <p>List the account usage for one or all RSE expressions of this account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>rse_expression</code> <p>The rse expression.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_account_usage_history","title":"get_account_usage_history","text":"<pre><code>get_account_usage_history(account, rse)\n</code></pre> <p>List the account usage history of this account on rse.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>The rse name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.list_account_attributes","title":"list_account_attributes","text":"<pre><code>list_account_attributes(account)\n</code></pre> <p>List the attributes for an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.add_account_attribute","title":"add_account_attribute","text":"<pre><code>add_account_attribute(account, key, value)\n</code></pre> <p>Adds an attribute to an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>The attribute key.</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The attribute value.</p> <p> TYPE: <code>Any</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.delete_account_attribute","title":"delete_account_attribute","text":"<pre><code>delete_account_attribute(account, key)\n</code></pre> <p>Delete an attribute for an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>The attribute key.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient-functions","title":"Functions","text":""},{"location":"accountlimitclient.html","title":"Accountlimitclient","text":""},{"location":"accountlimitclient.html#rucio.client.accountlimitclient-classes","title":"Classes","text":""},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient","title":"AccountLimitClient","text":"<pre><code>AccountLimitClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Account limit client class for working with account limits</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient-functions","title":"Functions","text":""},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.set_account_limit","title":"set_account_limit","text":"<pre><code>set_account_limit(account, rse, bytes_, locality)\n</code></pre> <p>Sets an account limit for a given limit scope.</p> PARAMETER DESCRIPTION <code>account</code> <p>The name of the account.</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>The rse name.</p> <p> TYPE: <code>str</code> </p> <code>bytes_</code> <p>An integer with the limit in bytes.</p> <p> TYPE: <code>int</code> </p> <code>locality</code> <p>The scope of the account limit. 'local' or 'global'.</p> <p> TYPE: <code>Literal['local', 'global']</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if quota was created successfully else False.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.delete_account_limit","title":"delete_account_limit","text":"<pre><code>delete_account_limit(account, rse, locality)\n</code></pre> <p>Deletes an account limit for a given limit scope.</p> PARAMETER DESCRIPTION <code>account</code> <p>The name of the account.</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>The rse name.</p> <p> TYPE: <code>str</code> </p> <code>locality</code> <p>The scope of the account limit. 'local' or 'global'.</p> <p> TYPE: <code>Literal['local', 'global']</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if quota was created successfully else False.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.set_local_account_limit","title":"set_local_account_limit","text":"<pre><code>set_local_account_limit(account, rse, bytes_)\n</code></pre> <p>Sends the request to set an account limit for an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The name of the account.</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>The rse name.</p> <p> TYPE: <code>str</code> </p> <code>bytes_</code> <p>An integer with the limit in bytes.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if quota was created successfully else False.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.delete_local_account_limit","title":"delete_local_account_limit","text":"<pre><code>delete_local_account_limit(account, rse)\n</code></pre> <p>Sends the request to remove an account limit.</p> PARAMETER DESCRIPTION <code>account</code> <p>The name of the account.</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>The rse name.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if quota was removed successfully. False otherwise.</p> RAISES DESCRIPTION <code>AccountNotFound</code> <p>if account doesn't exist.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.set_global_account_limit","title":"set_global_account_limit","text":"<pre><code>set_global_account_limit(account, rse_expression, bytes_)\n</code></pre> <p>Sends the request to set a global account limit for an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The name of the account.</p> <p> TYPE: <code>str</code> </p> <code>rse_expression</code> <p>The rse expression.</p> <p> TYPE: <code>str</code> </p> <code>bytes_</code> <p>An integer with the limit in bytes.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if quota was created successfully else False.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.delete_global_account_limit","title":"delete_global_account_limit","text":"<pre><code>delete_global_account_limit(account, rse_expression)\n</code></pre> <p>Sends the request to remove a global account limit.</p> PARAMETER DESCRIPTION <code>account</code> <p>The name of the account.</p> <p> TYPE: <code>str</code> </p> <code>rse_expression</code> <p>The rse expression.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if quota was removed successfully. False otherwise.</p> RAISES DESCRIPTION <code>AccountNotFound</code> <p>if account doesn't exist.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient-functions","title":"Functions","text":""},{"location":"baseclient.html","title":"Baseclient","text":"<p>Client class for callers of the Rucio system</p>"},{"location":"baseclient.html#rucio.client.baseclient-classes","title":"Classes","text":""},{"location":"baseclient.html#rucio.client.baseclient.BaseClient","title":"BaseClient","text":"<pre><code>BaseClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Main client class for accessing Rucio resources. Handles the authentication.</p> <p>Constructor of the BaseClient.</p> PARAMETER DESCRIPTION <code>rucio_host</code> <p>The address of the rucio server, if None it is read from the config file.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>rucio_port</code> <p>The port of the rucio server, if None it is read from the config file.</p> <p> </p> <code>auth_host</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auth_port</code> <p>The port of the rucio authentication server, if None it is read from the config file.</p> <p> </p> <code>account</code> <p>The account to authenticate to rucio.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>use_ssl</code> <p>Enable or disable ssl for commucation. Default is enabled.</p> <p> </p> <code>ca_cert</code> <p>The path to the rucio server certificate.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auth_type</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>creds</code> <p>Dictionary with credentials needed for authentication.</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>user_agent</code> <p>Indicates the client.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'rucio-clients'</code> </p> <code>vo</code> <p>The VO to authenticate into.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>logger</code> <p>Logger object to use. If None, use the default LOG created by the module</p> <p> TYPE: <code>Logger</code> DEFAULT: <code>LOG</code> </p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient-functions","title":"Functions","text":""},{"location":"baseclient.html#rucio.client.baseclient.BaseClient._get_exception","title":"_get_exception","text":"<pre><code>_get_exception(headers, status_code=None, data=None)\n</code></pre> <p>Helper method to parse an error string send by the server and transform it into the corresponding rucio exception.</p> PARAMETER DESCRIPTION <code>headers</code> <p>The http response header containing the Rucio exception details.</p> <p> TYPE: <code>dict[str, str]</code> </p> <code>status_code</code> <p>The http status code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>data</code> <p>The data with the ExceptionMessage.</p> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>tuple[type[RucioException], str]</code> <p>A rucio exception class and an error string.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient._load_json_data","title":"_load_json_data","text":"<pre><code>_load_json_data(response)\n</code></pre> <p>Helper method to correctly load json data based on the content type of the http response.</p> PARAMETER DESCRIPTION <code>response</code> <p>the response received from the server.</p> <p> TYPE: <code>Response</code> </p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient._back_off","title":"_back_off","text":"<pre><code>_back_off(retry_number, reason)\n</code></pre> <p>Sleep a certain amount of time which increases with the retry count</p> PARAMETER DESCRIPTION <code>retry_number</code> <p>the retry iteration</p> <p> TYPE: <code>int</code> </p> <code>reason</code> <p>the reason to backoff which will be shown to the user</p> <p> TYPE: <code>str</code> </p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient._send_request","title":"_send_request","text":"<pre><code>_send_request(\n    url,\n    headers=None,\n    type_=\"GET\",\n    data=None,\n    params=None,\n    stream=False,\n    get_token=False,\n    cert=None,\n    auth=None,\n    verify=None,\n)\n</code></pre> <p>Helper method to send requests to the rucio server. Gets a new token and retries if an unauthorized error is returned.</p> PARAMETER DESCRIPTION <code>url</code> <p>the http url to use.</p> <p> </p> <code>headers</code> <p>additional http headers to send.</p> <p> DEFAULT: <code>None</code> </p> <code>type_</code> <p>the http request type to use.</p> <p> DEFAULT: <code>'GET'</code> </p> <code>data</code> <p>post data.</p> <p> DEFAULT: <code>None</code> </p> <code>params</code> <p>(optional) Dictionary or bytes to be sent in the url query string.</p> <p> DEFAULT: <code>None</code> </p> <code>get_token</code> <p>(optional) if it is called from a _get_token function.</p> <p> DEFAULT: <code>False</code> </p> <code>cert</code> <p>(optional) if String, path to the SSL client cert file (.pem). If Tuple, (cert, key) pair.</p> <p> DEFAULT: <code>None</code> </p> <code>auth</code> <p>(optional) auth tuple to enable Basic/Digest/Custom HTTP Auth.</p> <p> DEFAULT: <code>None</code> </p> <code>verify</code> <p>(optional) either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use.</p> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <p>the HTTP return body.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_userpass","title":"__get_token_userpass","text":"<pre><code>__get_token_userpass()\n</code></pre> <p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses username/password.</p> RETURNS DESCRIPTION <code>bool</code> <p>True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__refresh_token_oidc","title":"__refresh_token_oidc","text":"<pre><code>__refresh_token_oidc()\n</code></pre> <p>Checks if there is active refresh token and if so returns either active token with expiration timestamp or requests a new refresh and returns new access token with new expiration timestamp and saves these in the token directory.</p> RETURNS DESCRIPTION <code>bool</code> <p>True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_oidc","title":"__get_token_oidc","text":"<pre><code>__get_token_oidc()\n</code></pre> <p>First authenticates the user via a Identity Provider server (with user's username &amp; password), by specifying oidc_scope, user agrees to share the relevant information with Rucio. If all proceeds well, an access token is requested from the Identity Provider. Access Tokens are not stored in Rucio DB. Refresh Tokens are granted only in case no valid access token exists in user's local storage, oidc_scope includes 'offline_access'. In such case, refresh token is stored in Rucio DB.</p> RETURNS DESCRIPTION <code>bool</code> <p>True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_x509","title":"__get_token_x509","text":"<pre><code>__get_token_x509()\n</code></pre> <p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses x509 authentication.</p> RETURNS DESCRIPTION <code>bool</code> <p>True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_ssh","title":"__get_token_ssh","text":"<pre><code>__get_token_ssh()\n</code></pre> <p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses SSH key exchange authentication.</p> RETURNS DESCRIPTION <code>bool</code> <p>True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_gss","title":"__get_token_gss","text":"<pre><code>__get_token_gss()\n</code></pre> <p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses Kerberos authentication.</p> RETURNS DESCRIPTION <code>bool</code> <p>True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_saml","title":"__get_token_saml","text":"<pre><code>__get_token_saml()\n</code></pre> <p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses saml authentication.</p> RETURNS DESCRIPTION <code>bool</code> <p>True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token","title":"__get_token","text":"<pre><code>__get_token()\n</code></pre> <p>Calls the corresponding method to receive an auth token depending on the auth type. To be used if a 401 - Unauthorized error is received.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__read_token","title":"__read_token","text":"<pre><code>__read_token()\n</code></pre> <p>Checks if a local token file exists and reads the token from it.</p> RETURNS DESCRIPTION <code>bool</code> <p>True if a token could be read. False if no file exists.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__write_token","title":"__write_token","text":"<pre><code>__write_token()\n</code></pre> <p>Write the current auth_token to the local token file.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__authenticate","title":"__authenticate","text":"<pre><code>__authenticate()\n</code></pre> <p>Main method for authentication. It first tries to read a locally saved token. If not available it requests a new one.</p>"},{"location":"baseclient.html#rucio.client.baseclient-functions","title":"Functions","text":""},{"location":"baseclient.html#rucio.client.baseclient.choice","title":"choice","text":"<pre><code>choice(hosts)\n</code></pre> <p>Select randomly a host</p> PARAMETER DESCRIPTION <code>hosts</code> <p>Lost of hosts</p> <p> </p> RETURNS DESCRIPTION <p>A randomly selected host.</p>"},{"location":"client.html","title":"Client","text":"<p>Client class for callers of the Rucio system</p>"},{"location":"client.html#rucio.client.client-classes","title":"Classes","text":""},{"location":"client.html#rucio.client.client.Client","title":"Client","text":"<pre><code>Client(**args)\n</code></pre> <pre><code>Main client class for accessing Rucio resources. Handles the authentication.\n\nNote:\n    Used to access all client methods. Each entity client *can* be used to access methods, but using the main client class is recommended for ease of use.\n</code></pre> <p>For using general methods -</p> <pre><code>from rucio.client import Client\n\nclient = Client()  # authenticate with config or environ settings\nclient.add_replication_rule(...)\n\nclient = Client(\n    rucio_host = \"my_host\",\n    auth_host = \"my_auth_host\",\n    account = \"jdoe12345\",\n    auth_type = \"userpass\",\n    creds = {\n        \"username\": \"jdoe12345\",\n        \"password\": \"******\",\n    }\n) # authenticate with kwargs\nclient.list_replicas(...)\n</code></pre> <p>For using the upload and download clients -</p> <pre><code>from rucio.client import Client\nfrom rucio.client.uploadclient import UploadClient\nfrom rucio.client.downloadclient import DownloadClient\n\nclient = Client(...) # Initialize a client using your preferred method\n\nupload_client = UploadClient(client) # Pass forward the initialized client\nupload_client.upload(items=...)\n\ndownload_client = DownloadClient(client)\ndownload_client.download_dids(items=...)\n</code></pre> <p>Constructor for the Rucio main client class.</p> PARAMETER DESCRIPTION <code>rucio_host</code> <p>the host of the rucio system.</p> <p> </p> <code>auth_host</code> <p>the host of the rucio authentication server.</p> <p> </p> <code>account</code> <p>the rucio account that should be used to interact with the rucio system.</p> <p> </p> <code>ca_cert</code> <p>the certificate to verify the server.</p> <p> </p> <code>auth_type</code> <p>the type of authentication to use (e.g. userpass, x509 ...)</p> <p> </p> <code>creds</code> <p>credentials needed for authentication.</p> <p> </p> <code>timeout</code> <p>Float describes the timeout of the request (in seconds).</p> <p> </p> <code>vo</code> <p>The vo that the client will interact with.</p> <p> </p> <code>logger</code> <p>Logger instance to use (optional)</p> <p> </p>"},{"location":"client.html#rucio.client.client.Client-functions","title":"Functions","text":""},{"location":"configclient.html","title":"Configclient","text":""},{"location":"configclient.html#rucio.client.configclient-classes","title":"Classes","text":""},{"location":"configclient.html#rucio.client.configclient.ConfigClient","title":"ConfigClient","text":"<pre><code>ConfigClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Client class for working with the configuration</p>"},{"location":"configclient.html#rucio.client.configclient.ConfigClient-functions","title":"Functions","text":""},{"location":"configclient.html#rucio.client.configclient.ConfigClient.get_config","title":"get_config","text":"<pre><code>get_config(section=None, option=None)\n</code></pre> <p>Sends the request to get the matching configuration.</p> PARAMETER DESCRIPTION <code>section</code> <p>the optional name of the section.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>option</code> <p>the optional option within the section.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dictionary containing the configuration.</p>"},{"location":"configclient.html#rucio.client.configclient.ConfigClient.set_config_option","title":"set_config_option","text":"<pre><code>set_config_option(\n    section, option, value, use_body_for_params=True\n)\n</code></pre> <p>Sends the request to create or set an option within a section. Missing sections will be created.</p> PARAMETER DESCRIPTION <code>section</code> <p>the name of the section.</p> <p> TYPE: <code>str</code> </p> <code>option</code> <p>the name of the option.</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>the value to set on the config option</p> <p> TYPE: <code>Any</code> </p> <code>use_body_for_params</code> <p>send parameters in a json-encoded request body instead of url-encoded TODO: remove this parameter The format of the /config endpoint was recently changed. We migrated from performing a PUT on \"/config///\" to sending the parameters using a json-encoded body. This was done to fix multiple un-wanted side effects related to how the middleware treats values encoded in a path. For a smooth transition, we allow both cases for now, but we should migrate to only passing values via the request body. <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if option was removed successfully. False otherwise.</p>"},{"location":"configclient.html#rucio.client.configclient.ConfigClient.delete_config_option","title":"delete_config_option","text":"<pre><code>delete_config_option(section, option)\n</code></pre> <p>Sends the request to remove an option from a section</p> PARAMETER DESCRIPTION <code>section</code> <p>the name of the section.</p> <p> TYPE: <code>str</code> </p> <code>option</code> <p>the name of the option.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if option was removed successfully. False otherwise.</p>"},{"location":"configclient.html#rucio.client.configclient-functions","title":"Functions","text":""},{"location":"credentialclient.html","title":"Credentialclient","text":""},{"location":"credentialclient.html#rucio.client.credentialclient-classes","title":"Classes","text":""},{"location":"credentialclient.html#rucio.client.credentialclient.CredentialClient","title":"CredentialClient","text":"<pre><code>CredentialClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Credential client class for working with URL signing</p>"},{"location":"credentialclient.html#rucio.client.credentialclient.CredentialClient-functions","title":"Functions","text":""},{"location":"credentialclient.html#rucio.client.credentialclient.CredentialClient.get_signed_url","title":"get_signed_url","text":"<pre><code>get_signed_url(rse, service, operation, url, lifetime=3600)\n</code></pre> <p>Return a signed version of the given URL for the given operation.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The name of the RSE the URL points to.</p> <p> TYPE: <code>str</code> </p> <code>service</code> <p>The service the URL points to (gcs, s3, swift)</p> <p> TYPE: <code>str</code> </p> <code>operation</code> <p>The desired operation (read, write, delete)</p> <p> TYPE: <code>str</code> </p> <code>url</code> <p>The URL to sign</p> <p> TYPE: <code>str</code> </p> <code>lifetime</code> <p>The desired lifetime of the URL in seconds</p> <p> TYPE: <code>int</code> DEFAULT: <code>3600</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The signed URL string</p>"},{"location":"credentialclient.html#rucio.client.credentialclient-functions","title":"Functions","text":""},{"location":"didclient.html","title":"Didclient","text":""},{"location":"didclient.html#rucio.client.didclient-classes","title":"Classes","text":""},{"location":"didclient.html#rucio.client.didclient.DIDClient","title":"DIDClient","text":"<pre><code>DIDClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>DataIdentifier client class for working with data identifiers</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient-functions","title":"Functions","text":""},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_dids","title":"list_dids","text":"<pre><code>list_dids(\n    scope,\n    filters,\n    did_type=\"collection\",\n    long=False,\n    recursive=False,\n)\n</code></pre> <p>List all data identifiers in a scope which match a given pattern.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>filters</code> <p>A nested dictionary of key/value pairs like [{'key1': 'value1', 'key2.lte': 'value2'}, {'key3.gte, 'value3'}]. Keypairs in the same dictionary are AND'ed together, dictionaries are OR'ed together. Keys should be suffixed like ., e.g. key1 &gt;= value1 is equivalent to {'key1.gte': value}, where  belongs to one of the set {'lte', 'gte', 'gt', 'lt', 'ne' or ''}. Equivalence doesn't require an operator. <p> TYPE: <code>Sequence[dict[str, Any]]</code> </p> <code>did_type</code> <p>The type of the did: 'all'(container, dataset or file)|'collection'(dataset or container)|'dataset'|'container'|'file'</p> <p> TYPE: <code>Literal['all', 'collection', 'dataset', 'container', 'file']</code> DEFAULT: <code>'collection'</code> </p> <code>long</code> <p>Long format option to display more information for each DID.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>recursive</code> <p>Recursively list DIDs content.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_dids_extended","title":"list_dids_extended","text":"<pre><code>list_dids_extended(\n    scope,\n    filters,\n    did_type=\"collection\",\n    long=False,\n    recursive=False,\n)\n</code></pre> <p>List all data identifiers in a scope which match a given pattern (DEPRECATED)</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_did","title":"add_did","text":"<pre><code>add_did(\n    scope,\n    name,\n    did_type,\n    statuses=None,\n    meta=None,\n    rules=None,\n    lifetime=None,\n    dids=None,\n    rse=None,\n)\n</code></pre> <p>Add data identifier for a dataset or container.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>did_type</code> <p>The data identifier type (dataset|container).</p> <p> TYPE: <code>Literal['DATASET', 'CONTAINER']</code> </p> <code>statuses</code> <p>Dictionary with statuses, e.g. {'monotonic':True}.</p> <p> TYPE: <code>Optional[Mapping[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>meta</code> <p>Meta-data associated with the data identifier is represented using key/value pairs in a dictionary.</p> <p> TYPE: <code>Optional[Mapping[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>rules</code> <p>Replication rules associated with the data identifier. A list of dictionaries, e.g., [{'copies': 2, 'rse_expression': 'TIERS1'}, ].</p> <p> TYPE: <code>Optional[Sequence[Mapping[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>lifetime</code> <p>DID's lifetime (in seconds).</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>dids</code> <p>The content.</p> <p> TYPE: <code>Optional[Sequence[Mapping[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>rse</code> <p>The RSE name when registering replicas.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_dids","title":"add_dids","text":"<pre><code>add_dids(dids)\n</code></pre> <p>Bulk add datasets/containers.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_dataset","title":"add_dataset","text":"<pre><code>add_dataset(\n    scope,\n    name,\n    statuses=None,\n    meta=None,\n    rules=None,\n    lifetime=None,\n    files=None,\n    rse=None,\n)\n</code></pre> <p>Add data identifier for a dataset.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>statuses</code> <p>Dictionary with statuses, e.g.g {'monotonic':True}.</p> <p> TYPE: <code>Optional[Mapping[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>meta</code> <p>Meta-data associated with the data identifier is represented using key/value pairs in a dictionary.</p> <p> TYPE: <code>Optional[Mapping[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>rules</code> <p>Replication rules associated with the data identifier. A list of dictionaries, e.g., [{'copies': 2, 'rse_expression': 'TIERS1'}, ].</p> <p> TYPE: <code>Optional[Sequence[Mapping[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>lifetime</code> <p>DID's lifetime (in seconds).</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>files</code> <p>The content.</p> <p> TYPE: <code>Optional[Sequence[Mapping[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>rse</code> <p>The RSE name when registering replicas.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_datasets","title":"add_datasets","text":"<pre><code>add_datasets(dsns)\n</code></pre> <p>Bulk add datasets.</p> PARAMETER DESCRIPTION <code>dsns</code> <p>A list of datasets.</p> <p> TYPE: <code>Iterable[dict[str, Any]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_container","title":"add_container","text":"<pre><code>add_container(\n    scope,\n    name,\n    statuses=None,\n    meta=None,\n    rules=None,\n    lifetime=None,\n)\n</code></pre> <p>Add data identifier for a container.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>statuses</code> <p>Dictionary with statuses, e.g.g {'monotonic':True}.</p> <p> TYPE: <code>Optional[Mapping[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>meta</code> <p>Meta-data associated with the data identifier is represented using key/value pairs in a dictionary.</p> <p> TYPE: <code>Optional[Mapping[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>rules</code> <p>Replication rules associated with the data identifier. A list of dictionaries, e.g., [{'copies': 2, 'rse_expression': 'TIERS1'}, ].</p> <p> TYPE: <code>Optional[Sequence[Mapping[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>lifetime</code> <p>DID's lifetime (in seconds).</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_containers","title":"add_containers","text":"<pre><code>add_containers(cnts)\n</code></pre> <p>Bulk add containers.</p> PARAMETER DESCRIPTION <code>cnts</code> <p>A list of containers.</p> <p> TYPE: <code>Sequence[dict[str, Any]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.attach_dids","title":"attach_dids","text":"<pre><code>attach_dids(scope, name, dids, rse=None)\n</code></pre> <p>Attach data identifier.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>dids</code> <p>The content.</p> <p> TYPE: <code>Sequence[Mapping[str, Any]]</code> </p> <code>rse</code> <p>The RSE name when registering replicas.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.detach_dids","title":"detach_dids","text":"<pre><code>detach_dids(scope, name, dids=None)\n</code></pre> <p>Detach data identifier</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>dids</code> <p>The content.</p> <p> TYPE: <code>Optional[Sequence[Mapping[str, Any]]]</code> DEFAULT: <code>None</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.attach_dids_to_dids","title":"attach_dids_to_dids","text":"<pre><code>attach_dids_to_dids(attachments, ignore_duplicate=False)\n</code></pre> <p>Add dids to dids.</p> PARAMETER DESCRIPTION <code>attachments</code> <p>The attachments. attachments is: [attachment, attachment, ...] attachment is: {'scope': scope, 'name': name, 'dids': dids} dids is: [{'scope': scope, 'name': name}, ...]</p> <p> TYPE: <code>Sequence[dict[str, Union[str, Sequence[dict[str, Any]]]]]</code> </p> <code>ignore_duplicate</code> <p>If True, ignore duplicate entries.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_files_to_datasets","title":"add_files_to_datasets","text":"<pre><code>add_files_to_datasets(attachments, ignore_duplicate=False)\n</code></pre> <p>Add files to datasets.</p> PARAMETER DESCRIPTION <code>attachments</code> <p>The attachments. attachments is: [attachment, attachment, ...] attachment is: {'scope': scope, 'name': name, 'dids': dids} dids is: [{'scope': scope, 'name': name}, ...]</p> <p> TYPE: <code>Sequence[dict[str, Union[str, Sequence[dict[str, Any]]]]]</code> </p> <code>ignore_duplicate</code> <p>If True, ignore duplicate entries.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_datasets_to_containers","title":"add_datasets_to_containers","text":"<pre><code>add_datasets_to_containers(attachments)\n</code></pre> <p>Add datasets_to_containers.</p> PARAMETER DESCRIPTION <code>attachments</code> <p>The attachments. attachments is: [attachment, attachment, ...] attachment is: {'scope': scope, 'name': name, 'dids': dids} dids is: [{'scope': scope, 'name': name}, ...]</p> <p> TYPE: <code>Sequence[dict[str, Union[str, Sequence[dict[str, Any]]]]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_containers_to_containers","title":"add_containers_to_containers","text":"<pre><code>add_containers_to_containers(attachments)\n</code></pre> <p>Add containers_to_containers.</p> PARAMETER DESCRIPTION <code>attachments</code> <p>The attachments. attachments is: [attachment, attachment, ...] attachment is: {'scope': scope, 'name': name, 'dids': dids} dids is: [{'scope': scope, 'name': name}, ...]</p> <p> TYPE: <code>Sequence[dict[str, Union[str, Sequence[dict[str, Any]]]]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_files_to_dataset","title":"add_files_to_dataset","text":"<pre><code>add_files_to_dataset(scope, name, files, rse=None)\n</code></pre> <p>Add files to datasets.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The dataset name.</p> <p> TYPE: <code>str</code> </p> <code>files</code> <p>The content.</p> <p> TYPE: <code>Sequence[Mapping[str, Any]]</code> </p> <code>rse</code> <p>The RSE name when registering replicas.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_files_to_archive","title":"add_files_to_archive","text":"<pre><code>add_files_to_archive(scope, name, files)\n</code></pre> <p>Add files to archive.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The dataset name.</p> <p> TYPE: <code>str</code> </p> <code>files</code> <p>The content.</p> <p> TYPE: <code>Sequence[Mapping[str, Any]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_datasets_to_container","title":"add_datasets_to_container","text":"<pre><code>add_datasets_to_container(scope, name, dsns)\n</code></pre> <p>Add datasets to container.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The dataset name.</p> <p> TYPE: <code>str</code> </p> <code>dsns</code> <p>The content.</p> <p> TYPE: <code>Sequence[Mapping[str, Any]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_containers_to_container","title":"add_containers_to_container","text":"<pre><code>add_containers_to_container(scope, name, cnts)\n</code></pre> <p>Add containers to container.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The dataset name.</p> <p> TYPE: <code>str</code> </p> <code>cnts</code> <p>The content.</p> <p> TYPE: <code>Sequence[Mapping[str, Any]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_content","title":"list_content","text":"<pre><code>list_content(scope, name)\n</code></pre> <p>List data identifier contents.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_content_history","title":"list_content_history","text":"<pre><code>list_content_history(scope, name)\n</code></pre> <p>List data identifier contents history.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_files","title":"list_files","text":"<pre><code>list_files(scope, name, long=None)\n</code></pre> <p>List data identifier file contents.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>long</code> <p>A boolean to choose if GUID is returned or not.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.bulk_list_files","title":"bulk_list_files","text":"<pre><code>bulk_list_files(dids)\n</code></pre> <p>List data identifier file contents.</p> PARAMETER DESCRIPTION <code>dids</code> <p>The list of DIDs.</p> <p> TYPE: <code>list[dict[str, Any]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.get_did","title":"get_did","text":"<pre><code>get_did(scope, name, dynamic=False, dynamic_depth=None)\n</code></pre> <p>Retrieve a single data identifier.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>dynamic_depth</code> <p>The DID type as string ('FILE'/'DATASET') at which to stop the dynamic length/bytes calculation. If not set, the size will not be computed dynamically.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>dynamic</code> <p>(Deprecated) same as dynamic_depth = 'FILE'</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(scope, name, plugin='DID_COLUMN')\n</code></pre> <p>Get data identifier metadata</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>plugin</code> <p>Backend Metadata plugin the Rucio server should use to query data.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'DID_COLUMN'</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.get_metadata_bulk","title":"get_metadata_bulk","text":"<pre><code>get_metadata_bulk(dids, inherit=False, plugin='JSON')\n</code></pre> <p>Bulk get data identifier metadata</p> PARAMETER DESCRIPTION <code>dids</code> <p>A list of dids.</p> <p> TYPE: <code>Sequence[Mapping[str, Any]]</code> </p> <code>inherit</code> <p>A boolean. If set to true, the metadata of the parent are concatenated.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>plugin</code> <p>The metadata plugin to query, 'ALL' for all available plugins</p> <p> TYPE: <code>str</code> DEFAULT: <code>'JSON'</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.set_metadata","title":"set_metadata","text":"<pre><code>set_metadata(scope, name, key, value, recursive=False)\n</code></pre> <p>Set data identifier metadata</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>the key.</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>the value.</p> <p> TYPE: <code>Any</code> </p> <code>recursive</code> <p>Option to propagate the metadata change to content.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.set_metadata_bulk","title":"set_metadata_bulk","text":"<pre><code>set_metadata_bulk(scope, name, meta, recursive=False)\n</code></pre> <p>Set data identifier metadata in bulk.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>meta</code> <p>the metadata key-values.</p> <p> TYPE: <code>Mapping[str, Any]</code> </p> <code>recursive</code> <p>Option to propagate the metadata change to content.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.set_dids_metadata_bulk","title":"set_dids_metadata_bulk","text":"<pre><code>set_dids_metadata_bulk(dids, recursive=False)\n</code></pre> <p>Set metadata to a list of data identifiers.</p> PARAMETER DESCRIPTION <code>dids</code> <p>A list of dids including metadata, i.e. [{'scope': scope1, 'name': name1, 'meta': {key1: value1, key2: value2}] .</p> <p> TYPE: <code>Sequence[Mapping[str, Any]]</code> </p> <code>recursive</code> <p>Option to propagate the metadata update to content.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.set_status","title":"set_status","text":"<pre><code>set_status(scope, name, **kwargs)\n</code></pre> <p>Set data identifier status</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>kwargs</code> <p>Keyword arguments of the form status_name=value.</p> <p> DEFAULT: <code>{}</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.close","title":"close","text":"<pre><code>close(scope, name)\n</code></pre> <p>close dataset/container</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The dataset/container name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.delete_metadata","title":"delete_metadata","text":"<pre><code>delete_metadata(scope, name, key)\n</code></pre> <p>Delete data identifier metadata</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>the key.</p> <p> TYPE: <code>str</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_did_rules","title":"list_did_rules","text":"<pre><code>list_did_rules(scope, name)\n</code></pre> <p>List the associated rules of a data identifier.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_associated_rules_for_file","title":"list_associated_rules_for_file","text":"<pre><code>list_associated_rules_for_file(scope, name)\n</code></pre> <p>List the associated rules a file is affected from..</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The file name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.get_dataset_by_guid","title":"get_dataset_by_guid","text":"<pre><code>get_dataset_by_guid(guid)\n</code></pre> <p>Get the parent datasets for a given GUID.</p> PARAMETER DESCRIPTION <code>guid</code> <p>The GUID.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Iterator[dict[str, Any]]</code> <p>A did</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.scope_list","title":"scope_list","text":"<pre><code>scope_list(scope, name=None, recursive=False)\n</code></pre> <p>List data identifiers in a scope.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>recursive</code> <p>boolean, True or False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_parent_dids","title":"list_parent_dids","text":"<pre><code>list_parent_dids(scope, name)\n</code></pre> <p>List parent dataset/containers of a did.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.create_did_sample","title":"create_did_sample","text":"<pre><code>create_did_sample(\n    input_scope,\n    input_name,\n    output_scope,\n    output_name,\n    nbfiles,\n)\n</code></pre> <p>Create a sample from an input collection.</p> PARAMETER DESCRIPTION <code>input_scope</code> <p>The scope of the input DID.</p> <p> TYPE: <code>str</code> </p> <code>input_name</code> <p>The name of the input DID.</p> <p> TYPE: <code>str</code> </p> <code>output_scope</code> <p>The scope of the output dataset.</p> <p> TYPE: <code>str</code> </p> <code>output_name</code> <p>The name of the output dataset.</p> <p> TYPE: <code>str</code> </p> <code>account</code> <p>The account.</p> <p> </p> <code>nbfiles</code> <p>The number of files to register in the output dataset.</p> <p> TYPE: <code>int</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.resurrect","title":"resurrect","text":"<pre><code>resurrect(dids)\n</code></pre> <p>Resurrect a list of dids.</p> PARAMETER DESCRIPTION <code>dids</code> <p>A list of dids [{'scope': scope, 'name': name}, ...]</p> <p> TYPE: <code>Sequence[Mapping[str, Any]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_archive_content","title":"list_archive_content","text":"<pre><code>list_archive_content(scope, name)\n</code></pre> <p>List archive contents.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"didclient.html#rucio.client.didclient-functions","title":"Functions","text":""},{"location":"diracclient.html","title":"Diracclient","text":""},{"location":"diracclient.html#rucio.client.diracclient-classes","title":"Classes","text":""},{"location":"diracclient.html#rucio.client.diracclient.DiracClient","title":"DiracClient","text":"<pre><code>DiracClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>DataIdentifier client class for working with data identifiers</p>"},{"location":"diracclient.html#rucio.client.diracclient.DiracClient-functions","title":"Functions","text":""},{"location":"diracclient.html#rucio.client.diracclient.DiracClient.add_files","title":"add_files","text":"<pre><code>add_files(\n    lfns, ignore_availability=False, parents_metadata=None\n)\n</code></pre> <p>Bulk add files : - Create the file and replica. - If doesn't exist create the dataset containing the file as well as a rule on the dataset on ANY sites. - Create all the ascendants of the dataset if they do not exist</p> PARAMETER DESCRIPTION <code>lfns</code> <p>List of lfn (dictionary {'lfn': , 'rse': , 'bytes': , 'adler32': , 'guid': , 'pfn': } <p> TYPE: <code>Iterable[Mapping[str, Any]]</code> </p> <code>ignore_availability</code> <p>A boolean to ignore blocked sites.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>parents_metadata</code> <p>Metadata for selected hierarchy DIDs. (dictionary {'lpn': {key : value}}). Default=None</p> <p> TYPE: <code>Optional[Mapping[str, Mapping[str, Any]]]</code> DEFAULT: <code>None</code> </p>"},{"location":"diracclient.html#rucio.client.diracclient-functions","title":"Functions","text":""},{"location":"downloadclient.html","title":"Downloadclient","text":""},{"location":"downloadclient.html#rucio.client.downloadclient-classes","title":"Classes","text":""},{"location":"downloadclient.html#rucio.client.downloadclient.FileDownloadState","title":"FileDownloadState","text":"<p>The state a file can be in before/while/after downloading.</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.BaseExtractionTool","title":"BaseExtractionTool","text":"<pre><code>BaseExtractionTool(\n    program_name,\n    useability_check_args,\n    extract_args,\n    logger=logging.log,\n)\n</code></pre> <p>Initialises a extraction tool object</p> PARAMETER DESCRIPTION <code>program_name</code> <p>the name of the archive extraction program, e.g., unzip</p> <p> TYPE: <code>str</code> </p> <code>useability_check_args</code> <p>the arguments of the extraction program to test if its installed, e.g., --version</p> <p> TYPE: <code>str</code> </p> <code>extract_args</code> <p>the arguments that will be passed to the program for extraction</p> <p> TYPE: <code>str</code> </p> <code>logger</code> <p>optional decorated logging.log object that can be passed from the calling daemon or client.</p> <p> TYPE: <code>LoggerFunction</code> DEFAULT: <code>log</code> </p>"},{"location":"downloadclient.html#rucio.client.downloadclient.BaseExtractionTool-functions","title":"Functions","text":""},{"location":"downloadclient.html#rucio.client.downloadclient.BaseExtractionTool.is_useable","title":"is_useable","text":"<pre><code>is_useable()\n</code></pre> <p>Checks if the extraction tool is installed and usable</p> RETURNS DESCRIPTION <code>bool</code> <p>True if it is usable otherwise False</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.BaseExtractionTool.try_extraction","title":"try_extraction","text":"<pre><code>try_extraction(\n    archive_file_path, file_to_extract, dest_dir_path\n)\n</code></pre> <p>Calls the extraction program to extract a file from an archive</p> PARAMETER DESCRIPTION <code>archive_file_path</code> <p>path to the archive</p> <p> TYPE: <code>str</code> </p> <code>file_to_extract</code> <p>file name to extract from the archive</p> <p> TYPE: <code>str</code> </p> <code>dest_dir_path</code> <p>destination directory where the extracted file will be stored</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True on success otherwise False</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient","title":"DownloadClient","text":"<pre><code>DownloadClient(\n    client=None,\n    logger=None,\n    tracing=True,\n    check_admin=False,\n    check_pcache=False,\n)\n</code></pre> <p>Initialises the basic settings for an DownloadClient object</p> PARAMETER DESCRIPTION <code>client</code> <p>Optional: rucio.client.client.Client object. If None, a new object will be created.</p> <p> TYPE: <code>Optional[Client]</code> DEFAULT: <code>None</code> </p> <code>external_traces</code> <p>Optional: reference to a list where traces can be added</p> <p> </p> <code>logger</code> <p>Optional: logging.Logger object. If None, default logger will be used.</p> <p> TYPE: <code>Optional[LoggerFunction]</code> DEFAULT: <code>None</code> </p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient-functions","title":"Functions","text":""},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.download_pfns","title":"download_pfns","text":"<pre><code>download_pfns(\n    items,\n    num_threads=2,\n    trace_custom_fields=None,\n    traces_copy_out=None,\n    deactivate_file_download_exceptions=False,\n)\n</code></pre> <p>Download items with a given PFN. This function can only download files, no datasets.</p> PARAMETER DESCRIPTION <code>items</code> <p>List of dictionaries. Each dictionary describing a file to download. Keys: pfn                            - PFN string of this file did                            - DID string of this file (e.g. 'scope:file.name'). Wildcards are not allowed rse                            - rse name (e.g. 'CERN-PROD_DATADISK'). RSE Expressions are not allowed base_dir                       - Optional: Base directory where the downloaded files will be stored. (Default: '.') no_subdir                      - Optional: If true, files are written directly into base_dir. (Default: False) adler32                        - Optional: The adler32 checmsum to compare the downloaded files adler32 checksum with md5                            - Optional: The md5 checksum to compare the downloaded files md5 checksum with transfer_timeout               - Optional: Timeout time for the download protocols. (Default: None) check_local_with_filesize_only - Optional: If true, already downloaded files will not be validated by checksum.</p> <p> TYPE: <code>list[dict[str, Any]]</code> </p> <code>num_threads</code> <p>Suggestion of number of threads to use for the download. It will be lowered if it's too high.</p> <p> TYPE: <code>int</code> DEFAULT: <code>2</code> </p> <code>trace_custom_fields</code> <p>Custom key value pairs to send with the traces</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>traces_copy_out</code> <p>reference to an external list, where the traces should be uploaded</p> <p> TYPE: <code>Optional[list[dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deactivate_file_download_exceptions</code> <p>Boolean, if file download exceptions shouldn't be raised</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>list[dict[str, Any]]</code> <p>a list of dictionaries with an entry for each file, containing the input options, the did, and the clientState clientState can be one of the following: ALREADY_DONE, DONE, FILE_NOT_FOUND, FAIL_VALIDATE, FAILED</p> RAISES DESCRIPTION <code>InputValidationError</code> <p>if one of the input items is in the wrong format</p> <code>NoFilesDownloaded</code> <p>if no files could be downloaded</p> <code>NotAllFilesDownloaded</code> <p>if not all files could be downloaded</p> <code>RucioException</code> <p>if something unexpected went wrong during the download</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.download_dids","title":"download_dids","text":"<pre><code>download_dids(\n    items,\n    num_threads=2,\n    trace_custom_fields=None,\n    traces_copy_out=None,\n    deactivate_file_download_exceptions=False,\n    sort=None,\n)\n</code></pre> <p>Download items with given DIDs. This function can also download datasets and wildcarded DIDs.</p> PARAMETER DESCRIPTION <code>items</code> <p>List of dictionaries. Each dictionary describing an item to download. Keys: did                            - DID string of this file (e.g. 'scope:file.name') filters                        - Filter to select DIDs for download. Optional if DID is given rse                            - Optional: rse name (e.g. 'CERN-PROD_DATADISK') or rse expression from where to download impl                           - Optional: name of the protocol implementation to be used to download this item. no_resolve_archives            - Optional: bool indicating whether archives should not be considered for download (Default: False) resolve_archives               - Deprecated: Use no_resolve_archives instead force_scheme                   - Optional: force a specific scheme to download this item. (Default: None) base_dir                       - Optional: base directory where the downloaded files will be stored. (Default: '.') no_subdir                      - Optional: If true, files are written directly into base_dir. (Default: False) nrandom                        - Optional: if the DID addresses a dataset, nrandom files will be randomly chosen for download from the dataset ignore_checksum                - Optional: If true, skips the checksum validation between the downloaded file and the rucio catalouge. (Default: False) transfer_timeout               - Optional: Timeout time for the download protocols. (Default: None) transfer_speed_timeout         - Optional: Minimum allowed transfer speed (in KBps). Ignored if transfer_timeout set. Otherwise, used to compute default timeout (Default: 500) check_local_with_filesize_only - Optional: If true, already downloaded files will not be validated by checksum.</p> <p> TYPE: <code>list[dict[str, Any]]</code> </p> <code>num_threads</code> <p>Suggestion of number of threads to use for the download. It will be lowered if it's too high.</p> <p> TYPE: <code>int</code> DEFAULT: <code>2</code> </p> <code>trace_custom_fields</code> <p>Custom key value pairs to send with the traces.</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>traces_copy_out</code> <p>reference to an external list, where the traces should be uploaded</p> <p> TYPE: <code>Optional[list[dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deactivate_file_download_exceptions</code> <p>Boolean, if file download exceptions shouldn't be raised</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>sort</code> <p>Select best replica by replica sorting algorithm. Available algorithms: <code>geoip</code>       - based on src/dst IP topographical distance</p> <p> TYPE: <code>Optional[SORTING_ALGORITHMS_LITERAL]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[dict[str, Any]]</code> <p>a list of dictionaries with an entry for each file, containing the input options, the did, and the clientState</p> RAISES DESCRIPTION <code>InputValidationError</code> <p>if one of the input items is in the wrong format</p> <code>NoFilesDownloaded</code> <p>if no files could be downloaded</p> <code>NotAllFilesDownloaded</code> <p>if not all files could be downloaded</p> <code>RucioException</code> <p>if something unexpected went wrong during the download</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.download_from_metalink_file","title":"download_from_metalink_file","text":"<pre><code>download_from_metalink_file(\n    item,\n    metalink_file_path,\n    num_threads=2,\n    trace_custom_fields=None,\n    traces_copy_out=None,\n    deactivate_file_download_exceptions=False,\n)\n</code></pre> <p>Download items using a given metalink file.</p> PARAMETER DESCRIPTION <code>item</code> <p>dictionary describing an item to download. Keys: base_dir                       - Optional: base directory where the downloaded files will be stored. (Default: '.') no_subdir                      - Optional: If true, files are written directly into base_dir. (Default: False) ignore_checksum                - Optional: If true, skips the checksum validation between the downloaded file and the rucio catalouge. (Default: False) transfer_timeout               - Optional: Timeout time for the download protocols. (Default: None) check_local_with_filesize_only - Optional: If true, already downloaded files will not be validated by checksum.</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>num_threads</code> <p>Suggestion of number of threads to use for the download. It will be lowered if it's too high.</p> <p> TYPE: <code>int</code> DEFAULT: <code>2</code> </p> <code>trace_custom_fields</code> <p>Custom key value pairs to send with the traces.</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>traces_copy_out</code> <p>reference to an external list, where the traces should be uploaded</p> <p> TYPE: <code>Optional[list[dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deactivate_file_download_exceptions</code> <p>Boolean, if file download exceptions shouldn't be raised</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>list[dict[str, Any]]</code> <p>a list of dictionaries with an entry for each file, containing the input options, the did, and the clientState</p> RAISES DESCRIPTION <code>InputValidationError</code> <p>if one of the input items is in the wrong format</p> <code>NoFilesDownloaded</code> <p>if no files could be downloaded</p> <code>NotAllFilesDownloaded</code> <p>if not all files could be downloaded</p> <code>RucioException</code> <p>if something unexpected went wrong during the download</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient._download_multithreaded","title":"_download_multithreaded","text":"<pre><code>_download_multithreaded(\n    input_items,\n    num_threads,\n    trace_custom_fields=None,\n    traces_copy_out=None,\n)\n</code></pre> <p>Starts an appropriate number of threads to download items from the input list. (This function is meant to be used as class internal only)</p> PARAMETER DESCRIPTION <code>input_items</code> <p>list containing the input items to download</p> <p> TYPE: <code>list[dict[str, Any]]</code> </p> <code>num_threads</code> <p>suggestion of how many threads should be started</p> <p> TYPE: <code>int</code> </p> <code>trace_custom_fields</code> <p>Custom key value pairs to send with the traces</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>traces_copy_out</code> <p>reference to an external list, where the traces should be uploaded</p> <p> TYPE: <code>Optional[list[dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[dict[str, Any]]</code> <p>list with output items as dictionaries</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient._download_worker","title":"_download_worker","text":"<pre><code>_download_worker(\n    input_queue,\n    output_queue,\n    trace_custom_fields,\n    traces_copy_out,\n    log_prefix,\n)\n</code></pre> <p>This function runs as long as there are items in the input queue, downloads them and stores the output in the output queue. (This function is meant to be used as class internal only)</p> PARAMETER DESCRIPTION <code>input_queue</code> <p>queue containing the input items to download</p> <p> TYPE: <code>Queue</code> </p> <code>output_queue</code> <p>queue where the output items will be stored</p> <p> TYPE: <code>Queue</code> </p> <code>trace_custom_fields</code> <p>Custom key value pairs to send with the traces</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>traces_copy_out</code> <p>reference to an external list, where the traces should be uploaded</p> <p> TYPE: <code>Optional[list[dict[str, Any]]]</code> </p> <code>log_prefix</code> <p>string that will be put at the beginning of every log message</p> <p> TYPE: <code>str</code> </p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient._compute_actual_transfer_timeout","title":"_compute_actual_transfer_timeout  <code>staticmethod</code>","text":"<pre><code>_compute_actual_transfer_timeout(item)\n</code></pre> <p>Merge the two options related to timeout into the value which will be used for protocol download.</p> PARAMETER DESCRIPTION <code>item</code> <p>dictionary that describes the item to download</p> <p> TYPE: <code>dict[str, Any]</code> </p> RETURNS DESCRIPTION <code>int</code> <p>timeout in seconds</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient._download_item","title":"_download_item","text":"<pre><code>_download_item(item, trace, traces_copy_out, log_prefix='')\n</code></pre> <p>Downloads the given item and sends traces for success/failure. (This function is meant to be used as class internal only)</p> PARAMETER DESCRIPTION <code>item</code> <p>dictionary that describes the item to download</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>trace</code> <p>dictionary representing a pattern of trace that will be send</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>traces_copy_out</code> <p>reference to an external list, where the traces should be uploaded</p> <p> TYPE: <code>Optional[list[dict[str, Any]]]</code> </p> <code>log_prefix</code> <p>string that will be put at the beginning of every log message</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dictionary with all attributes from the input item and a clientState attribute</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.download_aria2c","title":"download_aria2c","text":"<pre><code>download_aria2c(\n    items,\n    trace_custom_fields=None,\n    filters=None,\n    deactivate_file_download_exceptions=False,\n    sort=None,\n)\n</code></pre> <p>Uses aria2c to download the items with given DIDs. This function can also download datasets and wildcarded DIDs. It only can download files that are available via https/davs. Aria2c needs to be installed and X509_USER_PROXY needs to be set!</p> PARAMETER DESCRIPTION <code>items</code> <p>List of dictionaries. Each dictionary describing an item to download. Keys: did                            - DID string of this file (e.g. 'scope:file.name'). Wildcards are not allowed rse                            - Optional: rse name (e.g. 'CERN-PROD_DATADISK') or rse expression from where to download base_dir                       - Optional: base directory where the downloaded files will be stored. (Default: '.') no_subdir                      - Optional: If true, files are written directly into base_dir. (Default: False) nrandom                        - Optional: if the DID addresses a dataset, nrandom files will be randomly chosen for download from the dataset ignore_checksum                - Optional: If true, skips the checksum validation between the downloaded file and the rucio catalouge. (Default: False) check_local_with_filesize_only - Optional: If true, already downloaded files will not be validated by checksum.</p> <p> TYPE: <code>list[dict[str, Any]]</code> </p> <code>trace_custom_fields</code> <p>Custom key value pairs to send with the traces</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>filters</code> <p>dictionary containing filter options</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>deactivate_file_download_exceptions</code> <p>Boolean, if file download exceptions shouldn't be raised</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>sort</code> <p>Select best replica by replica sorting algorithm. Available algorithms: <code>geoip</code>       - based on src/dst IP topographical distance</p> <p> TYPE: <code>Optional[SORTING_ALGORITHMS_LITERAL]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[dict[str, Any]]</code> <p>a list of dictionaries with an entry for each file, containing the input options, the did, and the clientState</p> RAISES DESCRIPTION <code>InputValidationError</code> <p>if one of the input items is in the wrong format</p> <code>NoFilesDownloaded</code> <p>if no files could be downloaded</p> <code>NotAllFilesDownloaded</code> <p>if not all files could be downloaded</p> <code>RucioException</code> <p>if something went wrong during the download (e.g. aria2c could not be started)</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient._start_aria2c_rpc","title":"_start_aria2c_rpc","text":"<pre><code>_start_aria2c_rpc(rpc_secret)\n</code></pre> <p>Starts aria2c in RPC mode as a subprocess. Also creates the RPC proxy instance. (This function is meant to be used as class internal only)</p> PARAMETER DESCRIPTION <code>rpc_secret</code> <p>the secret for the RPC proxy</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>tuple[Popen, ServerProxy]</code> <p>a tuple with the process and the rpc proxy objects</p> RAISES DESCRIPTION <code>RucioException</code> <p>if the process or the proxy could not be created</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient._download_items_aria2c","title":"_download_items_aria2c","text":"<pre><code>_download_items_aria2c(\n    items, aria_rpc, rpc_auth, trace_custom_fields=None\n)\n</code></pre> <p>Uses aria2c to download the given items. Aria2c needs to be started as RPC background process first and a RPC proxy is needed. (This function is meant to be used as class internal only)</p> PARAMETER DESCRIPTION <code>items</code> <p>list of dictionaries containing one dict for each file to download</p> <p> TYPE: <code>list[dict[str, Any]]</code> </p> <code>aria_rcp</code> <p>RPCProxy to the aria2c process</p> <p> </p> <code>rpc_auth</code> <p>the rpc authentication token</p> <p> TYPE: <code>str</code> </p> <code>trace_custom_fields</code> <p>Custom key value pairs to send with the traces</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[dict[str, Any]]</code> <p>a list of dictionaries with an entry for each file, containing the input options, the did, and the clientState</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient._resolve_one_item_dids","title":"_resolve_one_item_dids","text":"<pre><code>_resolve_one_item_dids(item)\n</code></pre> <p>Resolve scopes or wildcard DIDs to lists of full did names:</p> PARAMETER DESCRIPTION <code>item</code> <p>One input item</p> <p> TYPE: <code>dict[str, Any]</code> </p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient._resolve_and_merge_input_items","title":"_resolve_and_merge_input_items","text":"<pre><code>_resolve_and_merge_input_items(input_items, sort=None)\n</code></pre> <p>This function takes the input items given to download_dids etc. and resolves the sources.</p> <ul> <li>It first performs a list_dids call to dereference any wildcards and retrieve DID stats (size, length, type).</li> <li>Next, input items are grouped together by common list_replicas options. For each group, a single list_replicas call is performed.</li> <li>The resolved File DIDs with sources are finally mapped back to initial input items to be able to correctly retrieve download options (timeout, destination directories, etc)</li> </ul> PARAMETER DESCRIPTION <code>input_items</code> <p>List of dictionaries. Each dictionary describing an input item</p> <p> TYPE: <code>list[dict[str, Any]]</code> </p> RETURNS DESCRIPTION <code>tuple[dict[str, Any], list[dict[str, Any]]]</code> <p>a tuple: - a dictionary that maps the dereferenced(w/o wildcards) input DIDs to a list of input items - and a list with a dictionary for each file DID which has to be downloaded</p> RAISES DESCRIPTION <code>InputValidationError</code> <p>if one of the input items is in the wrong format</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient._options_from_input_items","title":"_options_from_input_items","text":"<pre><code>_options_from_input_items(input_items)\n</code></pre> <p>Best-effort generation of download options from multiple input items which resolve to the same file DID. This is done to download each file DID only once, even if it is requested multiple times via overlapping datasets and/or wildcard resolutions in distinct input items.</p> <p>Some options can be easily merged. For example: multiple base_dir are all appended to a list. As a result, the file is downloaded once and copied to all desired destinations. Other options are not necessarily compatible. For example, two items requesting two different values for download timeout. We make our best to merge the options in such cases.</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient._prepare_items_for_download","title":"_prepare_items_for_download","text":"<pre><code>_prepare_items_for_download(did_to_input_items, file_items)\n</code></pre> <p>Optimises the amount of files to download (This function is meant to be used as class internal only)</p> PARAMETER DESCRIPTION <code>did_to_input_items</code> <p>dictionary that maps resolved input DIDs to input items</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>file_items</code> <p>list of dictionaries. Each dictionary describes a File DID to download</p> <p> TYPE: <code>list[dict[str, Any]]</code> </p> RETURNS DESCRIPTION <code>list[dict[str, Any]]</code> <p>list of dictionaries. Each dictionary describes an element to download</p> RAISES DESCRIPTION <code>InputValidationError</code> <p>if the given input is not valid or incomplete</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient._split_did_str","title":"_split_did_str","text":"<pre><code>_split_did_str(did_str)\n</code></pre> <p>Splits a given DID string (e.g. 'scope1:name.file') into its scope and name part (This function is meant to be used as class internal only)</p> PARAMETER DESCRIPTION <code>did_str</code> <p>the DID string that will be split</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>tuple[str, str]</code> <p>the scope- and name part of the given DID</p> RAISES DESCRIPTION <code>InputValidationError</code> <p>if the given DID string is not valid</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient._prepare_dest_dir","title":"_prepare_dest_dir","text":"<pre><code>_prepare_dest_dir(base_dir, dest_dir_name, no_subdir)\n</code></pre> <p>Builds the final destination path for a file and creates the destination directory if it's not existent. (This function is meant to be used as class internal only)</p> PARAMETER DESCRIPTION <code>base_dir</code> <p>base directory part</p> <p> TYPE: <code>str</code> </p> <code>dest_dir_name</code> <p>name of the destination directory</p> <p> TYPE: <code>str</code> </p> <code>no_subdir</code> <p>if no subdirectory should be created</p> <p> TYPE: <code>Optional[bool]</code> </p> RETURNS DESCRIPTION <code>str</code> <p>the absolute path of the destination directory</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient._check_output","title":"_check_output","text":"<pre><code>_check_output(\n    output_items, deactivate_file_download_exceptions=False\n)\n</code></pre> <p>Checks if all files were successfully downloaded (This function is meant to be used as class internal only)</p> PARAMETER DESCRIPTION <code>output_items</code> <p>list of dictionaries describing the downloaded files</p> <p> TYPE: <code>list[dict[str, Any]]</code> </p> <code>deactivate_file_download_exceptions</code> <p>Boolean, if file download exceptions shouldn't be raised</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>list[dict[str, Any]]</code> <p>output_items list</p> RAISES DESCRIPTION <code>NoFilesDownloaded</code> <code>NotAllFilesDownloaded</code>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient._send_trace","title":"_send_trace","text":"<pre><code>_send_trace(trace)\n</code></pre> <p>Checks if sending trace is allowed and send the trace.</p> PARAMETER DESCRIPTION <code>trace</code> <p>the trace</p> <p> TYPE: <code>dict[str, Any]</code> </p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.preferred_impl","title":"preferred_impl","text":"<pre><code>preferred_impl(sources)\n</code></pre> <p>Finds the optimum protocol impl preferred by the client and supported by the remote RSE.</p> PARAMETER DESCRIPTION <code>sources</code> <p>List of sources for a given DID</p> <p> TYPE: <code>list[dict[str, Any]]</code> </p> RAISES DESCRIPTION <code>RucioException(msg)</code> <p>general exception with msg for more details.</p>"},{"location":"downloadclient.html#rucio.client.downloadclient-functions","title":"Functions","text":""},{"location":"exportclient.html","title":"Exportclient","text":""},{"location":"exportclient.html#rucio.client.exportclient-classes","title":"Classes","text":""},{"location":"exportclient.html#rucio.client.exportclient.ExportClient","title":"ExportClient","text":"<pre><code>ExportClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>RSE client class for exporting data from Rucio</p>"},{"location":"exportclient.html#rucio.client.exportclient.ExportClient-functions","title":"Functions","text":""},{"location":"exportclient.html#rucio.client.exportclient.ExportClient.export_data","title":"export_data","text":"<pre><code>export_data(distance=True)\n</code></pre> <p>Export RSE data (RSE, settings, attributes and distance).</p> PARAMETER DESCRIPTION <code>distance</code> <p>To include the distance.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>A dict containing data</p>"},{"location":"exportclient.html#rucio.client.exportclient-functions","title":"Functions","text":""},{"location":"fileclient.html","title":"Fileclient","text":""},{"location":"fileclient.html#rucio.client.fileclient-classes","title":"Classes","text":""},{"location":"fileclient.html#rucio.client.fileclient.FileClient","title":"FileClient","text":"<pre><code>FileClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Dataset client class for working with dataset</p>"},{"location":"fileclient.html#rucio.client.fileclient.FileClient-functions","title":"Functions","text":""},{"location":"fileclient.html#rucio.client.fileclient.FileClient.list_file_replicas","title":"list_file_replicas","text":"<pre><code>list_file_replicas(scope, lfn)\n</code></pre> <p>List file replicas.</p> PARAMETER DESCRIPTION <code>scope</code> <p>the scope.</p> <p> TYPE: <code>str</code> </p> <code>lfn</code> <p>the lfn.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>list[dict[str, Any]]</code> <p>List of replicas.</p>"},{"location":"fileclient.html#rucio.client.fileclient-functions","title":"Functions","text":""},{"location":"importclient.html","title":"Importclient","text":""},{"location":"importclient.html#rucio.client.importclient-classes","title":"Classes","text":""},{"location":"importclient.html#rucio.client.importclient.ImportClient","title":"ImportClient","text":"<pre><code>ImportClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>RSE client class for importing data into Rucio</p>"},{"location":"importclient.html#rucio.client.importclient.ImportClient-functions","title":"Functions","text":""},{"location":"importclient.html#rucio.client.importclient.ImportClient.import_data","title":"import_data","text":"<pre><code>import_data(data)\n</code></pre> <p>Imports data into Rucio.</p> PARAMETER DESCRIPTION <code>data</code> <p>a dict containing data to be imported into Rucio.</p> <p> TYPE: <code>dict[str, Any]</code> </p>"},{"location":"importclient.html#rucio.client.importclient-functions","title":"Functions","text":""},{"location":"lifetimeclient.html","title":"Lifetimeclient","text":""},{"location":"lifetimeclient.html#rucio.client.lifetimeclient-classes","title":"Classes","text":""},{"location":"lifetimeclient.html#rucio.client.lifetimeclient.LifetimeClient","title":"LifetimeClient","text":"<pre><code>LifetimeClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Lifetime client class for working with Lifetime Model exceptions</p>"},{"location":"lifetimeclient.html#rucio.client.lifetimeclient.LifetimeClient-functions","title":"Functions","text":""},{"location":"lifetimeclient.html#rucio.client.lifetimeclient.LifetimeClient.list_exceptions","title":"list_exceptions","text":"<pre><code>list_exceptions(exception_id=None, states=None)\n</code></pre> <p>List exceptions to Lifetime Model.</p> PARAMETER DESCRIPTION <code>id</code> <p>The id of the exception</p> <p> </p> <code>states</code> <p>The states to filter</p> <p> TYPE: <code>Optional[Sequence[LifetimeExceptionsState]]</code> DEFAULT: <code>None</code> </p>"},{"location":"lifetimeclient.html#rucio.client.lifetimeclient.LifetimeClient.add_exception","title":"add_exception","text":"<pre><code>add_exception(dids, account, pattern, comments, expires_at)\n</code></pre> <p>Add exceptions to Lifetime Model.</p> PARAMETER DESCRIPTION <code>dids</code> <p>The list of dids</p> <p> TYPE: <code>list[dict[str, Any]]</code> </p> <code>account</code> <p>The account of the requester.</p> <p> TYPE: <code>str</code> </p> <code>pattern</code> <p>The account.</p> <p> TYPE: <code>str</code> </p> <code>comments</code> <p>The comments associated to the exception.</p> <p> TYPE: <code>str</code> </p> <code>expires_at</code> <p>The expiration date of the exception.  returns:            The id of the exception.</p> <p> TYPE: <code>datetime</code> </p>"},{"location":"lifetimeclient.html#rucio.client.lifetimeclient-functions","title":"Functions","text":""},{"location":"lockclient.html","title":"Lockclient","text":""},{"location":"lockclient.html#rucio.client.lockclient-classes","title":"Classes","text":""},{"location":"lockclient.html#rucio.client.lockclient.LockClient","title":"LockClient","text":"<pre><code>LockClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Lock client class for working with rucio locks</p>"},{"location":"lockclient.html#rucio.client.lockclient.LockClient-functions","title":"Functions","text":""},{"location":"lockclient.html#rucio.client.lockclient.LockClient.get_dataset_locks","title":"get_dataset_locks","text":"<pre><code>get_dataset_locks(scope, name)\n</code></pre> <p>Get a dataset locks of the specified dataset.</p> PARAMETER DESCRIPTION <code>scope</code> <p>the scope of the did of the locks to list.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>the name of the did of the locks to list.</p> <p> TYPE: <code>str</code> </p>"},{"location":"lockclient.html#rucio.client.lockclient.LockClient.get_locks_for_dids","title":"get_locks_for_dids","text":"<pre><code>get_locks_for_dids(dids, **filter_args)\n</code></pre> <p>Get list of locks for for all the files found, recursively, in the listed datasets or containers.</p> PARAMETER DESCRIPTION <code>dids</code> <p>list of dictionaries {\"scope\":..., \"name\":..., \"type\":...} type can be either \"dataset\" or \"container\" type is optional, but if specified, improves the query performance</p> <p> TYPE: <code>list[Mapping[str, Any]]</code> </p> RETURNS DESCRIPTION <code>list[dict[str, Any]]</code> <p>list of dictionaries with lock info</p>"},{"location":"lockclient.html#rucio.client.lockclient.LockClient.get_dataset_locks_by_rse","title":"get_dataset_locks_by_rse","text":"<pre><code>get_dataset_locks_by_rse(rse)\n</code></pre> <p>Get all dataset locks of the specified rse.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the rse of the locks to list.</p> <p> TYPE: <code>str</code> </p>"},{"location":"lockclient.html#rucio.client.lockclient-functions","title":"Functions","text":""},{"location":"metaconventionsclient.html","title":"Metaconventionsclient","text":""},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient-classes","title":"Classes","text":""},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient","title":"MetaConventionClient","text":"<pre><code>MetaConventionClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Metadata client class for working with data identifier attributes</p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient-functions","title":"Functions","text":""},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.add_key","title":"add_key","text":"<pre><code>add_key(key, key_type, value_type=None, value_regexp=None)\n</code></pre> <p>Sends the request to add an allowed key for DID metadata (update the DID Metadata Conventions table with a new key).</p> PARAMETER DESCRIPTION <code>key</code> <p>the name for the new key.</p> <p> TYPE: <code>str</code> </p> <code>key_type</code> <p>the type of the key: all(container, dataset, file), collection(dataset or container), file, derived(compute from file for collection).</p> <p> TYPE: <code>Union[KeyType, str]</code> </p> <code>value_type</code> <p>the type of the value, if defined.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>value_regexp</code> <p>the regular expression that values should match, if defined.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Optional[bool]</code> <p>True if key was created successfully.</p> RAISES DESCRIPTION <code>Duplicate</code> <p>if key already exists.</p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.list_keys","title":"list_keys","text":"<pre><code>list_keys()\n</code></pre> <p>Sends the request to list all keys for DID Metadata Conventions.</p> RETURNS DESCRIPTION <code>Optional[list[str]]</code> <p>a list containing the names of all keys.</p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.list_values","title":"list_values","text":"<pre><code>list_values(key)\n</code></pre> <pre><code>    Sends the request to lists all allowed values for a DID key (all values for a key in DID Metadata Conventions).\n</code></pre> <p>.</p> <pre><code>    :return: a list containing the names of all values for a key.\n</code></pre>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.add_value","title":"add_value","text":"<pre><code>add_value(key, value)\n</code></pre> <p>Sends the request to add a value for a key in DID Metadata Convention.</p> PARAMETER DESCRIPTION <code>key</code> <p>the name for key.</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>the value.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Optional[bool]</code> <p>True if value was created successfully.</p> RAISES DESCRIPTION <code>Duplicate</code> <p>if valid already exists.</p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.del_value","title":"del_value","text":"<pre><code>del_value(key, value)\n</code></pre> <p>Delete a key in the DID Metadata Conventions table.</p> PARAMETER DESCRIPTION <code>key</code> <p>the name for key.</p> <p> </p> <code>value</code> <p>the value.</p> <p> </p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.del_key","title":"del_key","text":"<pre><code>del_key(key)\n</code></pre> <p>Delete an allowed key.</p> PARAMETER DESCRIPTION <code>key</code> <p>the name for key.</p> <p> </p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.update_key","title":"update_key","text":"<pre><code>update_key(key, type_=None, regexp=None)\n</code></pre> <p>Update a key.</p> PARAMETER DESCRIPTION <code>key</code> <p>the name for key.</p> <p> </p> <code>type_</code> <p>the type of the value, if defined.</p> <p> DEFAULT: <code>None</code> </p> <code>regexp</code> <p>the regular expression that values should match, if defined.</p> <p> DEFAULT: <code>None</code> </p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient-functions","title":"Functions","text":""},{"location":"pingclient.html","title":"Pingclient","text":""},{"location":"pingclient.html#rucio.client.pingclient-classes","title":"Classes","text":""},{"location":"pingclient.html#rucio.client.pingclient.PingClient","title":"PingClient","text":"<pre><code>PingClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Ping client class</p>"},{"location":"pingclient.html#rucio.client.pingclient.PingClient-functions","title":"Functions","text":""},{"location":"pingclient.html#rucio.client.pingclient.PingClient.ping","title":"ping","text":"<pre><code>ping()\n</code></pre> <p>Sends a ping request to the rucio server.</p> RETURNS DESCRIPTION <p>Dictonnary with server information</p>"},{"location":"pingclient.html#rucio.client.pingclient-functions","title":"Functions","text":""},{"location":"replicaclient.html","title":"Replicaclient","text":""},{"location":"replicaclient.html#rucio.client.replicaclient-classes","title":"Classes","text":""},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient","title":"ReplicaClient","text":"<pre><code>ReplicaClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Replica client class for working with replicas</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient-functions","title":"Functions","text":""},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.quarantine_replicas","title":"quarantine_replicas","text":"<pre><code>quarantine_replicas(replicas, rse=None, rse_id=None)\n</code></pre> <p>Add quaratined replicas for RSE.</p> PARAMETER DESCRIPTION <code>replicas</code> <p>List of replica infos: {'scope':  (optional), 'name':  (optional), 'path': (required)}. <p> </p> <code>rse</code> <p>RSE name.</p> <p> DEFAULT: <code>None</code> </p> <code>rse_id</code> <p>RSE id. Either RSE name or RSE id must be specified, but not both</p> <p> DEFAULT: <code>None</code> </p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.declare_bad_file_replicas","title":"declare_bad_file_replicas","text":"<pre><code>declare_bad_file_replicas(replicas, reason, force=False)\n</code></pre> <p>Declare a list of bad replicas.</p> PARAMETER DESCRIPTION <code>replicas</code> <p>Either a list of PFNs (string) or a list of dicts {'scope': , 'name': , 'rse_id':  or 'rse': } <p> </p> <code>reason</code> <p>The reason of the loss.</p> <p> </p> <code>force</code> <p>boolean, tell the serrver to ignore existing replica status in the bad_replicas table. Default: False</p> <p> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <p>Dictionary {\"rse_name\": [\"did: error\",...]} - list of strings for DIDs failed to declare, by RSE</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.declare_bad_did_replicas","title":"declare_bad_did_replicas","text":"<pre><code>declare_bad_did_replicas(rse, dids, reason)\n</code></pre> <p>Declare a list of bad replicas.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE where the bad replicas reside</p> <p> </p> <code>dids</code> <p>The DIDs of the bad replicas</p> <p> </p> <code>reason</code> <p>The reason of the loss.</p> <p> </p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.declare_suspicious_file_replicas","title":"declare_suspicious_file_replicas","text":"<pre><code>declare_suspicious_file_replicas(pfns, reason)\n</code></pre> <p>Declare a list of bad replicas.</p> PARAMETER DESCRIPTION <code>pfns</code> <p>The list of PFNs.</p> <p> </p> <code>reason</code> <p>The reason of the loss.</p> <p> </p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.get_did_from_pfns","title":"get_did_from_pfns","text":"<pre><code>get_did_from_pfns(pfns, rse=None)\n</code></pre> <p>Get the DIDs associated to a PFN on one given RSE</p> PARAMETER DESCRIPTION <code>pfns</code> <p>The list of PFNs.</p> <p> </p> <code>rse</code> <p>The RSE name.</p> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <p>A list of dictionaries {pfn: {'scope': scope, 'name': name}}</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_replicas","title":"list_replicas","text":"<pre><code>list_replicas(\n    dids,\n    schemes=None,\n    ignore_availability=True,\n    all_states=False,\n    metalink=False,\n    rse_expression=None,\n    client_location=None,\n    sort=None,\n    domain=None,\n    signature_lifetime=None,\n    nrandom=None,\n    resolve_archives=True,\n    resolve_parents=False,\n    updated_after=None,\n)\n</code></pre> <p>List file replicas for a list of data identifiers (DIDs).</p> PARAMETER DESCRIPTION <code>dids</code> <p>The list of data identifiers (DIDs) like : [{'scope': , 'name': }, {'scope': , 'name': }, ...] <p> </p> <code>schemes</code> <p>A list of schemes to filter the replicas. (e.g. file, http, ...)</p> <p> DEFAULT: <code>None</code> </p> <code>ignore_availability</code> <p>Also include replicas from blocked RSEs into the list</p> <p> DEFAULT: <code>True</code> </p> <code>metalink</code> <p><code>False</code> (default) retrieves as JSON, <code>True</code> retrieves as metalink4+xml.</p> <p> DEFAULT: <code>False</code> </p> <code>rse_expression</code> <p>The RSE expression to restrict replicas on a set of RSEs.</p> <p> DEFAULT: <code>None</code> </p> <code>client_location</code> <p>Client location dictionary for PFN modification {'ip', 'fqdn', 'site', 'latitude', 'longitude'}</p> <p> DEFAULT: <code>None</code> </p> <code>sort</code> <p>Sort the replicas: <code>geoip</code> - based on src/dst IP topographical distance</p> <p> DEFAULT: <code>None</code> </p> <code>domain</code> <p>Define the domain. None is fallback to 'wan', otherwise 'wan, 'lan', or 'all'</p> <p> DEFAULT: <code>None</code> </p> <code>signature_lifetime</code> <p>If supported, in seconds, restrict the lifetime of the signed PFN.</p> <p> DEFAULT: <code>None</code> </p> <code>nrandom</code> <p>pick N random replicas. If the initial number of replicas is smaller than N, returns all replicas.</p> <p> DEFAULT: <code>None</code> </p> <code>resolve_archives</code> <p>When set to True, find archives which contain the replicas.</p> <p> DEFAULT: <code>True</code> </p> <code>resolve_parents</code> <p>When set to True, find all parent datasets which contain the replicas.</p> <p> DEFAULT: <code>False</code> </p> <code>updated_after</code> <p>epoch timestamp or datetime object (UTC time), only return replicas updated after this time</p> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <p>A list of dictionaries with replica information.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_suspicious_replicas","title":"list_suspicious_replicas","text":"<pre><code>list_suspicious_replicas(\n    rse_expression=None, younger_than=None, nattempts=None\n)\n</code></pre> <p>List file replicas tagged as suspicious.</p> PARAMETER DESCRIPTION <code>rse_expression</code> <p>The RSE expression to restrict replicas on a set of RSEs.</p> <p> DEFAULT: <code>None</code> </p> <code>younger_than</code> <p>Datetime object to select the replicas which were declared since younger_than date. Default value = 10 days ago.</p> <p> DEFAULT: <code>None</code> </p> <code>nattempts</code> <p>The minimum number of replica appearances in the bad_replica DB table from younger_than date. Default value = 0.</p> <p> DEFAULT: <code>None</code> </p> <code>state</code> <p>State of the replica, either 'BAD' or 'SUSPICIOUS'. No value returns replicas with either state.</p> <p> </p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.add_replica","title":"add_replica","text":"<pre><code>add_replica(\n    rse,\n    scope,\n    name,\n    bytes_,\n    adler32,\n    pfn=None,\n    md5=None,\n    meta=None,\n)\n</code></pre> <p>Add file replicas to a RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the RSE name.</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>The scope of the file.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The name of the file.</p> <p> TYPE: <code>str</code> </p> <code>bytes_</code> <p>The size in bytes.</p> <p> TYPE: <code>int</code> </p> <code>adler32</code> <p>adler32 checksum.</p> <p> TYPE: <code>str</code> </p> <code>pfn</code> <p>PFN of the file for non deterministic RSE.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>md5</code> <p>md5 checksum.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>meta</code> <p>Metadata attributes.</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if files were created successfully.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.add_replicas","title":"add_replicas","text":"<pre><code>add_replicas(rse, files, ignore_availability=True)\n</code></pre> <p>Bulk add file replicas to a RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the RSE name.</p> <p> </p> <code>files</code> <p>The list of files. This is a list of DIDs like : [{'scope': , 'name': }, {'scope': , 'name': }, ...] <p> </p> <code>ignore_availability</code> <p>Ignore the RSE blocklsit.</p> <p> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <p>True if files were created successfully.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.delete_replicas","title":"delete_replicas","text":"<pre><code>delete_replicas(rse, files, ignore_availability=True)\n</code></pre> <p>Bulk delete file replicas from a RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the RSE name.</p> <p> </p> <code>files</code> <p>The list of files. This is a list of DIDs like : [{'scope': , 'name': }, {'scope': , 'name': }, ...] <p> </p> <code>ignore_availability</code> <p>Ignore the RSE blocklist.</p> <p> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <p>True if files have been deleted successfully.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.update_replicas_states","title":"update_replicas_states","text":"<pre><code>update_replicas_states(rse, files)\n</code></pre> <p>Bulk update the file replicas states from a RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the RSE name.</p> <p> </p> <code>files</code> <p>The list of files. This is a list of DIDs like : [{'scope': , 'name': , 'state': }, {'scope': , 'name': , 'state': }, ...], where a state value can be either of: 'A' (AVAILABLE) 'U' (UNAVAILABLE) 'C' (COPYING) 'B' (BEING_DELETED) 'D' (BAD) 'T' (TEMPORARY_UNAVAILABLE) <p> </p> RETURNS DESCRIPTION <p>True if replica states have been updated successfully, otherwise an exception is raised.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_dataset_replicas","title":"list_dataset_replicas","text":"<pre><code>list_dataset_replicas(scope, name, deep=False)\n</code></pre> <p>List dataset replicas for a did (scope:name).</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope of the dataset.</p> <p> </p> <code>name</code> <p>The name of the dataset.</p> <p> </p> <code>deep</code> <p>Lookup at the file level.</p> <p> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <p>A list of dict dataset replicas.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_dataset_replicas_bulk","title":"list_dataset_replicas_bulk","text":"<pre><code>list_dataset_replicas_bulk(dids)\n</code></pre> <p>List dataset replicas for a did (scope:name).</p> PARAMETER DESCRIPTION <code>dids</code> <p>The list of DIDs of the datasets.</p> <p> </p> RETURNS DESCRIPTION <p>A list of dict dataset replicas.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_dataset_replicas_vp","title":"list_dataset_replicas_vp","text":"<pre><code>list_dataset_replicas_vp(scope, name, deep=False)\n</code></pre> <p>List dataset replicas for a DID (scope:name) using the Virtual Placement service.</p> <p>NOTICE: This is an RnD function and might change or go away at any time.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope of the dataset.</p> <p> </p> <code>name</code> <p>The name of the dataset.</p> <p> </p> <code>deep</code> <p>Lookup at the file level.</p> <p> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <p>If VP exists a list of dicts of sites</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_datasets_per_rse","title":"list_datasets_per_rse","text":"<pre><code>list_datasets_per_rse(rse, filters=None, limit=None)\n</code></pre> <p>List datasets at a RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the rse name.</p> <p> </p> <code>filters</code> <p>dictionary of attributes by which the results should be filtered.</p> <p> DEFAULT: <code>None</code> </p> <code>limit</code> <p>limit number.</p> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <p>A list of dict dataset replicas.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.add_bad_pfns","title":"add_bad_pfns","text":"<pre><code>add_bad_pfns(pfns, reason, state, expires_at)\n</code></pre> <p>Declare a list of bad replicas.</p> PARAMETER DESCRIPTION <code>pfns</code> <p>The list of PFNs.</p> <p> </p> <code>reason</code> <p>The reason of the loss.</p> <p> </p> <code>state</code> <p>The state of the replica. Either BAD, SUSPICIOUS, TEMPORARY_UNAVAILABLE</p> <p> </p> <code>expires_at</code> <p>Specify a timeout for the TEMPORARY_UNAVAILABLE replicas. None for BAD files.</p> <p> </p> RETURNS DESCRIPTION <p>True if PFNs were created successfully.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.set_tombstone","title":"set_tombstone","text":"<pre><code>set_tombstone(replicas)\n</code></pre> <p>Set a tombstone on a list of replicas.</p> PARAMETER DESCRIPTION <code>replicas</code> <p>list of replicas.</p> <p> </p>"},{"location":"replicaclient.html#rucio.client.replicaclient-functions","title":"Functions","text":""},{"location":"requestclient.html","title":"Requestclient","text":""},{"location":"requestclient.html#rucio.client.requestclient-classes","title":"Classes","text":""},{"location":"requestclient.html#rucio.client.requestclient.RequestClient","title":"RequestClient","text":"<pre><code>RequestClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient-functions","title":"Functions","text":""},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.list_requests","title":"list_requests","text":"<pre><code>list_requests(src_rse, dst_rse, request_states)\n</code></pre> <p>Return latest request details</p> RETURNS DESCRIPTION <code>Iterator[dict[str, Any]]</code> <p>request information</p>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.list_requests_history","title":"list_requests_history","text":"<pre><code>list_requests_history(\n    src_rse, dst_rse, request_states, offset=0, limit=100\n)\n</code></pre> <p>Return historical request details</p> RETURNS DESCRIPTION <code>Iterator[dict[str, Any]]</code> <p>request information</p>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.list_request_by_did","title":"list_request_by_did","text":"<pre><code>list_request_by_did(name, rse, scope=None)\n</code></pre> <p>Return latest request details for a DID</p> PARAMETER DESCRIPTION <code>name</code> <p>DID</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>Destination RSE name</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>rucio scope, defaults to None</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Iterator[dict[str, Any]]</code> <p>request information</p> RAISES DESCRIPTION <code>exc_cls</code> <p>from BaseClient._get_exception</p>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.list_request_history_by_did","title":"list_request_history_by_did","text":"<pre><code>list_request_history_by_did(name, rse, scope=None)\n</code></pre> <p>Return latest request details for a DID</p> PARAMETER DESCRIPTION <code>name</code> <p>DID</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>Destination RSE name</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>rucio scope, defaults to None</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Iterator[dict[str, Any]]</code> <p>request information</p> RAISES DESCRIPTION <code>exc_cls</code> <p>from BaseClient._get_exception</p>"},{"location":"requestclient.html#rucio.client.requestclient-functions","title":"Functions","text":""},{"location":"richclient.html","title":"Richclient","text":""},{"location":"richclient.html#rucio.client.richclient-classes","title":"Classes","text":""},{"location":"richclient.html#rucio.client.richclient.CLITheme","title":"CLITheme","text":"<p>Class to define styles for Rich widgets and prints in the CLI.</p>"},{"location":"richclient.html#rucio.client.richclient-functions","title":"Functions","text":""},{"location":"richclient.html#rucio.client.richclient.setup_rich_logger","title":"setup_rich_logger","text":"<pre><code>setup_rich_logger(\n    module_name=None,\n    logger_name=None,\n    logger_level=None,\n    verbose=False,\n    console=None,\n)\n</code></pre> <p>Factory method to set logger with RichHandler.</p> <p>The function is a copy of the method in rucio.common.utils setup_logger() with minor changes.</p> PARAMETER DESCRIPTION <code>module_name</code> <p>name of the module that is calling this method</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>logger_name</code> <p>name of the logger, typically name of the module.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>logger_level</code> <p>if not given, fetched from config.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>verbose</code> <p>verbose option set in bin/rucio</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>console</code> <p>Rich console object</p> <p> TYPE: <code>Optional[Console]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Logger</code> <p>logger with RichHandler</p>"},{"location":"richclient.html#rucio.client.richclient._format_value","title":"_format_value","text":"<pre><code>_format_value(value=None)\n</code></pre> <p>Formats the value based on its type for Rich Table.</p> <p>A helper function to format the value to Rich RenderableType.</p> PARAMETER DESCRIPTION <code>value</code> <p>value to format</p> <p> TYPE: <code>Optional[Union[RenderableType, int, float, bool, datetime]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>RenderableType</code> <p>formatted value</p>"},{"location":"richclient.html#rucio.client.richclient.generate_table","title":"generate_table","text":"<pre><code>generate_table(\n    rows,\n    headers=None,\n    row_styles=None,\n    col_alignments=None,\n    table_format=CLITheme.TABLE_FMT,\n)\n</code></pre> <p>Generates a Rich Table object from given input rows.</p> <p>The elements in each row can be either plain strings or Rich renderable objects. Passing strings will display them as simple text, while using Rich objects allows you to introduce additional structure, styling, and widgets (e.g. Text, Trees) into the table. Strings with style markup will be rendered as styled text.</p> PARAMETER DESCRIPTION <code>table_format</code> <p>style of the table</p> <p> TYPE: <code>Box</code> DEFAULT: <code>TABLE_FMT</code> </p> <code>headers</code> <p>list of headers</p> <p> TYPE: <code>Optional[Sequence[RenderableType]]</code> DEFAULT: <code>None</code> </p> <code>rows</code> <p>list of rows</p> <p> TYPE: <code>Sequence[Sequence[Union[RenderableType, int, float, bool, datetime]]]</code> </p> <code>col_alignments</code> <p>list of column alignments</p> <p> TYPE: <code>Optional[list[JustifyMethod]]</code> DEFAULT: <code>None</code> </p> <code>row_styles</code> <p>list of row styles</p> <p> TYPE: <code>Optional[Sequence[StyleType]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Table</code> <p>a Rich Table object</p>"},{"location":"richclient.html#rucio.client.richclient.print_output","title":"print_output","text":"<pre><code>print_output(*output, console, no_pager=False)\n</code></pre> <p>Prints the objects using the specified Rich console object. Optionally disables the pager if specified.</p> <p>The function works similarly to Rich's <code>console.print()</code> method but provides additional control over the pager feature.</p> PARAMETER DESCRIPTION <code>output</code> <p>objects to print to the terminal</p> <p> TYPE: <code>Any</code> DEFAULT: <code>()</code> </p> <code>console</code> <p>Rich console object</p> <p> TYPE: <code>Console</code> </p> <code>no_pager</code> <p>flag to disable the pager</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"richclient.html#rucio.client.richclient.get_cli_config","title":"get_cli_config","text":"<pre><code>get_cli_config()\n</code></pre> <p>Returns the CLI type from the config file.</p> RETURNS DESCRIPTION <code>str</code> <p>CLI type (Rich or tabulate)</p>"},{"location":"richclient.html#rucio.client.richclient.get_pager","title":"get_pager","text":"<pre><code>get_pager()\n</code></pre> <p>Returns the pager function based on the terminal availability.</p> RETURNS DESCRIPTION <code>Callable[[str], None]</code> <p>pager</p>"},{"location":"rseclient.html","title":"Rseclient","text":""},{"location":"rseclient.html#rucio.client.rseclient-classes","title":"Classes","text":""},{"location":"rseclient.html#rucio.client.rseclient.RSEClient","title":"RSEClient","text":"<pre><code>RSEClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>RSE client class for working with rucio RSEs</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient-functions","title":"Functions","text":""},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_rse","title":"get_rse","text":"<pre><code>get_rse(rse)\n</code></pre> <p>Returns details about the referred RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>Name of the referred RSE</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>A dict containing all attributes of the referred RSE</p> RAISES DESCRIPTION <code>RSENotFound</code> <p>if the referred RSE was not found in the database</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_rse","title":"add_rse","text":"<pre><code>add_rse(rse, **kwargs)\n</code></pre> <p>Sends the request to create a new RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the name of the rse.</p> <p> TYPE: <code>str</code> </p> <code>deterministic</code> <p>Boolean to know if the pfn is generated deterministically.</p> <p> </p> <code>volatile</code> <p>Boolean for RSE cache.</p> <p> </p> <code>city</code> <p>City for the RSE.</p> <p> </p> <code>region_code</code> <p>The region code for the RSE.</p> <p> </p> <code>country_name</code> <p>The country.</p> <p> </p> <code>continent</code> <p>The continent.</p> <p> </p> <code>time_zone</code> <p>Timezone.</p> <p> </p> <code>staging_area</code> <p>Staging area.</p> <p> </p> <code>ISP</code> <p>Internet service provider.</p> <p> </p> <code>rse_type</code> <p>RSE type.</p> <p> </p> <code>latitude</code> <p>Latitude coordinate of RSE.</p> <p> </p> <code>longitude</code> <p>Longitude coordinate of RSE.</p> <p> </p> <code>ASN</code> <p>Access service network.</p> <p> </p> <code>availability</code> <p>Availability.</p> <p> </p> RETURNS DESCRIPTION <code>Literal[True]</code> <p>True if location was created successfully else False.</p> RAISES DESCRIPTION <code>Duplicate</code> <p>if rse already exists.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.update_rse","title":"update_rse","text":"<pre><code>update_rse(rse, parameters)\n</code></pre> <p>Update RSE properties like availability or name.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the name of the new rse.</p> <p> TYPE: <code>str</code> </p> <code>parameters</code> <p>A dictionary with property (name, read, write, delete as keys).</p> <p> </p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_rse","title":"delete_rse","text":"<pre><code>delete_rse(rse)\n</code></pre> <p>Sends the request to delete a rse.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the name of the rse.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Literal[True]</code> <p>True if location was created successfully else False.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.list_rses","title":"list_rses","text":"<pre><code>list_rses(rse_expression=None)\n</code></pre> <p>Sends the request to list all rucio locations(RSEs).</p> <p>:rse_expression: RSE Expression to use as filter.</p> RETURNS DESCRIPTION <code>Iterator[dict[str, Any]]</code> <p>a list containing the names of all rucio locations.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_rse_attribute","title":"add_rse_attribute","text":"<pre><code>add_rse_attribute(rse, key, value)\n</code></pre> <p>Sends the request to add a RSE attribute.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the name of the rse.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>the attribute key.</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>the attribute value.</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>Literal[True]</code> <p>True if RSE attribute was created successfully else False.</p> RAISES DESCRIPTION <code>Duplicate</code> <p>if RSE attribute already exists.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_rse_attribute","title":"delete_rse_attribute","text":"<pre><code>delete_rse_attribute(rse, key)\n</code></pre> <p>Sends the request to delete a RSE attribute.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the RSE name.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>the attribute key.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Literal[True]</code> <p>True if RSE attribute was deleted successfully else False.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.list_rse_attributes","title":"list_rse_attributes","text":"<pre><code>list_rse_attributes(rse)\n</code></pre> <p>Sends the request to get RSE attributes.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>A <code>dict</code> with the RSE attribute name/value pairs.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_protocol","title":"add_protocol","text":"<pre><code>add_protocol(rse, params)\n</code></pre> <p>Sends the request to create a new protocol for the given RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the name of the  rse.</p> <p> TYPE: <code>str</code> </p> <code>scheme</code> <p>identifier of this protocol</p> <p> </p> <code>params</code> <p>Attributes of the protocol. Supported are: hostname:       hostname for this protocol (default = localhost) port:           port for this protocol (default = 0) prefix:         string used as a prfeix for this protocol when generating the PFN (default = None) impl:           qualified name of the implementation class for this protocol (mandatory) read:           integer representing the priority of this procotol for read operations (default = -1) write:          integer representing the priority of this procotol for write operations (default = -1) delete:         integer representing the priority of this procotol for delete operations (default = -1) extended_attributes:  miscellaneous protocol specific information e.g. spacetoken for SRM (default = None)</p> <p> TYPE: <code>dict[str, Any]</code> </p> RETURNS DESCRIPTION <code>Literal[True]</code> <p>True if protocol was created successfully else False.</p> RAISES DESCRIPTION <code>Duplicate</code> <p>if protocol with same hostname, port and protocol identifier already exists for the given RSE.</p> <code>RSENotFound</code> <p>if the RSE doesn't exist.</p> <code>KeyNotFound</code> <p>if params is missing manadtory attributes to create the protocol.</p> <code>AccessDenied</code> <p>if not authorized.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_protocols","title":"get_protocols","text":"<pre><code>get_protocols(\n    rse,\n    protocol_domain=\"ALL\",\n    operation=None,\n    default=False,\n    scheme=None,\n)\n</code></pre> <p>Returns protocol information. Parameter combinations are: (operation OR default) XOR protocol.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the RSE name.</p> <p> TYPE: <code>str</code> </p> <code>protocol_domain</code> <p>The scope of the protocol. Supported are 'LAN', 'WAN', and 'ALL' (as default).</p> <p> TYPE: <code>RSE_SUPPORTED_PROTOCOL_DOMAINS_LITERAL</code> DEFAULT: <code>'ALL'</code> </p> <code>operation</code> <p>The name of the requested operation (read, write, or delete). If None, all operations are queried.</p> <p> TYPE: <code>Optional[RSE_ALL_SUPPORTED_PROTOCOL_OPERATIONS_LITERAL]</code> DEFAULT: <code>None</code> </p> <code>default</code> <p>Indicates if only the default operations should be returned.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>scheme</code> <p>The identifier of the requested protocol.</p> <p> TYPE: <code>Optional[SUPPORTED_PROTOCOLS_LITERAL]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>A dict with details about each matching protocol.</p> RAISES DESCRIPTION <code>RSENotFound</code> <p>if the RSE doesn't exist.</p> <code>RSEProtocolNotSupported</code> <p>if no matching protocol entry could be found.</p> <code>RSEOperationNotSupported</code> <p>if no matching protocol entry for the requested operation could be found.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.lfns2pfns","title":"lfns2pfns","text":"<pre><code>lfns2pfns(\n    rse,\n    lfns,\n    protocol_domain=\"ALL\",\n    operation=None,\n    scheme=None,\n)\n</code></pre> <p>Returns PFNs that should be used at a RSE, corresponding to requested LFNs. The PFNs are generated for the RSE regardless of whether a replica exists for the LFN.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the RSE name</p> <p> TYPE: <code>str</code> </p> <code>lfns</code> <p>A list of LFN strings to translate to PFNs.</p> <p> TYPE: <code>Iterable[str]</code> </p> <code>protocol_domain</code> <p>The scope of the protocol. Supported are 'LAN', 'WAN', and 'ALL' (as default).</p> <p> TYPE: <code>RSE_SUPPORTED_PROTOCOL_DOMAINS_LITERAL</code> DEFAULT: <code>'ALL'</code> </p> <code>operation</code> <p>The name of the requested operation (read, write, or delete). If None, all operations are queried.</p> <p> TYPE: <code>Optional[RSE_ALL_SUPPORTED_PROTOCOL_OPERATIONS_LITERAL]</code> DEFAULT: <code>None</code> </p> <code>scheme</code> <p>The identifier of the requested protocol (gsiftp, https, davs, etc).</p> <p> TYPE: <code>Optional[SUPPORTED_PROTOCOLS_LITERAL]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict[str, str]</code> <p>A dictionary of LFN / PFN pairs.</p> RAISES DESCRIPTION <code>RSENotFound</code> <p>if the RSE doesn't exist.</p> <code>RSEProtocolNotSupported</code> <p>if no matching protocol entry could be found.</p> <code>RSEOperationNotSupported</code> <p>if no matching protocol entry for the requested operation could be found.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_protocols","title":"delete_protocols","text":"<pre><code>delete_protocols(rse, scheme, hostname=None, port=None)\n</code></pre> <p>Deletes matching protocols from RSE. Protocols using the same identifier can be distinguished by hostname and port.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the RSE name.</p> <p> TYPE: <code>str</code> </p> <code>scheme</code> <p>identifier of the protocol.</p> <p> TYPE: <code>SUPPORTED_PROTOCOLS_LITERAL</code> </p> <code>hostname</code> <p>hostname of the protocol.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>port</code> <p>port of the protocol.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Literal[True]</code> <p>True if success.</p> RAISES DESCRIPTION <code>RSEProtocolNotSupported</code> <p>if no matching protocol entry could be found.</p> <code>RSENotFound</code> <p>if the RSE doesn't exist.</p> <code>AccessDenied</code> <p>if not authorized.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.update_protocols","title":"update_protocols","text":"<pre><code>update_protocols(\n    rse, scheme, data, hostname=None, port=None\n)\n</code></pre> <p>Updates matching protocols from RSE. Protocol using the same identifier can be distinguished by hostname and port.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the RSE name.</p> <p> TYPE: <code>str</code> </p> <code>scheme</code> <p>identifier of the protocol.</p> <p> TYPE: <code>SUPPORTED_PROTOCOLS_LITERAL</code> </p> <code>data</code> <p>A dict providing the new values of the protocol attributes. Keys must match column names in database.</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>hostname</code> <p>hostname of the protocol.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>port</code> <p>port of the protocol.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <p>True if success.</p> RAISES DESCRIPTION <code>RSEProtocolNotSupported</code> <p>if no matching protocol entry could be found.</p> <code>RSENotFound</code> <p>if the RSE doesn't exist.</p> <code>KeyNotFound</code> <p>if invalid data was provided for update.</p> <code>AccessDenied</code> <p>if not authorized.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.swap_protocols","title":"swap_protocols","text":"<pre><code>swap_protocols(rse, domain, operation, scheme_a, scheme_b)\n</code></pre> <p>Swaps the priorities of the provided operation.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the RSE name.</p> <p> TYPE: <code>str</code> </p> <code>domain</code> <p>the domain in which priorities should be swapped i.e. wan or lan.</p> <p> TYPE: <code>RSE_SUPPORTED_PROTOCOL_DOMAINS_LITERAL</code> </p> <code>operation</code> <p>the operation that should be swapped i.e. read, write, or delete.</p> <p> TYPE: <code>RSE_ALL_SUPPORTED_PROTOCOL_OPERATIONS_LITERAL</code> </p> <code>scheme_a</code> <p>the scheme of one of the two protocols to be swapped, e.g. srm.</p> <p> TYPE: <code>SUPPORTED_PROTOCOLS_LITERAL</code> </p> <code>scheme_b</code> <p>the scheme of the other of the two protocols to be swapped, e.g. http.</p> <p> TYPE: <code>SUPPORTED_PROTOCOLS_LITERAL</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if success.</p> RAISES DESCRIPTION <code>RSEProtocolNotSupported</code> <p>if no matching protocol entry could be found.</p> <code>RSENotFound</code> <p>if the RSE doesn't exist.</p> <code>KeyNotFound</code> <p>if invalid data was provided for update.</p> <code>AccessDenied</code> <p>if not authorized.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_qos_policy","title":"add_qos_policy","text":"<pre><code>add_qos_policy(rse, qos_policy)\n</code></pre> <p>Add a QoS policy from an RSE.</p> PARAMETER DESCRIPTION <code>rse_id</code> <p>The id of the RSE.</p> <p> </p> <code>qos_policy</code> <p>The QoS policy to add.</p> <p> TYPE: <code>str</code> </p> <code>session</code> <p>The database session in use.</p> <p> </p> RETURNS DESCRIPTION <code>Literal[True]</code> <p>True if successful, except otherwise.</p> RAISES DESCRIPTION <code>Duplicate</code> <p>If the QoS policy already exists.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_qos_policy","title":"delete_qos_policy","text":"<pre><code>delete_qos_policy(rse, qos_policy)\n</code></pre> <p>Delete a QoS policy from an RSE.</p> PARAMETER DESCRIPTION <code>rse_id</code> <p>The id of the RSE.</p> <p> </p> <code>qos_policy</code> <p>The QoS policy to delete.</p> <p> TYPE: <code>str</code> </p> <code>session</code> <p>The database session in use.</p> <p> </p> RETURNS DESCRIPTION <code>Literal[True]</code> <p>True if successful, silent failure if QoS policy does not exist.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.list_qos_policies","title":"list_qos_policies","text":"<pre><code>list_qos_policies(rse)\n</code></pre> <p>List all QoS policies of an RSE.</p> PARAMETER DESCRIPTION <code>rse_id</code> <p>The id of the RSE.</p> <p> </p> <code>session</code> <p>The database session in use.</p> <p> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>List containing all QoS policies.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.set_rse_usage","title":"set_rse_usage","text":"<pre><code>set_rse_usage(rse, source, used, free, files=None)\n</code></pre> <p>Set RSE usage information.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the RSE name.</p> <p> TYPE: <code>str</code> </p> <code>source</code> <p>the information source, e.g. srm.</p> <p> TYPE: <code>str</code> </p> <code>used</code> <p>the used space in bytes.</p> <p> TYPE: <code>int</code> </p> <code>free</code> <p>the free in bytes.</p> <p> TYPE: <code>int</code> </p> <code>files</code> <p>the number of files</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Literal[True]</code> <p>True if successful</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_rse_usage","title":"get_rse_usage","text":"<pre><code>get_rse_usage(rse, filters=None)\n</code></pre> <p>Get RSE usage information.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the RSE name.</p> <p> TYPE: <code>str</code> </p> <code>filters</code> <p>dictionary of attributes by which the results should be filtered</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Iterator[dict[str, Any]]</code> <p>True if successful, otherwise false.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.list_rse_usage_history","title":"list_rse_usage_history","text":"<pre><code>list_rse_usage_history(rse, filters=None)\n</code></pre> <p>List RSE usage history information.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> <code>filters</code> <p>dictionary of attributes by which the results should be filtered.</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Iterator[dict[str, Any]]</code> <p>list of dictionaries.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.set_rse_limits","title":"set_rse_limits","text":"<pre><code>set_rse_limits(rse, name, value)\n</code></pre> <p>Set RSE limit information.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The name of the limit.</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The feature value.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>Literal[True]</code> <p>True if successful</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_rse_limits","title":"get_rse_limits","text":"<pre><code>get_rse_limits(rse)\n</code></pre> <p>Get RSE limits.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Iterator[dict[str, Union[str, int]]]</code> <p>An iterator of RSE limits as dicts with 'name' and 'value' as keys.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_rse_limits","title":"delete_rse_limits","text":"<pre><code>delete_rse_limits(rse, name)\n</code></pre> <p>Delete RSE limit information.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The name of the limit.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Literal[True]</code> <p>True if successful</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_distance","title":"add_distance","text":"<pre><code>add_distance(source, destination, parameters)\n</code></pre> <p>Add a src-dest distance.</p> PARAMETER DESCRIPTION <code>source</code> <p>The source.</p> <p> TYPE: <code>str</code> </p> <code>destination</code> <p>The destination.</p> <p> TYPE: <code>str</code> </p> <code>parameters</code> <p>A dictionary with property.</p> <p> TYPE: <code>dict[str, int]</code> </p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.update_distance","title":"update_distance","text":"<pre><code>update_distance(source, destination, parameters)\n</code></pre> <p>Update distances with the given RSE ids.</p> PARAMETER DESCRIPTION <code>source</code> <p>The source.</p> <p> TYPE: <code>str</code> </p> <code>destination</code> <p>The destination.</p> <p> TYPE: <code>str</code> </p> <code>parameters</code> <p>A dictionary with property.</p> <p> TYPE: <code>dict[str, int]</code> </p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_distance","title":"get_distance","text":"<pre><code>get_distance(source, destination)\n</code></pre> <p>Get distances between rses.</p> PARAMETER DESCRIPTION <code>source</code> <p>The source RSE.</p> <p> TYPE: <code>str</code> </p> <code>destination</code> <p>The destination RSE.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>list[dict[str, Union[str, int]]]</code> <p>List of dictionaries.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_distance","title":"delete_distance","text":"<pre><code>delete_distance(source, destination)\n</code></pre> <p>Delete distances with the given RSE ids.</p> PARAMETER DESCRIPTION <code>source</code> <p>The source.</p> <p> TYPE: <code>str</code> </p> <code>destination</code> <p>The destination.</p> <p> TYPE: <code>str</code> </p>"},{"location":"rseclient.html#rucio.client.rseclient-functions","title":"Functions","text":""},{"location":"ruleclient.html","title":"Ruleclient","text":""},{"location":"ruleclient.html#rucio.client.ruleclient-classes","title":"Classes","text":""},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient","title":"RuleClient","text":"<pre><code>RuleClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>RuleClient class for working with replication rules</p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient-functions","title":"Functions","text":""},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.add_replication_rule","title":"add_replication_rule","text":"<pre><code>add_replication_rule(\n    dids,\n    copies,\n    rse_expression,\n    priority=3,\n    lifetime=None,\n    grouping=\"DATASET\",\n    notify=\"N\",\n    source_replica_expression=None,\n    activity=None,\n    account=None,\n    meta=None,\n    ignore_availability=False,\n    purge_replicas=False,\n    ask_approval=False,\n    asynchronous=False,\n    locked=False,\n    delay_injection=None,\n    comment=None,\n    weight=None,\n)\n</code></pre> PARAMETER DESCRIPTION <code>dids</code> <p>The data identifier set.</p> <p> TYPE: <code>Sequence[dict[str, str]]</code> </p> <code>copies</code> <p>The number of replicas.</p> <p> TYPE: <code>int</code> </p> <code>rse_expression</code> <p>Boolean string expression to give the list of RSEs.</p> <p> TYPE: <code>str</code> </p> <code>priority</code> <p>Priority of the transfers.</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>lifetime</code> <p>The lifetime of the replication rules (in seconds).</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>grouping</code> <p>ALL -  All files will be replicated to the same RSE. DATASET - All files in the same dataset will be replicated to the same RSE. NONE - Files will be completely spread over all allowed RSEs without any grouping considerations at all.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'DATASET'</code> </p> <code>notify</code> <p>Notification setting for the rule (Y, N, C).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'N'</code> </p> <code>source_replica_expression</code> <p>RSE Expression for RSEs to be considered for source replicas.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>activity</code> <p>Transfer Activity to be passed to FTS.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>account</code> <p>The account owning the rule.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>meta</code> <p>Metadata, as dictionary.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>ignore_availability</code> <p>Option to ignore the availability of RSEs.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>purge_replicas</code> <p>When the rule gets deleted purge the associated replicas immediately.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>ask_approval</code> <p>Ask for approval of this replication rule.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>asynchronous</code> <p>Create rule asynchronously by judge-injector.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>locked</code> <p>If the rule is locked, it cannot be deleted.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>delay_injection</code> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>comment</code> <p>Comment about the rule.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>weight</code> <p>If the weighting option of the replication rule is used, the choice of RSEs takes their weight into account.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.delete_replication_rule","title":"delete_replication_rule","text":"<pre><code>delete_replication_rule(rule_id, purge_replicas=None)\n</code></pre> <p>Deletes a replication rule and all associated locks.</p> PARAMETER DESCRIPTION <code>rule_id</code> <p>The id of the rule to be deleted</p> <p> TYPE: <code>str</code> </p> <code>purge_replicas</code> <p>Immediately delete the replicas.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.get_replication_rule","title":"get_replication_rule","text":"<pre><code>get_replication_rule(rule_id)\n</code></pre> <p>Get a replication rule.</p> PARAMETER DESCRIPTION <code>rule_id</code> <p>The id of the rule to be retrieved.</p> <p> TYPE: <code>str</code> </p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.update_replication_rule","title":"update_replication_rule","text":"<pre><code>update_replication_rule(rule_id, options)\n</code></pre> PARAMETER DESCRIPTION <code>rule_id</code> <p>The id of the rule to be retrieved.</p> <p> TYPE: <code>str</code> </p> <code>options</code> <p>Options dictionary.</p> <p> TYPE: <code>dict[str, Any]</code> </p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.reduce_replication_rule","title":"reduce_replication_rule","text":"<pre><code>reduce_replication_rule(\n    rule_id, copies, exclude_expression=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>rule_id</code> <p>Rule to be reduced.</p> <p> TYPE: <code>str</code> </p> <code>copies</code> <p>Number of copies of the new rule.</p> <p> TYPE: <code>int</code> </p> <code>exclude_expression</code> <p>RSE Expression of RSEs to exclude.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.move_replication_rule","title":"move_replication_rule","text":"<pre><code>move_replication_rule(rule_id, rse_expression, override)\n</code></pre> <p>Move a replication rule to another RSE and, once done, delete the original one.</p> PARAMETER DESCRIPTION <code>rule_id</code> <p>Rule to be moved.</p> <p> TYPE: <code>str</code> </p> <code>rse_expression</code> <p>RSE expression of the new rule.</p> <p> TYPE: <code>str</code> </p> <code>override</code> <p>Configurations to update for the new rule.</p> <p> TYPE: <code>Mapping[str, Any]</code> </p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.approve_replication_rule","title":"approve_replication_rule","text":"<pre><code>approve_replication_rule(rule_id)\n</code></pre> PARAMETER DESCRIPTION <code>rule_id</code> <p>Rule to be approved.</p> <p> TYPE: <code>str</code> </p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.deny_replication_rule","title":"deny_replication_rule","text":"<pre><code>deny_replication_rule(rule_id, reason=None)\n</code></pre> PARAMETER DESCRIPTION <code>rule_id</code> <p>Rule to be denied.</p> <p> TYPE: <code>str</code> </p> <code>reason</code> <p>Reason for denying the rule.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.list_replication_rule_full_history","title":"list_replication_rule_full_history","text":"<pre><code>list_replication_rule_full_history(scope, name)\n</code></pre> <p>List the rule history of a DID.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope of the DID.</p> <p> TYPE: <code>Union[str, bytes]</code> </p> <code>name</code> <p>The name of the DID.</p> <p> TYPE: <code>Union[str, bytes]</code> </p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.examine_replication_rule","title":"examine_replication_rule","text":"<pre><code>examine_replication_rule(rule_id)\n</code></pre> <p>Examine a replication rule for errors during transfer.</p> PARAMETER DESCRIPTION <code>rule_id</code> <p>Rule to be denied.</p> <p> TYPE: <code>str</code> </p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.list_replica_locks","title":"list_replica_locks","text":"<pre><code>list_replica_locks(rule_id)\n</code></pre> <p>List details of all replica locks for a rule.</p> PARAMETER DESCRIPTION <code>rule_id</code> <p>Rule to be denied.</p> <p> TYPE: <code>str</code> </p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.list_replication_rules","title":"list_replication_rules","text":"<pre><code>list_replication_rules(filters=None)\n</code></pre> <p>List all replication rules which match a filter</p> PARAMETER DESCRIPTION <code>filters</code> <p>dictionary of attributes by which the rules should be filtered</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Iterator[dict[str, Any]]</code> <p>True if successful, otherwise false.</p>"},{"location":"ruleclient.html#rucio.client.ruleclient-functions","title":"Functions","text":""},{"location":"scopeclient.html","title":"Scopeclient","text":""},{"location":"scopeclient.html#rucio.client.scopeclient-classes","title":"Classes","text":""},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient","title":"ScopeClient","text":"<pre><code>ScopeClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Scope client class for working with rucio scopes</p>"},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient-functions","title":"Functions","text":""},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient.add_scope","title":"add_scope","text":"<pre><code>add_scope(account, scope)\n</code></pre> <p>Sends the request to add a new scope.</p> PARAMETER DESCRIPTION <code>account</code> <p>the name of the account to add the scope to.</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>the name of the new scope.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if scope was created successfully.</p> RAISES DESCRIPTION <code>Duplicate</code> <p>if scope already exists.</p> <code>AccountNotFound</code> <p>if account doesn't exist.</p>"},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient.list_scopes","title":"list_scopes","text":"<pre><code>list_scopes()\n</code></pre> <p>Sends the request to list all scopes.</p> RETURNS DESCRIPTION <code>list[str]</code> <p>a list containing the names of all scopes.</p>"},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient.list_scopes_for_account","title":"list_scopes_for_account","text":"<pre><code>list_scopes_for_account(account)\n</code></pre> <p>Sends the request to list all scopes for a rucio account.</p> PARAMETER DESCRIPTION <code>account</code> <p>the rucio account to list scopes for.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>a list containing the names of all scopes for a rucio account.</p> RAISES DESCRIPTION <code>AccountNotFound</code> <p>if account doesn't exist.</p> <code>ScopeNotFound</code> <p>if no scopes exist for account.</p>"},{"location":"scopeclient.html#rucio.client.scopeclient-functions","title":"Functions","text":""},{"location":"subscriptionclient.html","title":"Subscriptionclient","text":""},{"location":"subscriptionclient.html#rucio.client.subscriptionclient-classes","title":"Classes","text":""},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient","title":"SubscriptionClient","text":"<pre><code>SubscriptionClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>SubscriptionClient class for working with subscriptions</p>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient-functions","title":"Functions","text":""},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient.add_subscription","title":"add_subscription","text":"<pre><code>add_subscription(\n    name,\n    account,\n    filter_,\n    replication_rules,\n    comments,\n    lifetime,\n    retroactive,\n    dry_run,\n    priority=3,\n)\n</code></pre> <p>Adds a new subscription which will be verified against every new added file and dataset</p> PARAMETER DESCRIPTION <code>name</code> <p>Name of the subscription</p> <p> TYPE: <code>str</code> </p> <code>account</code> <p>Account identifier</p> <p> TYPE: <code>str</code> </p> <code>filter_</code> <p>Dictionary of attributes by which the input data should be filtered Example: <code>{'dsn': 'data11_hi*.express_express.*,data11_hi*physics_MinBiasOverlay*', 'account': 'tzero'}</code></p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>replication_rules</code> <p>Replication rules to be set : Dictionary with keys copies, rse_expression, weight, rse_expression</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>comments</code> <p>Comments for the subscription</p> <p> TYPE: <code>str</code> </p> <code>lifetime</code> <p>Subscription's lifetime (days); False if subscription has no lifetime</p> <p> TYPE: <code>Union[int, Literal[False]]</code> </p> <code>retroactive</code> <p>Flag to know if the subscription should be applied on previous data</p> <p> TYPE: <code>bool</code> </p> <code>dry_run</code> <p>Just print the subscriptions actions without actually executing them (Useful if retroactive flag is set)</p> <p> TYPE: <code>bool</code> </p> <code>priority</code> <p>The priority of the subscription (3 by default)</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient.list_subscriptions","title":"list_subscriptions","text":"<pre><code>list_subscriptions(name=None, account=None)\n</code></pre> <p>Returns a dictionary with the subscription information : Examples: <code>{'status': 'INACTIVE/ACTIVE/BROKEN', 'last_modified_date': ...}</code></p> PARAMETER DESCRIPTION <code>name</code> <p>Name of the subscription</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>account</code> <p>Account identifier</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Union[Iterator[dict[str, Any]], list]</code> <p>Dictionary containing subscription parameter</p>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient.update_subscription","title":"update_subscription","text":"<pre><code>update_subscription(\n    name,\n    account=None,\n    filter_=None,\n    replication_rules=None,\n    comments=None,\n    lifetime=None,\n    retroactive=None,\n    dry_run=None,\n    priority=None,\n)\n</code></pre> <p>Updates a subscription</p> PARAMETER DESCRIPTION <code>name</code> <p>Name of the subscription</p> <p> </p> <code>account</code> <p>Account identifier</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>filter_</code> <p>Dictionary of attributes by which the input data should be filtered Example: <code>{'dsn': 'data11_hi*.express_express.*,data11_hi*physics_MinBiasOverlay*', 'account': 'tzero'}</code></p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>replication_rules</code> <p>Replication rules to be set : Dictionary with keys copies, rse_expression, weight, rse_expression</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>comments</code> <p>Comments for the subscription</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>lifetime</code> <p>Subscription's lifetime (days); False if subscription has no lifetime</p> <p> TYPE: <code>Optional[Union[int, Literal[False]]]</code> DEFAULT: <code>None</code> </p> <code>retroactive</code> <p>Flag to know if the subscription should be applied on previous data</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>dry_run</code> <p>Just print the subscriptions actions without actually executing them (Useful if retroactive flag is set)</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>priority</code> <p>The priority of the subscription</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient.list_subscription_rules","title":"list_subscription_rules","text":"<pre><code>list_subscription_rules(account, name)\n</code></pre> <p>List the associated rules of a subscription.</p> PARAMETER DESCRIPTION <code>account</code> <p>Account of the subscription.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>Name of the subscription.</p> <p> TYPE: <code>str</code> </p>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient-functions","title":"Functions","text":""},{"location":"touchclient.html","title":"Touchclient","text":""},{"location":"touchclient.html#rucio.client.touchclient-classes","title":"Classes","text":""},{"location":"touchclient.html#rucio.client.touchclient.TouchClient","title":"TouchClient","text":"<pre><code>TouchClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Touch client class to send a trace that can be used to update accessed_at for file or dataset DIDs</p>"},{"location":"touchclient.html#rucio.client.touchclient.TouchClient-functions","title":"Functions","text":""},{"location":"touchclient.html#rucio.client.touchclient.TouchClient.touch","title":"touch","text":"<pre><code>touch(scope, name, rse=None)\n</code></pre> <p>Sends a touch trace for a given file or dataset.</p> PARAMETER DESCRIPTION <code>scope</code> <p>the scope of the file/dataset to update.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>the name of file/dataset to update.</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>optional parameter if a specific replica should be touched.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>DataIdentifierNotFound</code> <p>if given dids does not exist.</p> <code>RSENotFound</code> <p>if rse is not None and given rse does not exist.</p> <code>UnsupportedDIDType</code> <p>if type of the given DID is not FILE or DATASET.</p> <code>RucioException</code> <p>if trace could not be sent successfully.</p>"},{"location":"touchclient.html#rucio.client.touchclient-functions","title":"Functions","text":""},{"location":"uploadclient.html","title":"Uploadclient","text":""},{"location":"uploadclient.html#rucio.client.uploadclient-classes","title":"Classes","text":""},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient","title":"UploadClient","text":"<pre><code>UploadClient(_client=None, logger=None, tracing=True)\n</code></pre> <p>Initialises the basic settings for an UploadClient object</p> PARAMETER DESCRIPTION <code>_client</code> <ul> <li>Optional: rucio.client.client.Client object. If None, a new object will be created.</li> </ul> <p> TYPE: <code>Optional[Client]</code> DEFAULT: <code>None</code> </p> <code>logger</code> <ul> <li>Optional: logging.Logger object. If None, default logger will be used.</li> </ul> <p> TYPE: <code>Optional[LoggerFunction]</code> DEFAULT: <code>None</code> </p>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient-functions","title":"Functions","text":""},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient.upload","title":"upload","text":"<pre><code>upload(\n    items,\n    summary_file_path=None,\n    traces_copy_out=None,\n    ignore_availability=False,\n    activity=None,\n)\n</code></pre> PARAMETER DESCRIPTION <code>items</code> <p>List of dictionaries. Each dictionary describing a file to upload. Keys: path                  - path of the file that will be uploaded rse                   - rse expression/name (e.g. 'CERN-PROD_DATADISK') where to upload the file did_scope             - Optional: custom did scope (Default: user.) did_name              - Optional: custom did name (Default: name of the file) dataset_scope         - Optional: custom dataset scope dataset_name          - Optional: custom dataset name dataset_meta          - Optional: custom metadata for dataset impl                  - Optional: name of the protocol implementation to be used to upload this item. force_scheme          - Optional: force a specific scheme (if PFN upload this will be overwritten) (Default: None) pfn                   - Optional: use a given PFN (this sets no_register to True, and no_register becomes mandatory) no_register           - Optional: if True, the file will not be registered in the rucio catalogue register_after_upload - Optional: if True, the file will be registered after successful upload lifetime              - Optional: the lifetime of the file after it was uploaded transfer_timeout      - Optional: time after the upload will be aborted guid                  - Optional: guid of the file recursive             - Optional: if set, parses the folder structure recursively into collections <p> TYPE: <code>Iterable[FileToUploadDict]</code> </p> <code>summary_file_path</code> <p>Optional: a path where a summary in form of a json file will be stored</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>traces_copy_out</code> <p>reference to an external list, where the traces should be uploaded</p> <p> TYPE: <code>Optional[list[TraceBaseDict]]</code> DEFAULT: <code>None</code> </p> <code>ignore_availability</code> <p>ignore the availability of a RSE</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>activity</code> <p>the activity set to the rule if no dataset is specified</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>int</code> <p>0 on success</p> RAISES DESCRIPTION <code>InputValidationError</code> <p>if any input arguments are in a wrong format</p> <code>RSEWriteBlocked</code> <p>if a given RSE is not available for writing</p> <code>NoFilesUploaded</code> <p>if no files were successfully uploaded</p> <code>NotAllFilesUploaded</code> <p>if not all files were successfully uploaded</p>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient._register_file","title":"_register_file","text":"<pre><code>_register_file(\n    file,\n    registered_dataset_dids,\n    ignore_availability=False,\n    activity=None,\n)\n</code></pre> <p>Registers the given file in Rucio. Creates a dataset if needed. Registers the file DID and creates the replication rule if needed. Adds a replica to the file did. (This function is meant to be used as class internal only)</p> PARAMETER DESCRIPTION <code>file</code> <p>dictionary describing the file</p> <p> TYPE: <code>Mapping[str, Any]</code> </p> <code>registered_dataset_dids</code> <p>set of dataset dids that were already registered</p> <p> TYPE: <code>set[str]</code> </p> <code>ignore_availability</code> <p>ignore the availability of a RSE</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>activity</code> <p>the activity set to the rule if no dataset is specified</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>DataIdentifierAlreadyExists</code> <p>if file DID is already registered and the checksums do not match</p>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient._get_file_guid","title":"_get_file_guid","text":"<pre><code>_get_file_guid(file)\n</code></pre> <p>Get the guid of a file, trying different strategies (This function is meant to be used as class internal only)</p> PARAMETER DESCRIPTION <code>file</code> <p>dictionary describing the file</p> <p> TYPE: <code>Mapping[str, Any]</code> </p> RETURNS DESCRIPTION <code>str</code> <p>the guid</p>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient._collect_file_info","title":"_collect_file_info","text":"<pre><code>_collect_file_info(filepath, item)\n</code></pre> <p>Collects infos (e.g. size, checksums, etc.) about the file and returns them as a dictionary (This function is meant to be used as class internal only)</p> PARAMETER DESCRIPTION <code>filepath</code> <p>path where the file is stored</p> <p> TYPE: <code>PathTypeAlias</code> </p> <code>item</code> <p>input options for the given file</p> <p> TYPE: <code>FileToUploadDict</code> </p> RETURNS DESCRIPTION <code>FileToUploadWithCollectedInfoDict</code> <p>a dictionary containing all collected info and the input options</p>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient._collect_and_validate_file_info","title":"_collect_and_validate_file_info","text":"<pre><code>_collect_and_validate_file_info(items)\n</code></pre> <p>Checks if there are any inconsistencies within the given input options and stores the output of _collect_file_info for every file (This function is meant to be used as class internal only)</p> PARAMETER DESCRIPTION <code>filepath</code> <p>list of dictionaries with all input files and options</p> <p> </p> RETURNS DESCRIPTION <code>list[FileToUploadWithCollectedInfoDict]</code> <p>a list of dictionaries containing all descriptions of the files to upload</p> RAISES DESCRIPTION <code>InputValidationError</code> <p>if an input option has a wrong format</p>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient._convert_file_for_api","title":"_convert_file_for_api","text":"<pre><code>_convert_file_for_api(file)\n</code></pre> <p>Creates a new dictionary that contains only the values that are needed for the upload with the correct keys (This function is meant to be used as class internal only)</p> PARAMETER DESCRIPTION <code>file</code> <p>dictionary describing a file to upload</p> <p> TYPE: <code>Mapping[str, Any]</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dictionary containing not more then the needed values for the upload</p>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient._upload_item","title":"_upload_item","text":"<pre><code>_upload_item(\n    rse_settings,\n    rse_attributes,\n    lfn,\n    source_dir=None,\n    domain=\"wan\",\n    impl=None,\n    force_pfn=None,\n    force_scheme=None,\n    transfer_timeout=None,\n    delete_existing=False,\n    sign_service=None,\n)\n</code></pre> <p>Uploads a file to the connected storage.</p> PARAMETER DESCRIPTION <code>rse_settings</code> <p>dictionary containing the RSE settings</p> <p> TYPE: <code>RSESettingsDict</code> </p> <code>rse_attributes</code> <p>dictionary containing the RSE attribute key value pairs</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>lfn</code> <p>a single dict containing 'scope' and 'name'. Example: {'name': '1_rse_local_put.raw', 'scope': 'user.jdoe', 'filesize': 42, 'adler32': '87HS3J968JSNWID'} If the 'filename' key is present, it will be used by Rucio as the actual name of the file on disk (separate from the Rucio 'name').</p> <p> TYPE: <code>dict[str, Union[str, int]]</code> </p> <code>source_dir</code> <p>path to the local directory including the source files</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>force_pfn</code> <p>use the given PFN -- can lead to dark data, use sparingly</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>force_scheme</code> <p>use the given protocol scheme, overriding the protocol priority in the RSE description</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>transfer_timeout</code> <p>set this timeout (in seconds) for the transfers, for protocols that support it</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>sign_service</code> <p>use the given service (e.g. gcs, s3, swift) to sign the URL</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>RucioException(msg)</code> <p>general exception with msg for more details.</p>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient._retry_protocol_stat","title":"_retry_protocol_stat","text":"<pre><code>_retry_protocol_stat(protocol, pfn)\n</code></pre> <p>Try to stat file, on fail try again 1s, 2s, 4s, 8s, 16s, 32s later. Fail is all fail</p> PARAMETER DESCRIPTION <code>protocol</code> <p>The protocol to use to reach this file</p> <p> TYPE: <code>RSEProtocol</code> </p> <code>pfn</code> <p>Physical file name of the target for the protocol stat</p> <p> TYPE: <code>str</code> </p>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient._create_protocol","title":"_create_protocol","text":"<pre><code>_create_protocol(\n    rse_settings,\n    operation,\n    impl=None,\n    force_scheme=None,\n    domain=\"wan\",\n)\n</code></pre> <p>Protocol construction.</p> PARAMETER DESCRIPTION <code>rse_settings</code> <p>rse_settings</p> <p> TYPE: <code>RSESettingsDict</code> </p> <code>operation</code> <p>activity, e.g. read, write, delete etc.</p> <p> TYPE: <code>str</code> </p> <code>force_scheme</code> <p>custom scheme</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auth_token</code> <p>Optionally passing JSON Web Token (OIDC) string for authentication</p> <p> </p>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient._send_trace","title":"_send_trace","text":"<pre><code>_send_trace(trace)\n</code></pre> <p>Checks if sending trace is allowed and send the trace.</p> PARAMETER DESCRIPTION <code>trace</code> <p>the trace</p> <p> TYPE: <code>TraceDict</code> </p>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient._recursive","title":"_recursive","text":"<pre><code>_recursive(item)\n</code></pre> <p>If the --recursive flag is set, it replicates the folder structure recursively into collections A folder only can have either other folders inside or files, but not both of them     - If it has folders, the root folder will be a container     - If it has files, the root folder will be a dataset     - If it is empty, it does not create anything</p> PARAMETER DESCRIPTION <code>item</code> <p>dictionary containing all descriptions of the files to upload</p> <p> TYPE: <code>FileToUploadDict</code> </p>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient.preferred_impl","title":"preferred_impl","text":"<pre><code>preferred_impl(rse_settings, domain)\n</code></pre> <p>Finds the optimum protocol impl preferred by the client and supported by the remote RSE.</p> PARAMETER DESCRIPTION <code>rse_settings</code> <p>dictionary containing the RSE settings</p> <p> TYPE: <code>RSESettingsDict</code> </p> <code>domain</code> <p>The network domain, either 'wan' (default) or 'lan'</p> <p> TYPE: <code>str</code> </p> RAISES DESCRIPTION <code>RucioException(msg)</code> <p>general exception with msg for more details.</p>"},{"location":"uploadclient.html#rucio.client.uploadclient-functions","title":"Functions","text":""}]}