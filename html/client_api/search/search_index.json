{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"accountclient.html","title":"Accountclient","text":""},{"location":"accountclient.html#rucio.client.accountclient-classes","title":"Classes","text":""},{"location":"accountclient.html#rucio.client.accountclient.AccountClient","title":"AccountClient","text":"<pre><code>AccountClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Account client class for working with rucio accounts</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient-functions","title":"Functions","text":""},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.add_account","title":"add_account","text":"<pre><code>add_account(account, type_, email)\n</code></pre> <p>Sends the request to create a new account.</p> <p>:param account: the name of the account. :param type_: The account type :param email: The Email address associated with the account.</p> <p>:return: True if account was created successfully else False. :raises Duplicate: if account already exists.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.delete_account","title":"delete_account","text":"<pre><code>delete_account(account)\n</code></pre> <p>Sends the request to disable an account.</p> <p>:param account: the name of the account. :return: True is account was disabled successfully. False otherwise. :raises AccountNotFound: if account doesn't exist.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_account","title":"get_account","text":"<pre><code>get_account(account)\n</code></pre> <p>Sends the request to get information about a given account.</p> <p>:param account: the name of the account. :return: a list of attributes for the account. None if failure. :raises AccountNotFound: if account doesn't exist.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.update_account","title":"update_account","text":"<pre><code>update_account(account, key, value)\n</code></pre> <p>Update a property of an account.</p> <p>:param account: Name of the account. :param key: Account property like status. :param value: Property value.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.list_accounts","title":"list_accounts","text":"<pre><code>list_accounts(\n    account_type=None, identity=None, filters=None\n)\n</code></pre> <p>Sends the request to list all rucio accounts.</p> <p>:param type: The account type :param identity: The identity key name. For example x509 DN, or a username. :param filters: A dictionary key:account attribute to use for the filtering</p> <p>:return: a list containing account info dictionary for all rucio accounts. :raises AccountNotFound: if account doesn't exist.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.whoami","title":"whoami","text":"<pre><code>whoami()\n</code></pre> <p>Get information about account whose token is used</p> <p>:return: a list of attributes for the account. None if failure. :raises AccountNotFound: if account doesn't exist.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.add_identity","title":"add_identity","text":"<pre><code>add_identity(\n    account,\n    identity,\n    authtype,\n    email,\n    default=False,\n    password=None,\n)\n</code></pre> <p>Adds a membership association between identity and account.</p> <p>:param account: The account name. :param identity: The identity key name. For example x509 DN, or a username. :param authtype: The type of the authentication (x509, gss, userpass). :param default: If True, the account should be used by default with the provided identity. :param email: The Email address associated with the identity. :param password: Password if authtype is userpass.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.del_identity","title":"del_identity","text":"<pre><code>del_identity(account, identity, authtype)\n</code></pre> <p>Delete an identity's membership association with an account.</p> <p>:param account: The account name. :param identity: The identity key name. For example x509 DN, or a username. :param authtype: The type of the authentication (x509, gss, userpass).</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.list_identities","title":"list_identities","text":"<pre><code>list_identities(account)\n</code></pre> <p>List all identities on an account.</p> <p>:param account: The account name.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.list_account_rules","title":"list_account_rules","text":"<pre><code>list_account_rules(account)\n</code></pre> <p>List the associated rules of an account.</p> <p>:param account: The account name.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_account_limits","title":"get_account_limits","text":"<pre><code>get_account_limits(account, rse_expression, locality)\n</code></pre> <p>Return the correct account limits for the given locality.</p> <p>:param account:        The account name. :param rse_expression: Valid RSE expression :param locality:       The scope of the account limit. 'local' or 'global'.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_global_account_limit","title":"get_global_account_limit","text":"<pre><code>get_global_account_limit(account, rse_expression)\n</code></pre> <p>List the account limit for the specific RSE expression.</p> <p>:param account:        The account name. :param rse_expression: The rse expression.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_global_account_limits","title":"get_global_account_limits","text":"<pre><code>get_global_account_limits(account)\n</code></pre> <p>List all RSE expression limits of this account.</p> <p>:param account: The account name.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_local_account_limits","title":"get_local_account_limits","text":"<pre><code>get_local_account_limits(account)\n</code></pre> <p>List the account rse limits of this account.</p> <p>:param account: The account name.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_local_account_limit","title":"get_local_account_limit","text":"<pre><code>get_local_account_limit(account, rse)\n</code></pre> <p>List the account rse limits of this account for the specific rse.</p> <p>:param account: The account name. :param rse:     The rse name.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_local_account_usage","title":"get_local_account_usage","text":"<pre><code>get_local_account_usage(account, rse=None)\n</code></pre> <p>List the account usage for one or all rses of this account.</p> <p>:param account: The account name. :param rse:     The rse name.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_global_account_usage","title":"get_global_account_usage","text":"<pre><code>get_global_account_usage(account, rse_expression=None)\n</code></pre> <p>List the account usage for one or all RSE expressions of this account.</p> <p>:param account:        The account name. :param rse_expression: The rse expression.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_account_usage_history","title":"get_account_usage_history","text":"<pre><code>get_account_usage_history(account, rse)\n</code></pre> <p>List the account usage history of this account on rse.</p> <p>:param account: The account name. :param rse:     The rse name.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.list_account_attributes","title":"list_account_attributes","text":"<pre><code>list_account_attributes(account)\n</code></pre> <p>List the attributes for an account.</p> <p>:param account: The account name.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.add_account_attribute","title":"add_account_attribute","text":"<pre><code>add_account_attribute(account, key, value)\n</code></pre> <p>Adds an attribute to an account.</p> <p>:param account: The account name. :param key: The attribute key. :param value: The attribute value.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.delete_account_attribute","title":"delete_account_attribute","text":"<pre><code>delete_account_attribute(account, key)\n</code></pre> <p>Delete an attribute for an account.</p> <p>:param account: The account name. :param key: The attribute key.</p>"},{"location":"accountclient.html#rucio.client.accountclient-functions","title":"Functions","text":""},{"location":"accountlimitclient.html","title":"Accountlimitclient","text":""},{"location":"accountlimitclient.html#rucio.client.accountlimitclient-classes","title":"Classes","text":""},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient","title":"AccountLimitClient","text":"<pre><code>AccountLimitClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Account limit client class for working with account limits</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient-functions","title":"Functions","text":""},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.set_account_limit","title":"set_account_limit","text":"<pre><code>set_account_limit(account, rse, bytes_, locality)\n</code></pre> <p>Sets an account limit for a given limit scope.</p> <p>:param account: The name of the account. :param rse:     The rse name. :param bytes_:   An integer with the limit in bytes. :param locality: The scope of the account limit. 'local' or 'global'. :return:        True if quota was created successfully else False.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.delete_account_limit","title":"delete_account_limit","text":"<pre><code>delete_account_limit(account, rse, locality)\n</code></pre> <p>Deletes an account limit for a given limit scope.</p> <p>:param account: The name of the account. :param rse:     The rse name. :param locality: The scope of the account limit. 'local' or 'global'. :return:        True if quota was created successfully else False.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.set_local_account_limit","title":"set_local_account_limit","text":"<pre><code>set_local_account_limit(account, rse, bytes_)\n</code></pre> <p>Sends the request to set an account limit for an account.</p> <p>:param account: The name of the account. :param rse:     The rse name. :param bytes_:   An integer with the limit in bytes. :return:        True if quota was created successfully else False.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.delete_local_account_limit","title":"delete_local_account_limit","text":"<pre><code>delete_local_account_limit(account, rse)\n</code></pre> <p>Sends the request to remove an account limit.</p> <p>:param account: The name of the account. :param rse:     The rse name.</p> <p>:return: True if quota was removed successfully. False otherwise. :raises AccountNotFound: if account doesn't exist.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.set_global_account_limit","title":"set_global_account_limit","text":"<pre><code>set_global_account_limit(account, rse_expression, bytes_)\n</code></pre> <p>Sends the request to set a global account limit for an account.</p> <p>:param account:        The name of the account. :param rse_expression: The rse expression. :param bytes_:          An integer with the limit in bytes. :return:               True if quota was created successfully else False.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.delete_global_account_limit","title":"delete_global_account_limit","text":"<pre><code>delete_global_account_limit(account, rse_expression)\n</code></pre> <p>Sends the request to remove a global account limit.</p> <p>:param account:        The name of the account. :param rse_expression: The rse expression.</p> <p>:return: True if quota was removed successfully. False otherwise. :raises AccountNotFound: if account doesn't exist.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient-functions","title":"Functions","text":""},{"location":"baseclient.html","title":"Baseclient","text":"<p>Client class for callers of the Rucio system</p>"},{"location":"baseclient.html#rucio.client.baseclient-classes","title":"Classes","text":""},{"location":"baseclient.html#rucio.client.baseclient.BaseClient","title":"BaseClient","text":"<pre><code>BaseClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Main client class for accessing Rucio resources. Handles the authentication.</p> <p>Constructor of the BaseClient. :param rucio_host: The address of the rucio server, if None it is read from the config file. :param auth_host: The address of the rucio authentication server, if None it is read from the config file. :param account: The account to authenticate to rucio. :param ca_cert: The path to the rucio server certificate. :param auth_type: The type of authentication (e.g.: 'userpass', 'kerberos' ...) :param creds: Dictionary with credentials needed for authentication. :param user_agent: Indicates the client. :param vo: The VO to authenticate into. :param logger: Logger object to use. If None, use the default LOG created by the module</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient-functions","title":"Functions","text":""},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_userpass","title":"__get_token_userpass","text":"<pre><code>__get_token_userpass()\n</code></pre> <p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses username/password.</p> <p>:returns: True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__refresh_token_oidc","title":"__refresh_token_oidc","text":"<pre><code>__refresh_token_oidc()\n</code></pre> <p>Checks if there is active refresh token and if so returns either active token with expiration timestamp or requests a new refresh and returns new access token with new expiration timestamp and saves these in the token directory.</p> <p>:returns: True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_oidc","title":"__get_token_oidc","text":"<pre><code>__get_token_oidc()\n</code></pre> <p>First authenticates the user via a Identity Provider server (with user's username &amp; password), by specifying oidc_scope, user agrees to share the relevant information with Rucio. If all proceeds well, an access token is requested from the Identity Provider. Access Tokens are not stored in Rucio DB. Refresh Tokens are granted only in case no valid access token exists in user's local storage, oidc_scope includes 'offline_access'. In such case, refresh token is stored in Rucio DB.</p> <p>:returns: True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_x509","title":"__get_token_x509","text":"<pre><code>__get_token_x509()\n</code></pre> <p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses x509 authentication.</p> <p>:returns: True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_ssh","title":"__get_token_ssh","text":"<pre><code>__get_token_ssh()\n</code></pre> <p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses SSH key exchange authentication.</p> <p>:returns: True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_gss","title":"__get_token_gss","text":"<pre><code>__get_token_gss()\n</code></pre> <p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses Kerberos authentication.</p> <p>:returns: True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_saml","title":"__get_token_saml","text":"<pre><code>__get_token_saml()\n</code></pre> <p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses saml authentication.</p> <p>:returns: True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token","title":"__get_token","text":"<pre><code>__get_token()\n</code></pre> <p>Calls the corresponding method to receive an auth token depending on the auth type. To be used if a 401 - Unauthorized error is received.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__read_token","title":"__read_token","text":"<pre><code>__read_token()\n</code></pre> <p>Checks if a local token file exists and reads the token from it.</p> <p>:return: True if a token could be read. False if no file exists.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__write_token","title":"__write_token","text":"<pre><code>__write_token()\n</code></pre> <p>Write the current auth_token to the local token file.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__authenticate","title":"__authenticate","text":"<pre><code>__authenticate()\n</code></pre> <p>Main method for authentication. It first tries to read a locally saved token. If not available it requests a new one.</p>"},{"location":"baseclient.html#rucio.client.baseclient-functions","title":"Functions","text":""},{"location":"baseclient.html#rucio.client.baseclient.choice","title":"choice","text":"<pre><code>choice(hosts)\n</code></pre> <p>Select randomly a host</p> <p>:param hosts: Lost of hosts :return: A randomly selected host.</p>"},{"location":"client.html","title":"Client","text":"<p>Client class for callers of the Rucio system</p>"},{"location":"client.html#rucio.client.client-classes","title":"Classes","text":""},{"location":"client.html#rucio.client.client.Client","title":"Client","text":"<pre><code>Client(**args)\n</code></pre> <pre><code>Main client class for accessing Rucio resources. Handles the authentication.\n\nNote:\n    Used to access all client methods. Each entity client *can* be used to access methods, but using the main client class is recommended for ease of use.\n</code></pre> <p>For using general methods -</p> <pre><code>from rucio.client import Client\n\nclient = Client()  # authenticate with config or environ settings\nclient.add_replication_rule(...)\n\nclient = Client(\n    rucio_host = \"my_host\",\n    auth_host = \"my_auth_host\",\n    account = \"jdoe12345\",\n    auth_type = \"userpass\",\n    creds = {\n        \"username\": \"jdoe12345\",\n        \"password\": \"******\",\n    }\n) # authenticate with kwargs\nclient.list_replicas(...)\n</code></pre> <p>For using the upload and download clients -</p> <pre><code>from rucio.client import Client\nfrom rucio.client.uploadclient import UploadClient\nfrom rucio.client.downloadclient import DownloadClient\n\nclient = Client(...) # Initialize a client using your preferred method\n\nupload_client = UploadClient(client) # Pass forward the initialized client\nupload_client.upload(items=...)\n\ndownload_client = DownloadClient(client)\ndownload_client.download_dids(items=...)\n</code></pre> <p>Constructor for the Rucio main client class.</p> <p>:param rucio_host: the host of the rucio system. :param auth_host: the host of the rucio authentication server. :param account: the rucio account that should be used to interact with the rucio system. :param ca_cert: the certificate to verify the server. :param auth_type: the type of authentication to use (e.g. userpass, x509 ...) :param creds: credentials needed for authentication. :param timeout: Float describes the timeout of the request (in seconds). :param vo: The vo that the client will interact with. :param logger: Logger instance to use (optional)</p>"},{"location":"client.html#rucio.client.client.Client-functions","title":"Functions","text":""},{"location":"configclient.html","title":"Configclient","text":""},{"location":"configclient.html#rucio.client.configclient-classes","title":"Classes","text":""},{"location":"configclient.html#rucio.client.configclient.ConfigClient","title":"ConfigClient","text":"<pre><code>ConfigClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Client class for working with the configuration</p>"},{"location":"configclient.html#rucio.client.configclient.ConfigClient-functions","title":"Functions","text":""},{"location":"configclient.html#rucio.client.configclient.ConfigClient.get_config","title":"get_config","text":"<pre><code>get_config(section=None, option=None)\n</code></pre> <p>Sends the request to get the matching configuration.</p> <p>:param section: the optional name of the section. :param option: the optional option within the section. :return: dictionary containing the configuration.</p>"},{"location":"configclient.html#rucio.client.configclient.ConfigClient.set_config_option","title":"set_config_option","text":"<pre><code>set_config_option(\n    section, option, value, use_body_for_params=True\n)\n</code></pre> <p>Sends the request to create or set an option within a section. Missing sections will be created.</p> <p>:param section: the name of the section. :param option: the name of the option. :param value: the value to set on the config option :param use_body_for_params: send parameters in a json-encoded request body instead of url-encoded TODO: remove this parameter The format of the /config endpoint was recently changed. We migrated from performing a PUT on \"/config///\" to sending the parameters using a json-encoded body. This was done to fix multiple un-wanted side effects related to how the middleware treats values encoded in a path. For a smooth transition, we allow both cases for now, but we should migrate to only passing values via the request body. :return: True if option was removed successfully. False otherwise."},{"location":"configclient.html#rucio.client.configclient.ConfigClient.delete_config_option","title":"delete_config_option","text":"<pre><code>delete_config_option(section, option)\n</code></pre> <p>Sends the request to remove an option from a section</p> <p>:param section: the name of the section. :param option: the name of the option. :return: True if option was removed successfully. False otherwise.</p>"},{"location":"configclient.html#rucio.client.configclient-functions","title":"Functions","text":""},{"location":"credentialclient.html","title":"Credentialclient","text":""},{"location":"credentialclient.html#rucio.client.credentialclient-classes","title":"Classes","text":""},{"location":"credentialclient.html#rucio.client.credentialclient.CredentialClient","title":"CredentialClient","text":"<pre><code>CredentialClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Credential client class for working with URL signing</p>"},{"location":"credentialclient.html#rucio.client.credentialclient.CredentialClient-functions","title":"Functions","text":""},{"location":"credentialclient.html#rucio.client.credentialclient.CredentialClient.get_signed_url","title":"get_signed_url","text":"<pre><code>get_signed_url(rse, service, operation, url, lifetime=3600)\n</code></pre> <p>Return a signed version of the given URL for the given operation.</p> <p>:param rse: The name of the RSE the URL points to. :param service: The service the URL points to (gcs, s3, swift) :param operation: The desired operation (read, write, delete) :param url: The URL to sign :param lifetime: The desired lifetime of the URL in seconds</p> <p>:return: The signed URL string</p>"},{"location":"credentialclient.html#rucio.client.credentialclient-functions","title":"Functions","text":""},{"location":"didclient.html","title":"Didclient","text":""},{"location":"didclient.html#rucio.client.didclient-classes","title":"Classes","text":""},{"location":"didclient.html#rucio.client.didclient.DIDClient","title":"DIDClient","text":"<pre><code>DIDClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>DataIdentifier client class for working with data identifiers</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient-functions","title":"Functions","text":""},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_dids","title":"list_dids","text":"<pre><code>list_dids(\n    scope,\n    filters,\n    did_type=\"collection\",\n    long=False,\n    recursive=False,\n)\n</code></pre> <p>List all data identifiers in a scope which match a given pattern.</p> <p>:param scope: The scope name. :param filters: A nested dictionary of key/value pairs like [{'key1': 'value1', 'key2.lte': 'value2'}, {'key3.gte, 'value3'}].                 Keypairs in the same dictionary are AND'ed together, dictionaries are OR'ed together. Keys should be suffixed                 like ., e.g. key1 &gt;= value1 is equivalent to {'key1.gte': value}, where  belongs to one                 of the set {'lte', 'gte', 'gt', 'lt', 'ne' or ''}. Equivalence doesn't require an operator. :param did_type: The type of the did: 'all'(container, dataset or file)|'collection'(dataset or container)|'dataset'|'container'|'file' :param long: Long format option to display more information for each DID. :param recursive: Recursively list DIDs content."},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_dids_extended","title":"list_dids_extended","text":"<pre><code>list_dids_extended(\n    scope,\n    filters,\n    did_type=\"collection\",\n    long=False,\n    recursive=False,\n)\n</code></pre> <p>List all data identifiers in a scope which match a given pattern (DEPRECATED)</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_did","title":"add_did","text":"<pre><code>add_did(\n    scope,\n    name,\n    did_type,\n    statuses=None,\n    meta=None,\n    rules=None,\n    lifetime=None,\n    dids=None,\n    rse=None,\n)\n</code></pre> <p>Add data identifier for a dataset or container.</p> <p>:param scope: The scope name. :param name: The data identifier name. :param did_type: The data identifier type (dataset|container). :param statuses: Dictionary with statuses, e.g. {'monotonic':True}. :param meta: Meta-data associated with the data identifier is represented using key/value pairs in a dictionary. :param rules: Replication rules associated with the data identifier. A list of dictionaries, e.g., [{'copies': 2, 'rse_expression': 'TIERS1'}, ]. :param lifetime: DID's lifetime (in seconds). :param dids: The content. :param rse: The RSE name when registering replicas.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_dids","title":"add_dids","text":"<pre><code>add_dids(dids)\n</code></pre> <p>Bulk add datasets/containers.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_dataset","title":"add_dataset","text":"<pre><code>add_dataset(\n    scope,\n    name,\n    statuses=None,\n    meta=None,\n    rules=None,\n    lifetime=None,\n    files=None,\n    rse=None,\n)\n</code></pre> <p>Add data identifier for a dataset.</p> <p>:param scope: The scope name. :param name: The data identifier name. :param statuses: Dictionary with statuses, e.g.g {'monotonic':True}. :param meta: Meta-data associated with the data identifier is represented using key/value pairs in a dictionary. :param rules: Replication rules associated with the data identifier. A list of dictionaries, e.g., [{'copies': 2, 'rse_expression': 'TIERS1'}, ]. :param lifetime: DID's lifetime (in seconds). :param files: The content. :param rse: The RSE name when registering replicas.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_datasets","title":"add_datasets","text":"<pre><code>add_datasets(dsns)\n</code></pre> <p>Bulk add datasets.</p> <p>:param dsns: A list of datasets.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_container","title":"add_container","text":"<pre><code>add_container(\n    scope,\n    name,\n    statuses=None,\n    meta=None,\n    rules=None,\n    lifetime=None,\n)\n</code></pre> <p>Add data identifier for a container.</p> <p>:param scope: The scope name. :param name: The data identifier name. :param statuses: Dictionary with statuses, e.g.g {'monotonic':True}. :param meta: Meta-data associated with the data identifier is represented using key/value pairs in a dictionary. :param rules: Replication rules associated with the data identifier. A list of dictionaries, e.g., [{'copies': 2, 'rse_expression': 'TIERS1'}, ]. :param lifetime: DID's lifetime (in seconds).</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_containers","title":"add_containers","text":"<pre><code>add_containers(cnts)\n</code></pre> <p>Bulk add containers.</p> <p>:param cnts: A list of containers.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.attach_dids","title":"attach_dids","text":"<pre><code>attach_dids(scope, name, dids, rse=None)\n</code></pre> <p>Attach data identifier.</p> <p>:param scope: The scope name. :param name: The data identifier name. :param dids: The content. :param rse: The RSE name when registering replicas.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.detach_dids","title":"detach_dids","text":"<pre><code>detach_dids(scope, name, dids=None)\n</code></pre> <p>Detach data identifier</p> <p>:param scope: The scope name. :param name: The data identifier name. :param dids: The content.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.attach_dids_to_dids","title":"attach_dids_to_dids","text":"<pre><code>attach_dids_to_dids(attachments, ignore_duplicate=False)\n</code></pre> <p>Add dids to dids.</p> <p>:param attachments: The attachments.     attachments is: [attachment, attachment, ...]     attachment is: {'scope': scope, 'name': name, 'dids': dids}     dids is: [{'scope': scope, 'name': name}, ...] :param ignore_duplicate: If True, ignore duplicate entries.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_files_to_datasets","title":"add_files_to_datasets","text":"<pre><code>add_files_to_datasets(attachments, ignore_duplicate=False)\n</code></pre> <p>Add files to datasets.</p> <p>:param attachments: The attachments.     attachments is: [attachment, attachment, ...]     attachment is: {'scope': scope, 'name': name, 'dids': dids}     dids is: [{'scope': scope, 'name': name}, ...] :param ignore_duplicate: If True, ignore duplicate entries.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_datasets_to_containers","title":"add_datasets_to_containers","text":"<pre><code>add_datasets_to_containers(attachments)\n</code></pre> <p>Add datasets_to_containers.</p> <p>:param attachments: The attachments.     attachments is: [attachment, attachment, ...]     attachment is: {'scope': scope, 'name': name, 'dids': dids}     dids is: [{'scope': scope, 'name': name}, ...]</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_containers_to_containers","title":"add_containers_to_containers","text":"<pre><code>add_containers_to_containers(attachments)\n</code></pre> <p>Add containers_to_containers.</p> <p>:param attachments: The attachments.     attachments is: [attachment, attachment, ...]     attachment is: {'scope': scope, 'name': name, 'dids': dids}     dids is: [{'scope': scope, 'name': name}, ...]</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_files_to_dataset","title":"add_files_to_dataset","text":"<pre><code>add_files_to_dataset(scope, name, files, rse=None)\n</code></pre> <p>Add files to datasets.</p> <p>:param scope: The scope name. :param name: The dataset name. :param files: The content. :param rse: The RSE name when registering replicas.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_files_to_archive","title":"add_files_to_archive","text":"<pre><code>add_files_to_archive(scope, name, files)\n</code></pre> <p>Add files to archive.</p> <p>:param scope: The scope name. :param name: The dataset name. :param files: The content.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_datasets_to_container","title":"add_datasets_to_container","text":"<pre><code>add_datasets_to_container(scope, name, dsns)\n</code></pre> <p>Add datasets to container.</p> <p>:param scope: The scope name. :param name: The dataset name. :param dsns: The content.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_containers_to_container","title":"add_containers_to_container","text":"<pre><code>add_containers_to_container(scope, name, cnts)\n</code></pre> <p>Add containers to container.</p> <p>:param scope: The scope name. :param name: The dataset name. :param cnts: The content.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_content","title":"list_content","text":"<pre><code>list_content(scope, name)\n</code></pre> <p>List data identifier contents.</p> <p>:param scope: The scope name. :param name: The data identifier name.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_content_history","title":"list_content_history","text":"<pre><code>list_content_history(scope, name)\n</code></pre> <p>List data identifier contents history.</p> <p>:param scope: The scope name. :param name: The data identifier name.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_files","title":"list_files","text":"<pre><code>list_files(scope, name, long=None)\n</code></pre> <p>List data identifier file contents.</p> <p>:param scope: The scope name. :param name: The data identifier name. :param long: A boolean to choose if GUID is returned or not.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.bulk_list_files","title":"bulk_list_files","text":"<pre><code>bulk_list_files(dids)\n</code></pre> <p>List data identifier file contents.</p> <p>:param dids: The list of DIDs.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.get_did","title":"get_did","text":"<pre><code>get_did(scope, name, dynamic=False, dynamic_depth=None)\n</code></pre> <p>Retrieve a single data identifier.</p> <p>:param scope: The scope name. :param name: The data identifier name. :param dynamic_depth: The DID type as string ('FILE'/'DATASET') at which to stop the dynamic length/bytes calculation. If not set, the size will not be computed dynamically. :param dynamic: (Deprecated) same as dynamic_depth = 'FILE'</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(scope, name, plugin='DID_COLUMN')\n</code></pre> <p>Get data identifier metadata</p> <p>:param scope: The scope name. :param name: The data identifier name. :param plugin: Backend Metadata plugin the Rucio server should use to query data.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.get_metadata_bulk","title":"get_metadata_bulk","text":"<pre><code>get_metadata_bulk(dids, inherit=False, plugin='JSON')\n</code></pre> <p>Bulk get data identifier metadata :param dids:               A list of dids. :param inherit:            A boolean. If set to true, the metadata of the parent are concatenated. :param plugin:             The metadata plugin to query, 'ALL' for all available plugins</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.set_metadata","title":"set_metadata","text":"<pre><code>set_metadata(scope, name, key, value, recursive=False)\n</code></pre> <p>Set data identifier metadata</p> <p>:param scope: The scope name. :param name: The data identifier name. :param key: the key. :param value: the value. :param recursive: Option to propagate the metadata change to content.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.set_metadata_bulk","title":"set_metadata_bulk","text":"<pre><code>set_metadata_bulk(scope, name, meta, recursive=False)\n</code></pre> <p>Set data identifier metadata in bulk.</p> <p>:param scope: The scope name. :param name: The data identifier name. :param meta: the metadata key-values. :param recursive: Option to propagate the metadata change to content.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.set_dids_metadata_bulk","title":"set_dids_metadata_bulk","text":"<pre><code>set_dids_metadata_bulk(dids, recursive=False)\n</code></pre> <p>Set metadata to a list of data identifiers.</p> <p>:param dids: A list of dids including metadata, i.e. [{'scope': scope1, 'name': name1, 'meta': {key1: value1, key2: value2}] . :param recursive: Option to propagate the metadata update to content.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.set_status","title":"set_status","text":"<pre><code>set_status(scope, name, **kwargs)\n</code></pre> <p>Set data identifier status</p> <p>:param scope: The scope name. :param name: The data identifier name. :param kwargs:  Keyword arguments of the form status_name=value.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.close","title":"close","text":"<pre><code>close(scope, name)\n</code></pre> <p>close dataset/container</p> <p>:param scope: The scope name. :param name: The dataset/container name.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.delete_metadata","title":"delete_metadata","text":"<pre><code>delete_metadata(scope, name, key)\n</code></pre> <p>Delete data identifier metadata</p> <p>:param scope: The scope name. :param name: The data identifier. :param key: the key.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_did_rules","title":"list_did_rules","text":"<pre><code>list_did_rules(scope, name)\n</code></pre> <p>List the associated rules of a data identifier.</p> <p>:param scope: The scope name. :param name: The data identifier name.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_associated_rules_for_file","title":"list_associated_rules_for_file","text":"<pre><code>list_associated_rules_for_file(scope, name)\n</code></pre> <p>List the associated rules a file is affected from..</p> <p>:param scope: The scope name. :param name:  The file name.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.get_dataset_by_guid","title":"get_dataset_by_guid","text":"<pre><code>get_dataset_by_guid(guid)\n</code></pre> <p>Get the parent datasets for a given GUID. :param guid: The GUID.</p> <p>:returns: A did</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.scope_list","title":"scope_list","text":"<pre><code>scope_list(scope, name=None, recursive=False)\n</code></pre> <p>List data identifiers in a scope.</p> <p>:param scope: The scope name. :param name: The data identifier name. :param recursive: boolean, True or False.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_parent_dids","title":"list_parent_dids","text":"<pre><code>list_parent_dids(scope, name)\n</code></pre> <p>List parent dataset/containers of a did.</p> <p>:param scope: The scope. :param name:  The name.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.create_did_sample","title":"create_did_sample","text":"<pre><code>create_did_sample(\n    input_scope,\n    input_name,\n    output_scope,\n    output_name,\n    nbfiles,\n)\n</code></pre> <p>Create a sample from an input collection.</p> <p>:param input_scope: The scope of the input DID. :param input_name: The name of the input DID. :param output_scope: The scope of the output dataset. :param output_name: The name of the output dataset. :param account: The account. :param nbfiles: The number of files to register in the output dataset.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.resurrect","title":"resurrect","text":"<pre><code>resurrect(dids)\n</code></pre> <p>Resurrect a list of dids.</p> <p>:param dids:  A list of dids [{'scope': scope, 'name': name}, ...]</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_archive_content","title":"list_archive_content","text":"<pre><code>list_archive_content(scope, name)\n</code></pre> <p>List archive contents.</p> <p>:param scope: The scope name. :param name: The data identifier name.</p>"},{"location":"didclient.html#rucio.client.didclient-functions","title":"Functions","text":""},{"location":"diracclient.html","title":"Diracclient","text":""},{"location":"diracclient.html#rucio.client.diracclient-classes","title":"Classes","text":""},{"location":"diracclient.html#rucio.client.diracclient.DiracClient","title":"DiracClient","text":"<pre><code>DiracClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>DataIdentifier client class for working with data identifiers</p>"},{"location":"diracclient.html#rucio.client.diracclient.DiracClient-functions","title":"Functions","text":""},{"location":"diracclient.html#rucio.client.diracclient.DiracClient.add_files","title":"add_files","text":"<pre><code>add_files(\n    lfns, ignore_availability=False, parents_metadata=None\n)\n</code></pre> <p>Bulk add files : - Create the file and replica. - If doesn't exist create the dataset containing the file as well as a rule on the dataset on ANY sites. - Create all the ascendants of the dataset if they do not exist</p> <p>:param lfns: List of lfn (dictionary {'lfn': , 'rse': , 'bytes': , 'adler32': , 'guid': , 'pfn': } :param ignore_availability: A boolean to ignore blocked sites. :param parents_metadata: Metadata for selected hierarchy DIDs. (dictionary {'lpn': {key : value}}). Default=None"},{"location":"diracclient.html#rucio.client.diracclient-functions","title":"Functions","text":""},{"location":"downloadclient.html","title":"Downloadclient","text":""},{"location":"downloadclient.html#rucio.client.downloadclient-classes","title":"Classes","text":""},{"location":"downloadclient.html#rucio.client.downloadclient.FileDownloadState","title":"FileDownloadState","text":"<p>The state a file can be in before/while/after downloading.</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.BaseExtractionTool","title":"BaseExtractionTool","text":"<pre><code>BaseExtractionTool(\n    program_name,\n    useability_check_args,\n    extract_args,\n    logger=logging.log,\n)\n</code></pre> <p>Initialises a extraction tool object</p> <p>:param program_name: the name of the archive extraction program, e.g., unzip :param useability_check_args: the arguments of the extraction program to test if its installed, e.g., --version :param extract_args: the arguments that will be passed to the program for extraction :param logger: optional decorated logging.log object that can be passed from the calling daemon or client.</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.BaseExtractionTool-functions","title":"Functions","text":""},{"location":"downloadclient.html#rucio.client.downloadclient.BaseExtractionTool.is_useable","title":"is_useable","text":"<pre><code>is_useable()\n</code></pre> <p>Checks if the extraction tool is installed and usable</p> <p>:returns: True if it is usable otherwise False</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.BaseExtractionTool.try_extraction","title":"try_extraction","text":"<pre><code>try_extraction(\n    archive_file_path, file_to_extract, dest_dir_path\n)\n</code></pre> <p>Calls the extraction program to extract a file from an archive</p> <p>:param archive_file_path: path to the archive :param file_to_extract: file name to extract from the archive :param dest_dir_path: destination directory where the extracted file will be stored</p> <p>:returns: True on success otherwise False</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient","title":"DownloadClient","text":"<pre><code>DownloadClient(\n    client=None,\n    logger=None,\n    tracing=True,\n    check_admin=False,\n    check_pcache=False,\n)\n</code></pre> <p>Initialises the basic settings for an DownloadClient object</p> <p>:param client:           Optional: rucio.client.client.Client object. If None, a new object will be created. :param external_traces:  Optional: reference to a list where traces can be added :param logger:           Optional: logging.Logger object. If None, default logger will be used.</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient-functions","title":"Functions","text":""},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.download_pfns","title":"download_pfns","text":"<pre><code>download_pfns(\n    items,\n    num_threads=2,\n    trace_custom_fields=None,\n    traces_copy_out=None,\n    deactivate_file_download_exceptions=False,\n)\n</code></pre> <p>Download items with a given PFN. This function can only download files, no datasets.</p> <p>:param items: List of dictionaries. Each dictionary describing a file to download. Keys:     pfn                            - PFN string of this file     did                            - DID string of this file (e.g. 'scope:file.name'). Wildcards are not allowed     rse                            - rse name (e.g. 'CERN-PROD_DATADISK'). RSE Expressions are not allowed     base_dir                       - Optional: Base directory where the downloaded files will be stored. (Default: '.')     no_subdir                      - Optional: If true, files are written directly into base_dir. (Default: False)     adler32                        - Optional: The adler32 checmsum to compare the downloaded files adler32 checksum with     md5                            - Optional: The md5 checksum to compare the downloaded files md5 checksum with     transfer_timeout               - Optional: Timeout time for the download protocols. (Default: None)     check_local_with_filesize_only - Optional: If true, already downloaded files will not be validated by checksum. :param num_threads: Suggestion of number of threads to use for the download. It will be lowered if it's too high. :param trace_custom_fields: Custom key value pairs to send with the traces :param traces_copy_out: reference to an external list, where the traces should be uploaded :param deactivate_file_download_exceptions: Boolean, if file download exceptions shouldn't be raised</p> <p>:returns: a list of dictionaries with an entry for each file, containing the input options, the did, and the clientState           clientState can be one of the following: ALREADY_DONE, DONE, FILE_NOT_FOUND, FAIL_VALIDATE, FAILED</p> <p>:raises InputValidationError: if one of the input items is in the wrong format :raises NoFilesDownloaded: if no files could be downloaded :raises NotAllFilesDownloaded: if not all files could be downloaded :raises RucioException: if something unexpected went wrong during the download</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.download_dids","title":"download_dids","text":"<pre><code>download_dids(\n    items,\n    num_threads=2,\n    trace_custom_fields=None,\n    traces_copy_out=None,\n    deactivate_file_download_exceptions=False,\n    sort=None,\n)\n</code></pre> <p>Download items with given DIDs. This function can also download datasets and wildcarded DIDs.</p> <p>:param items: List of dictionaries. Each dictionary describing an item to download. Keys:     did                            - DID string of this file (e.g. 'scope:file.name')     filters                        - Filter to select DIDs for download. Optional if DID is given     rse                            - Optional: rse name (e.g. 'CERN-PROD_DATADISK') or rse expression from where to download     impl                           - Optional: name of the protocol implementation to be used to download this item.     no_resolve_archives            - Optional: bool indicating whether archives should not be considered for download (Default: False)     resolve_archives               - Deprecated: Use no_resolve_archives instead     force_scheme                   - Optional: force a specific scheme to download this item. (Default: None)     base_dir                       - Optional: base directory where the downloaded files will be stored. (Default: '.')     no_subdir                      - Optional: If true, files are written directly into base_dir. (Default: False)     nrandom                        - Optional: if the DID addresses a dataset, nrandom files will be randomly chosen for download from the dataset     ignore_checksum                - Optional: If true, skips the checksum validation between the downloaded file and the rucio catalouge. (Default: False)     transfer_timeout               - Optional: Timeout time for the download protocols. (Default: None)     transfer_speed_timeout         - Optional: Minimum allowed transfer speed (in KBps). Ignored if transfer_timeout set. Otherwise, used to compute default timeout (Default: 500)     check_local_with_filesize_only - Optional: If true, already downloaded files will not be validated by checksum. :param num_threads: Suggestion of number of threads to use for the download. It will be lowered if it's too high. :param trace_custom_fields: Custom key value pairs to send with the traces. :param traces_copy_out: reference to an external list, where the traces should be uploaded :param deactivate_file_download_exceptions: Boolean, if file download exceptions shouldn't be raised :param sort: Select best replica by replica sorting algorithm. Available algorithms:     <code>geoip</code>       - based on src/dst IP topographical distance</p> <p>:returns: a list of dictionaries with an entry for each file, containing the input options, the did, and the clientState</p> <p>:raises InputValidationError: if one of the input items is in the wrong format :raises NoFilesDownloaded: if no files could be downloaded :raises NotAllFilesDownloaded: if not all files could be downloaded :raises RucioException: if something unexpected went wrong during the download</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.download_from_metalink_file","title":"download_from_metalink_file","text":"<pre><code>download_from_metalink_file(\n    item,\n    metalink_file_path,\n    num_threads=2,\n    trace_custom_fields=None,\n    traces_copy_out=None,\n    deactivate_file_download_exceptions=False,\n)\n</code></pre> <p>Download items using a given metalink file.</p> <p>:param item: dictionary describing an item to download. Keys:     base_dir                       - Optional: base directory where the downloaded files will be stored. (Default: '.')     no_subdir                      - Optional: If true, files are written directly into base_dir. (Default: False)     ignore_checksum                - Optional: If true, skips the checksum validation between the downloaded file and the rucio catalouge. (Default: False)     transfer_timeout               - Optional: Timeout time for the download protocols. (Default: None)     check_local_with_filesize_only - Optional: If true, already downloaded files will not be validated by checksum.</p> <p>:param num_threads: Suggestion of number of threads to use for the download. It will be lowered if it's too high. :param trace_custom_fields: Custom key value pairs to send with the traces. :param traces_copy_out: reference to an external list, where the traces should be uploaded :param deactivate_file_download_exceptions: Boolean, if file download exceptions shouldn't be raised</p> <p>:returns: a list of dictionaries with an entry for each file, containing the input options, the did, and the clientState</p> <p>:raises InputValidationError: if one of the input items is in the wrong format :raises NoFilesDownloaded: if no files could be downloaded :raises NotAllFilesDownloaded: if not all files could be downloaded :raises RucioException: if something unexpected went wrong during the download</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.download_aria2c","title":"download_aria2c","text":"<pre><code>download_aria2c(\n    items,\n    trace_custom_fields=None,\n    filters=None,\n    deactivate_file_download_exceptions=False,\n    sort=None,\n)\n</code></pre> <p>Uses aria2c to download the items with given DIDs. This function can also download datasets and wildcarded DIDs. It only can download files that are available via https/davs. Aria2c needs to be installed and X509_USER_PROXY needs to be set!</p> <p>:param items: List of dictionaries. Each dictionary describing an item to download. Keys:     did                            - DID string of this file (e.g. 'scope:file.name'). Wildcards are not allowed     rse                            - Optional: rse name (e.g. 'CERN-PROD_DATADISK') or rse expression from where to download     base_dir                       - Optional: base directory where the downloaded files will be stored. (Default: '.')     no_subdir                      - Optional: If true, files are written directly into base_dir. (Default: False)     nrandom                        - Optional: if the DID addresses a dataset, nrandom files will be randomly chosen for download from the dataset     ignore_checksum                - Optional: If true, skips the checksum validation between the downloaded file and the rucio catalouge. (Default: False)     check_local_with_filesize_only - Optional: If true, already downloaded files will not be validated by checksum.</p> <p>:param trace_custom_fields: Custom key value pairs to send with the traces :param filters: dictionary containing filter options :param deactivate_file_download_exceptions: Boolean, if file download exceptions shouldn't be raised :param sort: Select best replica by replica sorting algorithm. Available algorithms:     <code>geoip</code>       - based on src/dst IP topographical distance</p> <p>:returns: a list of dictionaries with an entry for each file, containing the input options, the did, and the clientState</p> <p>:raises InputValidationError: if one of the input items is in the wrong format :raises NoFilesDownloaded: if no files could be downloaded :raises NotAllFilesDownloaded: if not all files could be downloaded :raises RucioException: if something went wrong during the download (e.g. aria2c could not be started)</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.preferred_impl","title":"preferred_impl","text":"<pre><code>preferred_impl(sources)\n</code></pre> <p>Finds the optimum protocol impl preferred by the client and supported by the remote RSE.</p> <p>:param sources: List of sources for a given DID</p> <p>:raises RucioException(msg): general exception with msg for more details.</p>"},{"location":"downloadclient.html#rucio.client.downloadclient-functions","title":"Functions","text":""},{"location":"exportclient.html","title":"Exportclient","text":""},{"location":"exportclient.html#rucio.client.exportclient-classes","title":"Classes","text":""},{"location":"exportclient.html#rucio.client.exportclient.ExportClient","title":"ExportClient","text":"<pre><code>ExportClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>RSE client class for exporting data from Rucio</p>"},{"location":"exportclient.html#rucio.client.exportclient.ExportClient-functions","title":"Functions","text":""},{"location":"exportclient.html#rucio.client.exportclient.ExportClient.export_data","title":"export_data","text":"<pre><code>export_data(distance=True)\n</code></pre> <p>Export RSE data (RSE, settings, attributes and distance). :param distance: To include the distance.</p> <p>:returns: A dict containing data</p>"},{"location":"exportclient.html#rucio.client.exportclient-functions","title":"Functions","text":""},{"location":"fileclient.html","title":"Fileclient","text":""},{"location":"fileclient.html#rucio.client.fileclient-classes","title":"Classes","text":""},{"location":"fileclient.html#rucio.client.fileclient.FileClient","title":"FileClient","text":"<pre><code>FileClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Dataset client class for working with dataset</p>"},{"location":"fileclient.html#rucio.client.fileclient.FileClient-functions","title":"Functions","text":""},{"location":"fileclient.html#rucio.client.fileclient.FileClient.list_file_replicas","title":"list_file_replicas","text":"<pre><code>list_file_replicas(scope, lfn)\n</code></pre> <p>List file replicas.</p> <p>:param scope: the scope. :param lfn: the lfn.</p> <p>:return: List of replicas.</p>"},{"location":"fileclient.html#rucio.client.fileclient-functions","title":"Functions","text":""},{"location":"importclient.html","title":"Importclient","text":""},{"location":"importclient.html#rucio.client.importclient-classes","title":"Classes","text":""},{"location":"importclient.html#rucio.client.importclient.ImportClient","title":"ImportClient","text":"<pre><code>ImportClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>RSE client class for importing data into Rucio</p>"},{"location":"importclient.html#rucio.client.importclient.ImportClient-functions","title":"Functions","text":""},{"location":"importclient.html#rucio.client.importclient.ImportClient.import_data","title":"import_data","text":"<pre><code>import_data(data)\n</code></pre> <p>Imports data into Rucio.</p> <p>:param data: a dict containing data to be imported into Rucio.</p>"},{"location":"importclient.html#rucio.client.importclient-functions","title":"Functions","text":""},{"location":"lifetimeclient.html","title":"Lifetimeclient","text":""},{"location":"lifetimeclient.html#rucio.client.lifetimeclient-classes","title":"Classes","text":""},{"location":"lifetimeclient.html#rucio.client.lifetimeclient.LifetimeClient","title":"LifetimeClient","text":"<pre><code>LifetimeClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Lifetime client class for working with Lifetime Model exceptions</p>"},{"location":"lifetimeclient.html#rucio.client.lifetimeclient.LifetimeClient-functions","title":"Functions","text":""},{"location":"lifetimeclient.html#rucio.client.lifetimeclient.LifetimeClient.list_exceptions","title":"list_exceptions","text":"<pre><code>list_exceptions(exception_id=None, states=None)\n</code></pre> <p>Lists lifetime model exceptions that allow extending data lifetimes beyond their configured policies.</p> <p>The lifetime model exceptions are used to override the default lifecycle policies for data identifiers (files, datasets, containers, or archives) that need to be kept longer than usual. These exceptions can be filtered by their ID or approval state (this feature is not available yet).</p> <p>:param exception_id: The unique identifier of a specific exception. If provided, returns only that exception. :param states: Filter exceptions by their states. Possible values are:               - <code>A</code> (APPROVED): Exception was approved               - <code>R</code> (REJECTED): Exception was rejected               - <code>W</code> (WAITING): Exception is waiting for approval by an admin (or other authorized account)</p> <p>:returns:     An iterator of dictionaries containing the exception details:      - <code>id</code>: The unique identifier of the exception      - <code>scope</code>: The scope of the data identifier      - <code>name</code>: The name of the data identifier      - <code>did_type</code>: Type of the data identifier:             <code>F</code> (file), <code>D</code> (dataset), <code>C</code> (container), <code>A</code> (archive),             <code>X</code> (deleted file), <code>Y</code> (deleted dataset), <code>Z</code> (deleted container)      - <code>account</code>: The account that requested the exception      - <code>pattern</code>: Pattern used for matching data identifiers      - <code>comments</code>: User provided comments explaining the exception      - <code>state</code>: Current state of the exception      - <code>created_at</code>: When the exception was created (returned as timestamp string)      - <code>expires_at</code>: When the exception expires (returned as timestamp string)</p>"},{"location":"lifetimeclient.html#rucio.client.lifetimeclient.LifetimeClient.add_exception","title":"add_exception","text":"<pre><code>add_exception(dids, account, pattern, comments, expires_at)\n</code></pre> <p>Creates a lifetime model exception request to extend the expiration date of data identifiers (DIDs).</p> <p>These exceptions allow requesting extensions to DIDs' lifetimes, subject to approval and configured maximum extension periods. The request includes details about which DIDs should have extended lifetimes, who is requesting it, and why it's needed.</p> <p>:param dids: List of dictionaries containing the data identifiers to be excepted.             Each dictionary must contain:             - <code>scope</code>: The scope of the data identifier             - <code>name</code>: The name of the data identifier :param account: The account requesting the exception :param pattern: Associated pattern for the exception request :param comments: Justification for why the exception is needed (e.g. \"Needed for my XYZ analysis..\") :param expires_at: When the exception should expire (datetime object)</p> <p>:returns: A dictionary containing:          - <code>exceptions</code>: Dictionary mapping exception IDs to lists of DIDs that were successfully added          - <code>unknown</code>: List of DIDs that could not be found          - <code>not_affected</code>: List of DIDs that did not qualify for an exception</p>"},{"location":"lifetimeclient.html#rucio.client.lifetimeclient-functions","title":"Functions","text":""},{"location":"lockclient.html","title":"Lockclient","text":""},{"location":"lockclient.html#rucio.client.lockclient-classes","title":"Classes","text":""},{"location":"lockclient.html#rucio.client.lockclient.LockClient","title":"LockClient","text":"<pre><code>LockClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Lock client class for working with rucio locks</p>"},{"location":"lockclient.html#rucio.client.lockclient.LockClient-functions","title":"Functions","text":""},{"location":"lockclient.html#rucio.client.lockclient.LockClient.get_dataset_locks","title":"get_dataset_locks","text":"<pre><code>get_dataset_locks(scope, name)\n</code></pre> <p>Get a dataset locks of the specified dataset.</p> <p>:param scope: the scope of the did of the locks to list. :param name: the name of the did of the locks to list.</p>"},{"location":"lockclient.html#rucio.client.lockclient.LockClient.get_locks_for_dids","title":"get_locks_for_dids","text":"<pre><code>get_locks_for_dids(dids, **filter_args)\n</code></pre> <p>Get list of locks for for all the files found, recursively, in the listed datasets or containers.</p> <p>:param dids: list of dictionaries {\"scope\":..., \"name\":..., \"type\":...}              type can be either \"dataset\" or \"container\"              type is optional, but if specified, improves the query performance :returns:    list of dictionaries with lock info</p>"},{"location":"lockclient.html#rucio.client.lockclient.LockClient.get_dataset_locks_by_rse","title":"get_dataset_locks_by_rse","text":"<pre><code>get_dataset_locks_by_rse(rse)\n</code></pre> <p>Get all dataset locks of the specified rse.</p> <p>:param rse: the rse of the locks to list.</p>"},{"location":"lockclient.html#rucio.client.lockclient-functions","title":"Functions","text":""},{"location":"metaconventionsclient.html","title":"Metaconventionsclient","text":""},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient-classes","title":"Classes","text":""},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient","title":"MetaConventionClient","text":"<pre><code>MetaConventionClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Metadata client class for working with data identifier attributes</p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient-functions","title":"Functions","text":""},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.add_key","title":"add_key","text":"<pre><code>add_key(key, key_type, value_type=None, value_regexp=None)\n</code></pre> <p>Sends the request to add an allowed key for DID metadata (update the DID Metadata Conventions table with a new key).</p> <p>:param key: the name for the new key. :param key_type: the type of the key: all(container, dataset, file), collection(dataset or container), file, derived(compute from file for collection). :param value_type: the type of the value, if defined. :param value_regexp: the regular expression that values should match, if defined.</p> <p>:return: True if key was created successfully. :raises Duplicate: if key already exists.</p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.list_keys","title":"list_keys","text":"<pre><code>list_keys()\n</code></pre> <p>Sends the request to list all keys for DID Metadata Conventions.</p> <p>:return: a list containing the names of all keys.</p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.list_values","title":"list_values","text":"<pre><code>list_values(key)\n</code></pre> <pre><code>    Sends the request to lists all allowed values for a DID key (all values for a key in DID Metadata Conventions).\n</code></pre> <p>.</p> <pre><code>    :return: a list containing the names of all values for a key.\n</code></pre>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.add_value","title":"add_value","text":"<pre><code>add_value(key, value)\n</code></pre> <p>Sends the request to add a value for a key in DID Metadata Convention.</p> <p>:param key: the name for key. :param value: the value.</p> <p>:return: True if value was created successfully. :raises Duplicate: if valid already exists.</p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.del_value","title":"del_value","text":"<pre><code>del_value(key, value)\n</code></pre> <p>Delete a key in the DID Metadata Conventions table.</p> <p>:param key: the name for key. :param value: the value.</p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.del_key","title":"del_key","text":"<pre><code>del_key(key)\n</code></pre> <p>Delete an allowed key.</p> <p>:param key: the name for key.</p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.update_key","title":"update_key","text":"<pre><code>update_key(key, type_=None, regexp=None)\n</code></pre> <p>Update a key.</p> <p>:param key: the name for key. :param type_: the type of the value, if defined. :param regexp: the regular expression that values should match, if defined.</p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient-functions","title":"Functions","text":""},{"location":"pingclient.html","title":"Pingclient","text":""},{"location":"pingclient.html#rucio.client.pingclient-classes","title":"Classes","text":""},{"location":"pingclient.html#rucio.client.pingclient.PingClient","title":"PingClient","text":"<pre><code>PingClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Ping client class</p>"},{"location":"pingclient.html#rucio.client.pingclient.PingClient-functions","title":"Functions","text":""},{"location":"pingclient.html#rucio.client.pingclient.PingClient.ping","title":"ping","text":"<pre><code>ping()\n</code></pre> <p>Sends a ping request to the rucio server.</p> <p>:return: Dictonnary with server information</p>"},{"location":"pingclient.html#rucio.client.pingclient-functions","title":"Functions","text":""},{"location":"replicaclient.html","title":"Replicaclient","text":""},{"location":"replicaclient.html#rucio.client.replicaclient-classes","title":"Classes","text":""},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient","title":"ReplicaClient","text":"<pre><code>ReplicaClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Replica client class for working with replicas</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient-functions","title":"Functions","text":""},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.quarantine_replicas","title":"quarantine_replicas","text":"<pre><code>quarantine_replicas(replicas, rse=None, rse_id=None)\n</code></pre> <p>Add quaratined replicas for RSE.</p> <p>:param replicas: List of replica infos: {'scope':  (optional), 'name':  (optional), 'path': (required)}. :param rse: RSE name. :param rse_id: RSE id. Either RSE name or RSE id must be specified, but not both"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.declare_bad_file_replicas","title":"declare_bad_file_replicas","text":"<pre><code>declare_bad_file_replicas(replicas, reason, force=False)\n</code></pre> <p>Declare a list of bad replicas.</p> <p>:param replicas: Either a list of PFNs (string) or a list of dicts {'scope': , 'name': , 'rse_id':  or 'rse': } :param reason: The reason of the loss. :param force: boolean, tell the serrver to ignore existing replica status in the bad_replicas table. Default: False :returns: Dictionary {\"rse_name\": [\"did: error\",...]} - list of strings for DIDs failed to declare, by RSE"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.declare_bad_did_replicas","title":"declare_bad_did_replicas","text":"<pre><code>declare_bad_did_replicas(rse, dids, reason)\n</code></pre> <p>Declare a list of bad replicas.</p> <p>:param rse: The RSE where the bad replicas reside :param dids: The DIDs of the bad replicas :param reason: The reason of the loss.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.declare_suspicious_file_replicas","title":"declare_suspicious_file_replicas","text":"<pre><code>declare_suspicious_file_replicas(pfns, reason)\n</code></pre> <p>Declare a list of bad replicas.</p> <p>:param pfns: The list of PFNs. :param reason: The reason of the loss.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.get_did_from_pfns","title":"get_did_from_pfns","text":"<pre><code>get_did_from_pfns(pfns, rse=None)\n</code></pre> <p>Get the DIDs associated to a PFN on one given RSE</p> <p>:param pfns: The list of PFNs. :param rse: The RSE name. :returns: A list of dictionaries {pfn: {'scope': scope, 'name': name}}</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_replicas","title":"list_replicas","text":"<pre><code>list_replicas(\n    dids,\n    schemes=None,\n    ignore_availability=True,\n    all_states=False,\n    metalink=False,\n    rse_expression=None,\n    client_location=None,\n    sort=None,\n    domain=None,\n    signature_lifetime=None,\n    nrandom=None,\n    resolve_archives=True,\n    resolve_parents=False,\n    updated_after=None,\n)\n</code></pre> <p>List file replicas for a list of data identifiers (DIDs).</p> <p>:param dids: The list of data identifiers (DIDs) like :     [{'scope': , 'name': }, {'scope': , 'name': }, ...] :param schemes: A list of schemes to filter the replicas. (e.g. file, http, ...) :param ignore_availability: Also include replicas from blocked RSEs into the list :param metalink: <code>False</code> (default) retrieves as JSON,                  <code>True</code> retrieves as metalink4+xml. :param rse_expression: The RSE expression to restrict replicas on a set of RSEs. :param client_location: Client location dictionary for PFN modification {'ip', 'fqdn', 'site', 'latitude', 'longitude'} :param sort: Sort the replicas: <code>geoip</code> - based on src/dst IP topographical distance :param domain: Define the domain. None is fallback to 'wan', otherwise 'wan, 'lan', or 'all' :param signature_lifetime: If supported, in seconds, restrict the lifetime of the signed PFN. :param nrandom: pick N random replicas. If the initial number of replicas is smaller than N, returns all replicas. :param resolve_archives: When set to True, find archives which contain the replicas. :param resolve_parents: When set to True, find all parent datasets which contain the replicas. :param updated_after: epoch timestamp or datetime object (UTC time), only return replicas updated after this time <p>:returns: A list of dictionaries with replica information.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_suspicious_replicas","title":"list_suspicious_replicas","text":"<pre><code>list_suspicious_replicas(\n    rse_expression=None, younger_than=None, nattempts=None\n)\n</code></pre> <p>List file replicas tagged as suspicious.</p> <p>:param rse_expression: The RSE expression to restrict replicas on a set of RSEs. :param younger_than: Datetime object to select the replicas which were declared since younger_than date. Default value = 10 days ago. :param nattempts: The minimum number of replica appearances in the bad_replica DB table from younger_than date. Default value = 0. :param state: State of the replica, either 'BAD' or 'SUSPICIOUS'. No value returns replicas with either state.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.add_replica","title":"add_replica","text":"<pre><code>add_replica(\n    rse,\n    scope,\n    name,\n    bytes_,\n    adler32,\n    pfn=None,\n    md5=None,\n    meta=None,\n)\n</code></pre> <p>Add file replicas to a RSE.</p> <p>:param rse: the RSE name. :param scope: The scope of the file. :param name: The name of the file. :param bytes_: The size in bytes. :param adler32: adler32 checksum. :param pfn: PFN of the file for non deterministic RSE. :param md5: md5 checksum. :param meta: Metadata attributes.</p> <p>:return: True if files were created successfully.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.add_replicas","title":"add_replicas","text":"<pre><code>add_replicas(rse, files, ignore_availability=True)\n</code></pre> <p>Bulk add file replicas to a RSE.</p> <p>:param rse: the RSE name. :param files: The list of files. This is a list of DIDs like :     [{'scope': , 'name': }, {'scope': , 'name': }, ...] :param ignore_availability: Ignore the RSE blocklsit. <p>:return: True if files were created successfully.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.delete_replicas","title":"delete_replicas","text":"<pre><code>delete_replicas(rse, files, ignore_availability=True)\n</code></pre> <p>Bulk delete file replicas from a RSE.</p> <p>:param rse: the RSE name. :param files: The list of files. This is a list of DIDs like :     [{'scope': , 'name': }, {'scope': , 'name': }, ...] :param ignore_availability: Ignore the RSE blocklist. <p>:return: True if files have been deleted successfully.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.update_replicas_states","title":"update_replicas_states","text":"<pre><code>update_replicas_states(rse, files)\n</code></pre> <p>Bulk update the file replicas states from a RSE.</p> <p>:param rse: the RSE name. :param files: The list of files. This is a list of DIDs like :     [{'scope': , 'name': , 'state': }, {'scope': , 'name': , 'state': }, ...],     where a state value can be either of:       'A' (AVAILABLE)       'U' (UNAVAILABLE)       'C' (COPYING)       'B' (BEING_DELETED)       'D' (BAD)       'T' (TEMPORARY_UNAVAILABLE) :return: True if replica states have been updated successfully, otherwise an exception is raised."},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_dataset_replicas","title":"list_dataset_replicas","text":"<pre><code>list_dataset_replicas(scope, name, deep=False)\n</code></pre> <p>List dataset replicas for a did (scope:name).</p> <p>:param scope: The scope of the dataset. :param name: The name of the dataset. :param deep: Lookup at the file level.</p> <p>:returns: A list of dict dataset replicas.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_dataset_replicas_bulk","title":"list_dataset_replicas_bulk","text":"<pre><code>list_dataset_replicas_bulk(dids)\n</code></pre> <p>List dataset replicas for a did (scope:name).</p> <p>:param dids: The list of DIDs of the datasets.</p> <p>:returns: A list of dict dataset replicas.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_dataset_replicas_vp","title":"list_dataset_replicas_vp","text":"<pre><code>list_dataset_replicas_vp(scope, name, deep=False)\n</code></pre> <p>List dataset replicas for a DID (scope:name) using the Virtual Placement service.</p> <p>NOTICE: This is an RnD function and might change or go away at any time.</p> <p>:param scope: The scope of the dataset. :param name: The name of the dataset. :param deep: Lookup at the file level.</p> <p>:returns: If VP exists a list of dicts of sites</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_datasets_per_rse","title":"list_datasets_per_rse","text":"<pre><code>list_datasets_per_rse(rse, filters=None, limit=None)\n</code></pre> <p>List datasets at a RSE.</p> <p>:param rse: the rse name. :param filters: dictionary of attributes by which the results should be filtered. :param limit: limit number.</p> <p>:returns: A list of dict dataset replicas.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.add_bad_pfns","title":"add_bad_pfns","text":"<pre><code>add_bad_pfns(pfns, reason, state, expires_at)\n</code></pre> <p>Declare a list of bad replicas.</p> <p>:param pfns: The list of PFNs. :param reason: The reason of the loss. :param state: The state of the replica. Either BAD, SUSPICIOUS, TEMPORARY_UNAVAILABLE :param expires_at: Specify a timeout for the TEMPORARY_UNAVAILABLE replicas. None for BAD files.</p> <p>:return: True if PFNs were created successfully.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.set_tombstone","title":"set_tombstone","text":"<pre><code>set_tombstone(replicas)\n</code></pre> <p>Set a tombstone on a list of replicas.</p> <p>:param replicas: list of replicas.</p>"},{"location":"replicaclient.html#rucio.client.replicaclient-functions","title":"Functions","text":""},{"location":"requestclient.html","title":"Requestclient","text":""},{"location":"requestclient.html#rucio.client.requestclient-classes","title":"Classes","text":""},{"location":"requestclient.html#rucio.client.requestclient.RequestClient","title":"RequestClient","text":"<pre><code>RequestClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient-functions","title":"Functions","text":""},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.list_requests","title":"list_requests","text":"<pre><code>list_requests(src_rse, dst_rse, request_states)\n</code></pre> <p>Return latest request details</p> <p>:return: request information</p>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.list_requests_history","title":"list_requests_history","text":"<pre><code>list_requests_history(\n    src_rse, dst_rse, request_states, offset=0, limit=100\n)\n</code></pre> <p>Return historical request details</p> <p>:return: request information</p>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.list_request_by_did","title":"list_request_by_did","text":"<pre><code>list_request_by_did(name, rse, scope=None)\n</code></pre> <p>Return latest request details for a DID</p> <p>:param name: DID :param rse: Destination RSE name :param scope: rucio scope, defaults to None :raises exc_cls: from BaseClient._get_exception :return: request information</p>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.list_request_history_by_did","title":"list_request_history_by_did","text":"<pre><code>list_request_history_by_did(name, rse, scope=None)\n</code></pre> <p>Return latest request details for a DID</p> <p>:param name: DID :param rse: Destination RSE name :param scope: rucio scope, defaults to None :raises exc_cls: from BaseClient._get_exception :return: request information</p>"},{"location":"requestclient.html#rucio.client.requestclient-functions","title":"Functions","text":""},{"location":"richclient.html","title":"Richclient","text":""},{"location":"richclient.html#rucio.client.richclient-classes","title":"Classes","text":""},{"location":"richclient.html#rucio.client.richclient.CLITheme","title":"CLITheme","text":"<p>Class to define styles for Rich widgets and prints in the CLI.</p>"},{"location":"richclient.html#rucio.client.richclient-functions","title":"Functions","text":""},{"location":"richclient.html#rucio.client.richclient.setup_rich_logger","title":"setup_rich_logger","text":"<pre><code>setup_rich_logger(\n    module_name=None,\n    logger_name=None,\n    logger_level=None,\n    verbose=False,\n    console=None,\n)\n</code></pre> <p>Factory method to set logger with RichHandler.</p> <p>The function is a copy of the method in rucio.common.utils setup_logger() with minor changes.</p> <p>:param module_name: name of the module that is calling this method :param logger_name: name of the logger, typically name of the module. :param logger_level: if not given, fetched from config. :param verbose: verbose option set in bin/rucio :param console: Rich console object :returns: logger with RichHandler</p>"},{"location":"richclient.html#rucio.client.richclient.generate_table","title":"generate_table","text":"<pre><code>generate_table(\n    rows,\n    headers=None,\n    row_styles=None,\n    col_alignments=None,\n    table_format=CLITheme.TABLE_FMT,\n)\n</code></pre> <p>Generates a Rich Table object from given input rows.</p> <p>The elements in each row can be either plain strings or Rich renderable objects. Passing strings will display them as simple text, while using Rich objects allows you to introduce additional structure, styling, and widgets (e.g. Text, Trees) into the table. Strings with style markup will be rendered as styled text.</p> <p>:param table_format: style of the table :param headers: list of headers :param rows: list of rows :param col_alignments: list of column alignments :param row_styles: list of row styles :returns: a Rich Table object</p>"},{"location":"richclient.html#rucio.client.richclient.print_output","title":"print_output","text":"<pre><code>print_output(*output, console, no_pager=False)\n</code></pre> <p>Prints the objects using the specified Rich console object. Optionally disables the pager if specified.</p> <p>The function works similarly to Rich's <code>console.print()</code> method but provides additional control over the pager feature.</p> <p>:param output: objects to print to the terminal :param console: Rich console object :param no_pager: flag to disable the pager</p>"},{"location":"richclient.html#rucio.client.richclient.get_cli_config","title":"get_cli_config","text":"<pre><code>get_cli_config()\n</code></pre> <p>Returns the CLI type from the config file.</p> <p>:returns: CLI type (Rich or tabulate)</p>"},{"location":"richclient.html#rucio.client.richclient.get_pager","title":"get_pager","text":"<pre><code>get_pager()\n</code></pre> <p>Returns the pager function based on the terminal availability.</p> <p>:returns: pager</p>"},{"location":"rseclient.html","title":"Rseclient","text":""},{"location":"rseclient.html#rucio.client.rseclient-classes","title":"Classes","text":""},{"location":"rseclient.html#rucio.client.rseclient.RSEClient","title":"RSEClient","text":"<pre><code>RSEClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>RSE client class for working with rucio RSEs</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient-functions","title":"Functions","text":""},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_rse","title":"get_rse","text":"<pre><code>get_rse(rse)\n</code></pre> <p>Returns details about the referred RSE.</p> <p>:param rse: Name of the referred RSE</p> <p>:returns: A dict containing all attributes of the referred RSE</p> <p>:raises RSENotFound: if the referred RSE was not found in the database</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_rse","title":"add_rse","text":"<pre><code>add_rse(rse, **kwargs)\n</code></pre> <p>Sends the request to create a new RSE.</p> <p>:param rse: the name of the rse. :param deterministic: Boolean to know if the pfn is generated deterministically. :param volatile: Boolean for RSE cache. :param city: City for the RSE. :param region_code: The region code for the RSE. :param country_name: The country. :param continent: The continent. :param time_zone: Timezone. :param staging_area: Staging area. :param ISP: Internet service provider. :param rse_type: RSE type. :param latitude: Latitude coordinate of RSE. :param longitude: Longitude coordinate of RSE. :param ASN: Access service network. :param availability: Availability.</p> <p>:return: True if location was created successfully else False. :raises Duplicate: if rse already exists.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.update_rse","title":"update_rse","text":"<pre><code>update_rse(rse, parameters)\n</code></pre> <p>Update RSE properties like availability or name.</p> <p>:param rse: the name of the new rse. :param  parameters: A dictionary with property (name, read, write, delete as keys).</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_rse","title":"delete_rse","text":"<pre><code>delete_rse(rse)\n</code></pre> <p>Sends the request to delete a rse.</p> <p>:param rse: the name of the rse. :return: True if location was created successfully else False.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.list_rses","title":"list_rses","text":"<pre><code>list_rses(rse_expression=None)\n</code></pre> <p>Sends the request to list all rucio locations(RSEs).</p> <p>:rse_expression: RSE Expression to use as filter. :return:         a list containing the names of all rucio locations.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_rse_attribute","title":"add_rse_attribute","text":"<pre><code>add_rse_attribute(rse, key, value)\n</code></pre> <p>Sends the request to add a RSE attribute.</p> <p>:param rse: the name of the rse. :param key: the attribute key. :param value: the attribute value.</p> <p>:return: True if RSE attribute was created successfully else False. :raises Duplicate: if RSE attribute already exists.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_rse_attribute","title":"delete_rse_attribute","text":"<pre><code>delete_rse_attribute(rse, key)\n</code></pre> <p>Sends the request to delete a RSE attribute.</p> <p>:param rse: the RSE name. :param key: the attribute key.</p> <p>:return: True if RSE attribute was deleted successfully else False.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.list_rse_attributes","title":"list_rse_attributes","text":"<pre><code>list_rse_attributes(rse)\n</code></pre> <p>Sends the request to get RSE attributes.</p> <p>:param rse: The RSE name.</p> <p>:return: A <code>dict</code> with the RSE attribute name/value pairs.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_protocol","title":"add_protocol","text":"<pre><code>add_protocol(rse, params)\n</code></pre> <p>Sends the request to create a new protocol for the given RSE.</p> <p>:param rse: the name of the  rse. :param scheme: identifier of this protocol :param params: Attributes of the protocol. Supported are:     hostname:       hostname for this protocol (default = localhost)     port:           port for this protocol (default = 0)     prefix:         string used as a prfeix for this protocol when generating the PFN (default = None)     impl:           qualified name of the implementation class for this protocol (mandatory)     read:           integer representing the priority of this procotol for read operations (default = -1)     write:          integer representing the priority of this procotol for write operations (default = -1)     delete:         integer representing the priority of this procotol for delete operations (default = -1)     extended_attributes:  miscellaneous protocol specific information e.g. spacetoken for SRM (default = None)</p> <p>:return: True if protocol was created successfully else False.</p> <p>:raises Duplicate: if protocol with same hostname, port and protocol identifier                     already exists for the given RSE. :raises RSENotFound: if the RSE doesn't exist. :raises KeyNotFound: if params is missing manadtory attributes to create the                      protocol. :raises AccessDenied: if not authorized.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_protocols","title":"get_protocols","text":"<pre><code>get_protocols(\n    rse,\n    protocol_domain=\"ALL\",\n    operation=None,\n    default=False,\n    scheme=None,\n)\n</code></pre> <p>Returns protocol information. Parameter combinations are: (operation OR default) XOR protocol.</p> <p>:param rse: the RSE name. :param protocol_domain: The scope of the protocol. Supported are 'LAN', 'WAN', and 'ALL' (as default). :param operation: The name of the requested operation (read, write, or delete).                   If None, all operations are queried. :param default: Indicates if only the default operations should be returned. :param scheme: The identifier of the requested protocol.</p> <p>:returns: A dict with details about each matching protocol.</p> <p>:raises RSENotFound: if the RSE doesn't exist. :raises RSEProtocolNotSupported: if no matching protocol entry could be found. :raises RSEOperationNotSupported: if no matching protocol entry for the requested                                   operation could be found.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.lfns2pfns","title":"lfns2pfns","text":"<pre><code>lfns2pfns(\n    rse,\n    lfns,\n    protocol_domain=\"ALL\",\n    operation=None,\n    scheme=None,\n)\n</code></pre> <p>Returns PFNs that should be used at a RSE, corresponding to requested LFNs. The PFNs are generated for the RSE regardless of whether a replica exists for the LFN.</p> <p>:param rse: the RSE name :param lfns: A list of LFN strings to translate to PFNs. :param protocol_domain: The scope of the protocol. Supported are 'LAN', 'WAN', and 'ALL' (as default). :param operation: The name of the requested operation (read, write, or delete).                   If None, all operations are queried. :param scheme: The identifier of the requested protocol (gsiftp, https, davs, etc).</p> <p>:returns: A dictionary of LFN / PFN pairs. :raises RSENotFound: if the RSE doesn't exist. :raises RSEProtocolNotSupported: if no matching protocol entry could be found. :raises RSEOperationNotSupported: if no matching protocol entry for the requested                                   operation could be found.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_protocols","title":"delete_protocols","text":"<pre><code>delete_protocols(rse, scheme, hostname=None, port=None)\n</code></pre> <p>Deletes matching protocols from RSE. Protocols using the same identifier can be distinguished by hostname and port.</p> <p>:param rse: the RSE name. :param scheme: identifier of the protocol. :param hostname: hostname of the protocol. :param port: port of the protocol.</p> <p>:returns: True if success.</p> <p>:raises RSEProtocolNotSupported: if no matching protocol entry could be found. :raises RSENotFound: if the RSE doesn't exist. :raises AccessDenied: if not authorized.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.update_protocols","title":"update_protocols","text":"<pre><code>update_protocols(\n    rse, scheme, data, hostname=None, port=None\n)\n</code></pre> <p>Updates matching protocols from RSE. Protocol using the same identifier can be distinguished by hostname and port.</p> <p>:param rse: the RSE name. :param scheme: identifier of the protocol. :param data: A dict providing the new values of the protocol attributes.              Keys must match column names in database. :param hostname: hostname of the protocol. :param port: port of the protocol.</p> <p>:returns: True if success.</p> <p>:raises RSEProtocolNotSupported: if no matching protocol entry could be found. :raises RSENotFound: if the RSE doesn't exist. :raises KeyNotFound: if invalid data was provided for update. :raises AccessDenied: if not authorized.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.swap_protocols","title":"swap_protocols","text":"<pre><code>swap_protocols(rse, domain, operation, scheme_a, scheme_b)\n</code></pre> <p>Swaps the priorities of the provided operation.</p> <p>:param rse: the RSE name. :param domain: the domain in which priorities should be swapped i.e. wan or lan. :param operation: the operation that should be swapped i.e. read, write, or delete. :param scheme_a: the scheme of one of the two protocols to be swapped, e.g. srm. :param scheme_b: the scheme of the other of the two protocols to be swapped, e.g. http.</p> <p>:returns: True if success.</p> <p>:raises RSEProtocolNotSupported: if no matching protocol entry could be found. :raises RSENotFound: if the RSE doesn't exist. :raises KeyNotFound: if invalid data was provided for update. :raises AccessDenied: if not authorized.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_qos_policy","title":"add_qos_policy","text":"<pre><code>add_qos_policy(rse, qos_policy)\n</code></pre> <p>Add a QoS policy from an RSE.</p> <p>:param rse_id: The id of the RSE. :param qos_policy: The QoS policy to add. :param session: The database session in use.</p> <p>:raises Duplicate: If the QoS policy already exists. :returns: True if successful, except otherwise.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_qos_policy","title":"delete_qos_policy","text":"<pre><code>delete_qos_policy(rse, qos_policy)\n</code></pre> <p>Delete a QoS policy from an RSE.</p> <p>:param rse_id: The id of the RSE. :param qos_policy: The QoS policy to delete. :param session: The database session in use.</p> <p>:returns: True if successful, silent failure if QoS policy does not exist.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.list_qos_policies","title":"list_qos_policies","text":"<pre><code>list_qos_policies(rse)\n</code></pre> <p>List all QoS policies of an RSE.</p> <p>:param rse_id: The id of the RSE. :param session: The database session in use.</p> <p>:returns: List containing all QoS policies.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.set_rse_usage","title":"set_rse_usage","text":"<pre><code>set_rse_usage(rse, source, used, free, files=None)\n</code></pre> <p>Set RSE usage information.</p> <p>:param rse: the RSE name. :param source: the information source, e.g. srm. :param used: the used space in bytes. :param free: the free in bytes. :param files: the number of files</p> <p>:returns: True if successful</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_rse_usage","title":"get_rse_usage","text":"<pre><code>get_rse_usage(rse, filters=None)\n</code></pre> <p>Get RSE usage information.</p> <p>:param rse: the RSE name. :param filters: dictionary of attributes by which the results should be filtered</p> <p>:returns: True if successful, otherwise false.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.list_rse_usage_history","title":"list_rse_usage_history","text":"<pre><code>list_rse_usage_history(rse, filters=None)\n</code></pre> <p>List RSE usage history information.</p> <p>:param rse: The RSE name. :param filters: dictionary of attributes by which the results should be filtered.</p> <p>:returns:  list of dictionaries.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.set_rse_limits","title":"set_rse_limits","text":"<pre><code>set_rse_limits(rse, name, value)\n</code></pre> <p>Set RSE limit information.</p> <p>:param rse: The RSE name. :param name: The name of the limit. :param value: The feature value.</p> <p>:returns: True if successful</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_rse_limits","title":"get_rse_limits","text":"<pre><code>get_rse_limits(rse)\n</code></pre> <p>Get RSE limits.</p> <p>:param rse: The RSE name.</p> <p>:returns: An iterator of RSE limits as dicts with 'name' and 'value' as keys.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_rse_limits","title":"delete_rse_limits","text":"<pre><code>delete_rse_limits(rse, name)\n</code></pre> <p>Delete RSE limit information.</p> <p>:param rse: The RSE name. :param name: The name of the limit.</p> <p>:returns: True if successful</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_distance","title":"add_distance","text":"<pre><code>add_distance(source, destination, parameters)\n</code></pre> <p>Add a src-dest distance.</p> <p>:param source: The source. :param destination: The destination. :param parameters: A dictionary with property.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.update_distance","title":"update_distance","text":"<pre><code>update_distance(source, destination, parameters)\n</code></pre> <p>Update distances with the given RSE ids.</p> <p>:param source: The source. :param destination: The destination. :param parameters: A dictionary with property.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_distance","title":"get_distance","text":"<pre><code>get_distance(source, destination)\n</code></pre> <p>Get distances between rses.</p> <p>:param source: The source RSE. :param destination: The destination RSE.</p> <p>:returns distance: List of dictionaries.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_distance","title":"delete_distance","text":"<pre><code>delete_distance(source, destination)\n</code></pre> <p>Delete distances with the given RSE ids.</p> <p>:param source: The source. :param destination: The destination.</p>"},{"location":"rseclient.html#rucio.client.rseclient-functions","title":"Functions","text":""},{"location":"ruleclient.html","title":"Ruleclient","text":""},{"location":"ruleclient.html#rucio.client.ruleclient-classes","title":"Classes","text":""},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient","title":"RuleClient","text":"<pre><code>RuleClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>RuleClient class for working with replication rules</p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient-functions","title":"Functions","text":""},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.add_replication_rule","title":"add_replication_rule","text":"<pre><code>add_replication_rule(\n    dids,\n    copies,\n    rse_expression,\n    priority=3,\n    lifetime=None,\n    grouping=\"DATASET\",\n    notify=\"N\",\n    source_replica_expression=None,\n    activity=None,\n    account=None,\n    meta=None,\n    ignore_availability=False,\n    purge_replicas=False,\n    ask_approval=False,\n    asynchronous=False,\n    locked=False,\n    delay_injection=None,\n    comment=None,\n    weight=None,\n)\n</code></pre> <p>:param dids:                       The data identifier set. :param copies:                     The number of replicas. :param rse_expression:             Boolean string expression to give the list of RSEs. :param priority:                   Priority of the transfers. :param lifetime:                   The lifetime of the replication rules (in seconds). :param grouping:                   ALL -  All files will be replicated to the same RSE.                                    DATASET - All files in the same dataset will be replicated to the same RSE.                                    NONE - Files will be completely spread over all allowed RSEs without any grouping considerations at all. :param notify:                     Notification setting for the rule (Y, N, C). :param source_replica_expression:  RSE Expression for RSEs to be considered for source replicas. :param activity:                   Transfer Activity to be passed to FTS. :param account:                    The account owning the rule. :param meta:                       Metadata, as dictionary. :param ignore_availability:        Option to ignore the availability of RSEs. :param purge_replicas:             When the rule gets deleted purge the associated replicas immediately. :param ask_approval:               Ask for approval of this replication rule. :param asynchronous:               Create rule asynchronously by judge-injector. :param locked:                     If the rule is locked, it cannot be deleted. :param delay_injection: :param comment:                    Comment about the rule. :param weight:                     If the weighting option of the replication rule is used, the choice of RSEs takes their weight into account.</p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.delete_replication_rule","title":"delete_replication_rule","text":"<pre><code>delete_replication_rule(rule_id, purge_replicas=None)\n</code></pre> <p>Deletes a replication rule and all associated locks.</p> <p>:param rule_id:         The id of the rule to be deleted :param purge_replicas:  Immediately delete the replicas. :raises:                RuleNotFound, AccessDenied</p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.get_replication_rule","title":"get_replication_rule","text":"<pre><code>get_replication_rule(rule_id)\n</code></pre> <p>Get a replication rule.</p> <p>:param rule_id:  The id of the rule to be retrieved. :raises:         RuleNotFound</p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.update_replication_rule","title":"update_replication_rule","text":"<pre><code>update_replication_rule(rule_id, options)\n</code></pre> <p>:param rule_id:   The id of the rule to be retrieved. :param options:   Options dictionary. :raises:          RuleNotFound</p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.reduce_replication_rule","title":"reduce_replication_rule","text":"<pre><code>reduce_replication_rule(\n    rule_id, copies, exclude_expression=None\n)\n</code></pre> <p>:param rule_id:             Rule to be reduced. :param copies:              Number of copies of the new rule. :param exclude_expression:  RSE Expression of RSEs to exclude. :raises:                    RuleReplaceFailed, RuleNotFound</p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.move_replication_rule","title":"move_replication_rule","text":"<pre><code>move_replication_rule(rule_id, rse_expression, override)\n</code></pre> <p>Move a replication rule to another RSE and, once done, delete the original one.</p> <p>:param rule_id:                    Rule to be moved. :param rse_expression:             RSE expression of the new rule. :param override:                   Configurations to update for the new rule. :raises:                           RuleNotFound, RuleReplaceFailed</p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.approve_replication_rule","title":"approve_replication_rule","text":"<pre><code>approve_replication_rule(rule_id)\n</code></pre> <p>:param rule_id:             Rule to be approved. :raises:                    RuleNotFound</p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.deny_replication_rule","title":"deny_replication_rule","text":"<pre><code>deny_replication_rule(rule_id, reason=None)\n</code></pre> <p>:param rule_id:             Rule to be denied. :param reason:              Reason for denying the rule. :raises:                    RuleNotFound</p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.list_replication_rule_full_history","title":"list_replication_rule_full_history","text":"<pre><code>list_replication_rule_full_history(scope, name)\n</code></pre> <p>List the rule history of a DID.</p> <p>:param scope: The scope of the DID. :param name: The name of the DID.</p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.examine_replication_rule","title":"examine_replication_rule","text":"<pre><code>examine_replication_rule(rule_id)\n</code></pre> <p>Examine a replication rule for errors during transfer.</p> <p>:param rule_id:             Rule to be denied. :raises:                    RuleNotFound</p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.list_replica_locks","title":"list_replica_locks","text":"<pre><code>list_replica_locks(rule_id)\n</code></pre> <p>List details of all replica locks for a rule.</p> <p>:param rule_id:             Rule to be denied. :raises:                    RuleNotFound</p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.list_replication_rules","title":"list_replication_rules","text":"<pre><code>list_replication_rules(filters=None)\n</code></pre> <p>List all replication rules which match a filter :param filters: dictionary of attributes by which the rules should be filtered</p> <p>:returns: True if successful, otherwise false.</p>"},{"location":"ruleclient.html#rucio.client.ruleclient-functions","title":"Functions","text":""},{"location":"scopeclient.html","title":"Scopeclient","text":""},{"location":"scopeclient.html#rucio.client.scopeclient-classes","title":"Classes","text":""},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient","title":"ScopeClient","text":"<pre><code>ScopeClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Scope client class for working with rucio scopes</p>"},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient-functions","title":"Functions","text":""},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient.add_scope","title":"add_scope","text":"<pre><code>add_scope(account, scope)\n</code></pre> <p>Sends the request to add a new scope.</p> <p>:param account: the name of the account to add the scope to. :param scope: the name of the new scope. :return: True if scope was created successfully. :raises Duplicate: if scope already exists. :raises AccountNotFound: if account doesn't exist.</p>"},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient.list_scopes","title":"list_scopes","text":"<pre><code>list_scopes()\n</code></pre> <p>Sends the request to list all scopes.</p> <p>:return: a list containing the names of all scopes.</p>"},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient.list_scopes_for_account","title":"list_scopes_for_account","text":"<pre><code>list_scopes_for_account(account)\n</code></pre> <p>Sends the request to list all scopes for a rucio account.</p> <p>:param account: the rucio account to list scopes for. :return: a list containing the names of all scopes for a rucio account. :raises AccountNotFound: if account doesn't exist. :raises ScopeNotFound: if no scopes exist for account.</p>"},{"location":"scopeclient.html#rucio.client.scopeclient-functions","title":"Functions","text":""},{"location":"subscriptionclient.html","title":"Subscriptionclient","text":""},{"location":"subscriptionclient.html#rucio.client.subscriptionclient-classes","title":"Classes","text":""},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient","title":"SubscriptionClient","text":"<pre><code>SubscriptionClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>SubscriptionClient class for working with subscriptions</p>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient-functions","title":"Functions","text":""},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient.add_subscription","title":"add_subscription","text":"<pre><code>add_subscription(\n    name,\n    account,\n    filter_,\n    replication_rules,\n    comments,\n    lifetime,\n    retroactive,\n    dry_run,\n    priority=3,\n)\n</code></pre> <p>Adds a new subscription which will be verified against every new added file and dataset</p> <p>:param name: Name of the subscription :param account: Account identifier :param filter_: Dictionary of attributes by which the input data should be filtered                Example: <code>{'dsn': 'data11_hi*.express_express.*,data11_hi*physics_MinBiasOverlay*', 'account': 'tzero'}</code> :param replication_rules: Replication rules to be set : Dictionary with keys copies, rse_expression, weight, rse_expression :param comments: Comments for the subscription :param lifetime: Subscription's lifetime (days); False if subscription has no lifetime :param retroactive: Flag to know if the subscription should be applied on previous data :param dry_run: Just print the subscriptions actions without actually executing them (Useful if retroactive flag is set) :param priority: The priority of the subscription (3 by default)</p>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient.list_subscriptions","title":"list_subscriptions","text":"<pre><code>list_subscriptions(name=None, account=None)\n</code></pre> <p>Returns a dictionary with the subscription information : Examples: <code>{'status': 'INACTIVE/ACTIVE/BROKEN', 'last_modified_date': ...}</code></p> <p>:param name: Name of the subscription :param account: Account identifier :returns: Dictionary containing subscription parameter :raises: exception.NotFound if subscription is not found</p>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient.update_subscription","title":"update_subscription","text":"<pre><code>update_subscription(\n    name,\n    account=None,\n    filter_=None,\n    replication_rules=None,\n    comments=None,\n    lifetime=None,\n    retroactive=None,\n    dry_run=None,\n    priority=None,\n)\n</code></pre> <p>Updates a subscription</p> <p>:param name: Name of the subscription :param account: Account identifier :param filter_: Dictionary of attributes by which the input data should be filtered                Example: <code>{'dsn': 'data11_hi*.express_express.*,data11_hi*physics_MinBiasOverlay*', 'account': 'tzero'}</code> :param replication_rules: Replication rules to be set : Dictionary with keys copies, rse_expression, weight, rse_expression :param comments: Comments for the subscription :param lifetime: Subscription's lifetime (days); False if subscription has no lifetime :param retroactive: Flag to know if the subscription should be applied on previous data :param dry_run: Just print the subscriptions actions without actually executing them (Useful if retroactive flag is set) :param priority: The priority of the subscription :raises: exception.NotFound if subscription is not found</p>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient.list_subscription_rules","title":"list_subscription_rules","text":"<pre><code>list_subscription_rules(account, name)\n</code></pre> <p>List the associated rules of a subscription.</p> <p>:param account: Account of the subscription. :param name:    Name of the subscription.</p>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient-functions","title":"Functions","text":""},{"location":"touchclient.html","title":"Touchclient","text":""},{"location":"touchclient.html#rucio.client.touchclient-classes","title":"Classes","text":""},{"location":"touchclient.html#rucio.client.touchclient.TouchClient","title":"TouchClient","text":"<pre><code>TouchClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Touch client class to send a trace that can be used to update accessed_at for file or dataset DIDs</p>"},{"location":"touchclient.html#rucio.client.touchclient.TouchClient-functions","title":"Functions","text":""},{"location":"touchclient.html#rucio.client.touchclient.TouchClient.touch","title":"touch","text":"<pre><code>touch(scope, name, rse=None)\n</code></pre> <p>Sends a touch trace for a given file or dataset.</p> <p>:param scope: the scope of the file/dataset to update. :param name: the name of file/dataset to update. :param rse: optional parameter if a specific replica should be touched. :raises DataIdentifierNotFound: if given dids does not exist. :raises RSENotFound: if rse is not None and given rse does not exist. :raises UnsupportedDIDType: if type of the given DID is not FILE or DATASET. :raises RucioException: if trace could not be sent successfully.</p>"},{"location":"touchclient.html#rucio.client.touchclient-functions","title":"Functions","text":""},{"location":"uploadclient.html","title":"Uploadclient","text":""},{"location":"uploadclient.html#rucio.client.uploadclient-classes","title":"Classes","text":""},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient","title":"UploadClient","text":"<pre><code>UploadClient(_client=None, logger=None, tracing=True)\n</code></pre> <p>Initialises the basic settings for an UploadClient object</p> <p>:param _client:     - Optional: rucio.client.client.Client object. If None, a new object will be created. :param logger:      - Optional: logging.Logger object. If None, default logger will be used.</p>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient-functions","title":"Functions","text":""},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient.upload","title":"upload","text":"<pre><code>upload(\n    items,\n    summary_file_path=None,\n    traces_copy_out=None,\n    ignore_availability=False,\n    activity=None,\n)\n</code></pre> <p>:param items: List of dictionaries. Each dictionary describing a file to upload. Keys:     path                  - path of the file that will be uploaded     rse                   - rse expression/name (e.g. 'CERN-PROD_DATADISK') where to upload the file     did_scope             - Optional: custom did scope (Default: user.)     did_name              - Optional: custom did name (Default: name of the file)     dataset_scope         - Optional: custom dataset scope     dataset_name          - Optional: custom dataset name     dataset_meta          - Optional: custom metadata for dataset     impl                  - Optional: name of the protocol implementation to be used to upload this item.     force_scheme          - Optional: force a specific scheme (if PFN upload this will be overwritten) (Default: None)     pfn                   - Optional: use a given PFN (this sets no_register to True, and no_register becomes mandatory)     no_register           - Optional: if True, the file will not be registered in the rucio catalogue     register_after_upload - Optional: if True, the file will be registered after successful upload     lifetime              - Optional: the lifetime of the file after it was uploaded     transfer_timeout      - Optional: time after the upload will be aborted     guid                  - Optional: guid of the file     recursive             - Optional: if set, parses the folder structure recursively into collections :param summary_file_path: Optional: a path where a summary in form of a json file will be stored :param traces_copy_out: reference to an external list, where the traces should be uploaded :param ignore_availability: ignore the availability of a RSE :param activity: the activity set to the rule if no dataset is specified <p>:returns: 0 on success</p> <p>:raises InputValidationError: if any input arguments are in a wrong format :raises RSEWriteBlocked: if a given RSE is not available for writing :raises NoFilesUploaded: if no files were successfully uploaded :raises NotAllFilesUploaded: if not all files were successfully uploaded</p>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient.preferred_impl","title":"preferred_impl","text":"<pre><code>preferred_impl(rse_settings, domain)\n</code></pre> <p>Finds the optimum protocol impl preferred by the client and supported by the remote RSE.</p> <p>:param rse_settings: dictionary containing the RSE settings :param domain:     The network domain, either 'wan' (default) or 'lan'</p> <p>:raises RucioException(msg): general exception with msg for more details.</p>"},{"location":"uploadclient.html#rucio.client.uploadclient-functions","title":"Functions","text":""}]}