{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"accountclient.html","title":"Accountclient","text":""},{"location":"accountclient.html#rucio.client.accountclient-classes","title":"Classes","text":""},{"location":"accountclient.html#rucio.client.accountclient.AccountClient","title":"AccountClient","text":"<pre><code>AccountClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Account client class for working with rucio accounts</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient-functions","title":"Functions","text":""},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.add_account","title":"add_account","text":"<pre><code>add_account(account, type_, email)\n</code></pre> <p>Sends the request to create a new account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The name of the account.</p> <p> TYPE: <code>str</code> </p> <code>type_</code> <p>The account type.</p> <p> TYPE: <code>str</code> </p> <code>email</code> <p>The Email address associated with the account.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>    True if account was created successfully else False.</code> RAISES DESCRIPTION <code>Duplicate</code> <p>If account already exists.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.delete_account","title":"delete_account","text":"<pre><code>delete_account(account)\n</code></pre> <p>Send the request to disable an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The name of the account.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>    True if account was disabled successfully. False otherwise.</code> RAISES DESCRIPTION <code>AccountNotFound</code> <p>If account doesn't exist.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_account","title":"get_account","text":"<pre><code>get_account(account)\n</code></pre> <p>Send the request to get information about a given account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The name of the account.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>    A dictionary of attributes for the account. None if failure.</code> RAISES DESCRIPTION <code>AccountNotFound</code> <p>If account doesn't exist.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.update_account","title":"update_account","text":"<pre><code>update_account(account, key, value)\n</code></pre> <p>Update a property of an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>Name of the account.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>Account property like status.</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>Property value.</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>    True if successful.</code> RAISES DESCRIPTION <code>Exception</code> <p>If update fails.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.list_accounts","title":"list_accounts","text":"<pre><code>list_accounts(\n    account_type=None, identity=None, filters=None\n)\n</code></pre> <p>Send the request to list all rucio accounts.</p> PARAMETER DESCRIPTION <code>account_type</code> <p>The account type.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>identity</code> <p>The identity key name. For example x509 DN, or a username.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>filters</code> <p>A dictionary key:account attribute to use for the filtering.</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>    An iterator of dictionaries containing account information.</code> RAISES DESCRIPTION <code>AccountNotFound</code> <p>If account doesn't exist.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.whoami","title":"whoami","text":"<pre><code>whoami()\n</code></pre> <p>Get information about account whose token is used.</p> RETURNS DESCRIPTION <code>    A dictionary of attributes for the account. None if failure.</code> RAISES DESCRIPTION <code>AccountNotFound</code> <p>If account doesn't exist.</p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.add_identity","title":"add_identity","text":"<pre><code>add_identity(\n    account,\n    identity,\n    authtype,\n    email,\n    default=False,\n    password=None,\n)\n</code></pre> <p>Add a membership association between identity and account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>identity</code> <p>The identity key name. For example x509 DN, or a username.</p> <p> TYPE: <code>str</code> </p> <code>authtype</code> <p>The type of the authentication (x509, gss, userpass).</p> <p> TYPE: <code>str</code> </p> <code>email</code> <p>The Email address associated with the identity.</p> <p> TYPE: <code>str</code> </p> <code>default</code> <p>If True, the account should be used by default with the provided identity.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>password</code> <p>Password if authtype is userpass.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>    True if successful.</code>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.del_identity","title":"del_identity","text":"<pre><code>del_identity(account, identity, authtype)\n</code></pre> <p>Delete an identity's membership association with an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>identity</code> <p>The identity key name. For example x509 DN, or a username.</p> <p> TYPE: <code>str</code> </p> <code>authtype</code> <p>The type of the authentication (x509, gss, userpass).</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>    True if successful.</code>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.list_identities","title":"list_identities","text":"<pre><code>list_identities(account)\n</code></pre> <p>List all identities on an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.list_account_rules","title":"list_account_rules","text":"<pre><code>list_account_rules(account)\n</code></pre> <p>List the associated rules of an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_account_limits","title":"get_account_limits","text":"<pre><code>get_account_limits(account, rse_expression, locality)\n</code></pre> <p>Return the correct account limits for the given locality.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>rse_expression</code> <p>Valid RSE expression.</p> <p> TYPE: <code>str</code> </p> <code>locality</code> <p>The scope of the account limit. 'local' or 'global'.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_global_account_limit","title":"get_global_account_limit","text":"<pre><code>get_global_account_limit(account, rse_expression)\n</code></pre> <p>List the account limit for the specific RSE expression.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>rse_expression</code> <p>The rse expression.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_global_account_limits","title":"get_global_account_limits","text":"<pre><code>get_global_account_limits(account)\n</code></pre> <p>List all RSE expression limits of this account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_local_account_limits","title":"get_local_account_limits","text":"<pre><code>get_local_account_limits(account)\n</code></pre> <p>List the account rse limits of this account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_local_account_limit","title":"get_local_account_limit","text":"<pre><code>get_local_account_limit(account, rse)\n</code></pre> <p>List the account rse limits of this account for the specific rse.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>The rse name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_local_account_usage","title":"get_local_account_usage","text":"<pre><code>get_local_account_usage(account, rse=None)\n</code></pre> <p>List the account usage for one or all rses of this account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>The rse name.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_global_account_usage","title":"get_global_account_usage","text":"<pre><code>get_global_account_usage(account, rse_expression=None)\n</code></pre> <p>List the account usage for one or all RSE expressions of this account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>rse_expression</code> <p>The rse expression.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.get_account_usage_history","title":"get_account_usage_history","text":"<pre><code>get_account_usage_history(account, rse)\n</code></pre> <p>List the account usage history of this account on rse.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>The rse name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.list_account_attributes","title":"list_account_attributes","text":"<pre><code>list_account_attributes(account)\n</code></pre> <p>List the attributes for an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.add_account_attribute","title":"add_account_attribute","text":"<pre><code>add_account_attribute(account, key, value)\n</code></pre> <p>Add an attribute to an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>The attribute key.</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The attribute value.</p> <p> TYPE: <code>Any</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient.AccountClient.delete_account_attribute","title":"delete_account_attribute","text":"<pre><code>delete_account_attribute(account, key)\n</code></pre> <p>Delete an attribute for an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The account name.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>The attribute key.</p> <p> TYPE: <code>str</code> </p>"},{"location":"accountclient.html#rucio.client.accountclient-functions","title":"Functions","text":""},{"location":"accountlimitclient.html","title":"Accountlimitclient","text":""},{"location":"accountlimitclient.html#rucio.client.accountlimitclient-classes","title":"Classes","text":""},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient","title":"AccountLimitClient","text":"<pre><code>AccountLimitClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Account limit client class for working with account limits</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient-functions","title":"Functions","text":""},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.set_account_limit","title":"set_account_limit","text":"<pre><code>set_account_limit(account, rse, bytes_, locality)\n</code></pre> <p>Sets an account limit for a given limit scope.</p> PARAMETER DESCRIPTION <code>account</code> <p>The name of the account.</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>The rse name.</p> <p> TYPE: <code>str</code> </p> <code>bytes_</code> <p>The limit in bytes.</p> <p> TYPE: <code>int</code> </p> <code>locality</code> <p>The scope of the account limit.</p> <p> TYPE: <code>Literal['local', 'global']</code> </p> RETURNS DESCRIPTION <code>    True if quota was created successfully, False otherwise.</code>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.delete_account_limit","title":"delete_account_limit","text":"<pre><code>delete_account_limit(account, rse, locality)\n</code></pre> <p>Deletes an account limit for a given limit scope.</p> PARAMETER DESCRIPTION <code>account</code> <p>The name of the account.</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>The rse name.</p> <p> TYPE: <code>str</code> </p> <code>locality</code> <p>The scope of the account limit.</p> <p> TYPE: <code>Literal['local', 'global']</code> </p> RETURNS DESCRIPTION <code>    True if quota was deleted successfully, False otherwise.</code>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.set_local_account_limit","title":"set_local_account_limit","text":"<pre><code>set_local_account_limit(account, rse, bytes_)\n</code></pre> <p>Sends the request to set an account limit for an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The name of the account.</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>The rse name.</p> <p> TYPE: <code>str</code> </p> <code>bytes_</code> <p>The limit in bytes.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>    True if quota was created successfully, False otherwise.</code>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.delete_local_account_limit","title":"delete_local_account_limit","text":"<pre><code>delete_local_account_limit(account, rse)\n</code></pre> <p>Sends the request to remove an account limit.</p> PARAMETER DESCRIPTION <code>account</code> <p>The name of the account.</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>The rse name.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>    True if quota was removed successfully, False otherwise.</code> RAISES DESCRIPTION <code>AccountNotFound</code> <p>If account doesn't exist.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.set_global_account_limit","title":"set_global_account_limit","text":"<pre><code>set_global_account_limit(account, rse_expression, bytes_)\n</code></pre> <p>Sends the request to set a global account limit for an account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The name of the account.</p> <p> TYPE: <code>str</code> </p> <code>rse_expression</code> <p>The rse expression.</p> <p> TYPE: <code>str</code> </p> <code>bytes_</code> <p>The limit in bytes.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>    True if quota was created successfully, False otherwise.</code>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient.AccountLimitClient.delete_global_account_limit","title":"delete_global_account_limit","text":"<pre><code>delete_global_account_limit(account, rse_expression)\n</code></pre> <p>Sends the request to remove a global account limit.</p> PARAMETER DESCRIPTION <code>account</code> <p>The name of the account.</p> <p> TYPE: <code>str</code> </p> <code>rse_expression</code> <p>The rse expression.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>    True if quota was removed successfully, False otherwise.</code> RAISES DESCRIPTION <code>AccountNotFound</code> <p>If account doesn't exist.</p>"},{"location":"accountlimitclient.html#rucio.client.accountlimitclient-functions","title":"Functions","text":""},{"location":"baseclient.html","title":"Baseclient","text":"<p>Client class for callers of the Rucio system</p>"},{"location":"baseclient.html#rucio.client.baseclient-classes","title":"Classes","text":""},{"location":"baseclient.html#rucio.client.baseclient.BaseClient","title":"BaseClient","text":"<pre><code>BaseClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Main client class for accessing Rucio resources. Handles the authentication.</p> <p>Constructor of the BaseClient.</p> PARAMETER DESCRIPTION <code>rucio_host</code> <p>The address of the rucio server, if None it is read from the config file.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auth_host</code> <p>The address of the rucio authentication server, if None it is read from the config file.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>account</code> <p>The account to authenticate to rucio.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>ca_cert</code> <p>The path to the rucio server certificate.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auth_type</code> <p>The type of authentication (e.g.: 'userpass', 'kerberos' ...)</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>creds</code> <p>Dictionary with credentials needed for authentication.</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p>Timeout for requests.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>600</code> </p> <code>user_agent</code> <p>Indicates the client.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'rucio-clients'</code> </p> <code>vo</code> <p>The VO to authenticate into.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>logger</code> <p>Logger object to use. If None, use the default LOG created by the module.</p> <p> TYPE: <code>Logger</code> DEFAULT: <code>LOG</code> </p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient-functions","title":"Functions","text":""},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_userpass","title":"__get_token_userpass","text":"<pre><code>__get_token_userpass()\n</code></pre> <p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses username/password.</p> <p>:returns: True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__refresh_token_oidc","title":"__refresh_token_oidc","text":"<pre><code>__refresh_token_oidc()\n</code></pre> <p>Checks if there is active refresh token and if so returns either active token with expiration timestamp or requests a new refresh and returns new access token with new expiration timestamp and saves these in the token directory.</p> <p>:returns: True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_oidc","title":"__get_token_oidc","text":"<pre><code>__get_token_oidc()\n</code></pre> <p>First authenticates the user via a Identity Provider server (with user's username &amp; password), by specifying oidc_scope, user agrees to share the relevant information with Rucio. If all proceeds well, an access token is requested from the Identity Provider. Access Tokens are not stored in Rucio DB. Refresh Tokens are granted only in case no valid access token exists in user's local storage, oidc_scope includes 'offline_access'. In such case, refresh token is stored in Rucio DB.</p> <p>:returns: True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_x509","title":"__get_token_x509","text":"<pre><code>__get_token_x509()\n</code></pre> <p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses x509 authentication.</p> <p>:returns: True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_ssh","title":"__get_token_ssh","text":"<pre><code>__get_token_ssh()\n</code></pre> <p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses SSH key exchange authentication.</p> <p>:returns: True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_gss","title":"__get_token_gss","text":"<pre><code>__get_token_gss()\n</code></pre> <p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses Kerberos authentication.</p> <p>:returns: True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token_saml","title":"__get_token_saml","text":"<pre><code>__get_token_saml()\n</code></pre> <p>Sends a request to get an auth token from the server and stores it as a class attribute. Uses saml authentication.</p> <p>:returns: True if the token was successfully received. False otherwise.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__get_token","title":"__get_token","text":"<pre><code>__get_token()\n</code></pre> <p>Calls the corresponding method to receive an auth token depending on the auth type. To be used if a 401 - Unauthorized error is received.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__read_token","title":"__read_token","text":"<pre><code>__read_token()\n</code></pre> <p>Checks if a local token file exists and reads the token from it.</p> <p>:return: True if a token could be read. False if no file exists.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__write_token","title":"__write_token","text":"<pre><code>__write_token()\n</code></pre> <p>Write the current auth_token to the local token file.</p>"},{"location":"baseclient.html#rucio.client.baseclient.BaseClient.__authenticate","title":"__authenticate","text":"<pre><code>__authenticate()\n</code></pre> <p>Main method for authentication. It first tries to read a locally saved token. If not available it requests a new one.</p>"},{"location":"baseclient.html#rucio.client.baseclient-functions","title":"Functions","text":""},{"location":"baseclient.html#rucio.client.baseclient.choice","title":"choice","text":"<pre><code>choice(hosts)\n</code></pre> <p>Select randomly a host</p> <p>:param hosts: Lost of hosts :return: A randomly selected host.</p>"},{"location":"client.html","title":"Client","text":"<p>Client class for callers of the Rucio system</p>"},{"location":"client.html#rucio.client.client-classes","title":"Classes","text":""},{"location":"client.html#rucio.client.client.Client","title":"Client","text":"<pre><code>Client(**args)\n</code></pre> <p>Main client class for accessing Rucio resources. Handles the authentication.</p> Note: <pre><code>Used to access all client methods. Each entity client *can* be used to access methods, but using the main client class is recommended for ease of use.\n</code></pre> Example: <pre><code>from rucio.client import Client\n\nclient = Client()  # authenticate with config or environ settings\nclient.add_replication_rule(...)\n\nclient = Client(\n    rucio_host = \"my_host\",\n    auth_host = \"my_auth_host\",\n    account = \"jdoe12345\",\n    auth_type = \"userpass\",\n    creds = {\n        \"username\": \"jdoe12345\",\n        \"password\": \"******\",\n    }\n) # authenticate with kwargs\nclient.list_replicas(...)\n\n\n# For using the upload and download clients\n\nfrom rucio.client import Client\nfrom rucio.client.uploadclient import UploadClient\nfrom rucio.client.downloadclient import DownloadClient\n\nclient = Client(...) # Initialize a client using your preferred method\n\nupload_client = UploadClient(client) # Pass forward the initialized client\nupload_client.upload(items=...)\n\ndownload_client = DownloadClient(client)\ndownload_client.download_dids(items=...)\n</code></pre> <p>Constructor for the Rucio main client class.</p> PARAMETER DESCRIPTION <code>rucio_host</code> <p>The host of the rucio system.</p> <p> </p> <code>auth_host</code> <p>The host of the rucio authentication server.</p> <p> </p> <code>account</code> <p>The rucio account that should be used to interact with the rucio system.</p> <p> </p> <code>ca_cert</code> <p>The certificate to verify the server.</p> <p> </p> <code>auth_type</code> <p>The type of authentication to use (e.g. userpass, x509 ...).</p> <p> </p> <code>creds</code> <p>Credentials needed for authentication.</p> <p> </p> <code>timeout</code> <p>Describes the timeout of the request (in seconds).</p> <p> </p> <code>vo</code> <p>The vo that the client will interact with.</p> <p> </p> <code>logger</code> <p>Logger instance to use.</p> <p> </p>"},{"location":"client.html#rucio.client.client.Client-functions","title":"Functions","text":""},{"location":"configclient.html","title":"Configclient","text":""},{"location":"configclient.html#rucio.client.configclient-classes","title":"Classes","text":""},{"location":"configclient.html#rucio.client.configclient.ConfigClient","title":"ConfigClient","text":"<pre><code>ConfigClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Client class for working with the configuration</p>"},{"location":"configclient.html#rucio.client.configclient.ConfigClient-functions","title":"Functions","text":""},{"location":"configclient.html#rucio.client.configclient.ConfigClient.get_config","title":"get_config","text":"<pre><code>get_config(section=None, option=None)\n</code></pre> <p>Sends the request to get the matching configuration.</p> PARAMETER DESCRIPTION <code>section</code> <p>The name of the section.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>option</code> <p>The option within the section.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"configclient.html#rucio.client.configclient.ConfigClient.set_config_option","title":"set_config_option","text":"<pre><code>set_config_option(\n    section, option, value, use_body_for_params=True\n)\n</code></pre> <p>Sends the request to create or set an option within a section. Missing sections will be created.</p> PARAMETER DESCRIPTION <code>section</code> <p>The name of the section.</p> <p> TYPE: <code>str</code> </p> <code>option</code> <p>The name of the option.</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The value to set on the config option.</p> <p> TYPE: <code>Any</code> </p> <code>use_body_for_params</code> <p>Send parameters in a json-encoded request body instead of url-encoded.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if option was set successfully.</p> Note: <p>The format of the /config endpoint was recently changed. We migrated from performing a PUT on \"/config///\" to sending the parameters using a json-encoded body. This was done to fix multiple un-wanted side effects related to how the middleware treats values encoded in a path. For a smooth transition, we allow both cases for now, but we should migrate to only passing values via the request body."},{"location":"configclient.html#rucio.client.configclient.ConfigClient.delete_config_option","title":"delete_config_option","text":"<pre><code>delete_config_option(section, option)\n</code></pre> <p>Sends the request to remove an option from a section.</p> PARAMETER DESCRIPTION <code>section</code> <p>The name of the section.</p> <p> TYPE: <code>str</code> </p> <code>option</code> <p>The name of the option.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>    True if option was removed successfully.</code>"},{"location":"configclient.html#rucio.client.configclient-functions","title":"Functions","text":""},{"location":"credentialclient.html","title":"Credentialclient","text":""},{"location":"credentialclient.html#rucio.client.credentialclient-classes","title":"Classes","text":""},{"location":"credentialclient.html#rucio.client.credentialclient.CredentialClient","title":"CredentialClient","text":"<pre><code>CredentialClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Credential client class for working with URL signing</p>"},{"location":"credentialclient.html#rucio.client.credentialclient.CredentialClient-functions","title":"Functions","text":""},{"location":"credentialclient.html#rucio.client.credentialclient.CredentialClient.get_signed_url","title":"get_signed_url","text":"<pre><code>get_signed_url(rse, service, operation, url, lifetime=3600)\n</code></pre> <p>Return a signed version of the given URL for the given operation.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The name of the RSE the URL points to.</p> <p> TYPE: <code>str</code> </p> <code>service</code> <p>The service the URL points to (gcs, s3, swift)</p> <p> TYPE: <code>str</code> </p> <code>operation</code> <p>The desired operation (read, write, delete)</p> <p> TYPE: <code>str</code> </p> <code>url</code> <p>The URL to sign</p> <p> TYPE: <code>str</code> </p> <code>lifetime</code> <p>The desired lifetime of the URL in seconds, by default 3600</p> <p> TYPE: <code>int</code> DEFAULT: <code>3600</code> </p> RETURNS DESCRIPTION <code>    The signed URL string</code>"},{"location":"credentialclient.html#rucio.client.credentialclient-functions","title":"Functions","text":""},{"location":"didclient.html","title":"Didclient","text":""},{"location":"didclient.html#rucio.client.didclient-classes","title":"Classes","text":""},{"location":"didclient.html#rucio.client.didclient.DIDClient","title":"DIDClient","text":"<pre><code>DIDClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>DataIdentifier client class for working with data identifiers</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient-functions","title":"Functions","text":""},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_dids","title":"list_dids","text":"<pre><code>list_dids(\n    scope,\n    filters,\n    did_type=\"collection\",\n    long=False,\n    recursive=False,\n)\n</code></pre> <p>List all data identifiers in a scope which match a given pattern.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_dids_extended","title":"list_dids_extended","text":"<pre><code>list_dids_extended(\n    scope,\n    filters,\n    did_type=\"collection\",\n    long=False,\n    recursive=False,\n)\n</code></pre> <p>List all data identifiers in a scope which match a given pattern (DEPRECATED)</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_did","title":"add_did","text":"<pre><code>add_did(\n    scope,\n    name,\n    did_type,\n    statuses=None,\n    meta=None,\n    rules=None,\n    lifetime=None,\n    dids=None,\n    rse=None,\n)\n</code></pre> <p>Add data identifier for a dataset or container.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>did_type</code> <p>The data identifier type (dataset|container).</p> <p> TYPE: <code>Literal['DATASET', 'CONTAINER']</code> </p> <code>statuses</code> <p>Dictionary with statuses, e.g. {'monotonic':True}.</p> <p> TYPE: <code>Optional[Mapping[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>meta</code> <p>Meta-data associated with the data identifier is represented using key/value pairs in a dictionary.</p> <p> TYPE: <code>Optional[Mapping[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>rules</code> <p>Replication rules associated with the data identifier. A list of dictionaries, e.g., [{'copies': 2, 'rse_expression': 'TIERS1'}, ].</p> <p> TYPE: <code>Optional[Sequence[Mapping[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>lifetime</code> <p>DID's lifetime (in seconds).</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>dids</code> <p>The content.</p> <p> TYPE: <code>Optional[Sequence[Mapping[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>rse</code> <p>The RSE name when registering replicas.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_dids","title":"add_dids","text":"<pre><code>add_dids(dids)\n</code></pre> <p>Bulk add datasets/containers.</p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_dataset","title":"add_dataset","text":"<pre><code>add_dataset(\n    scope,\n    name,\n    statuses=None,\n    meta=None,\n    rules=None,\n    lifetime=None,\n    files=None,\n    rse=None,\n)\n</code></pre> <p>Add data identifier for a dataset.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>statuses</code> <p>Dictionary with statuses, e.g. {'monotonic':True}.</p> <p> TYPE: <code>Optional[Mapping[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>meta</code> <p>Meta-data associated with the data identifier is represented using key/value pairs in a dictionary.</p> <p> TYPE: <code>Optional[Mapping[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>rules</code> <p>Replication rules associated with the data identifier. A list of dictionaries, e.g., [{'copies': 2, 'rse_expression': 'TIERS1'}, ].</p> <p> TYPE: <code>Optional[Sequence[Mapping[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>lifetime</code> <p>DID's lifetime (in seconds).</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>files</code> <p>The content.</p> <p> TYPE: <code>Optional[Sequence[Mapping[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>rse</code> <p>The RSE name when registering replicas.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_datasets","title":"add_datasets","text":"<pre><code>add_datasets(dsns)\n</code></pre> <p>Bulk add datasets.</p> PARAMETER DESCRIPTION <code>dsns</code> <p>A list of datasets.</p> <p> TYPE: <code>Iterable[dict[str, Any]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_container","title":"add_container","text":"<pre><code>add_container(\n    scope,\n    name,\n    statuses=None,\n    meta=None,\n    rules=None,\n    lifetime=None,\n)\n</code></pre> <p>Add data identifier for a container.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>statuses</code> <p>Dictionary with statuses, e.g. {'monotonic':True}.</p> <p> TYPE: <code>Optional[Mapping[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>meta</code> <p>Meta-data associated with the data identifier is represented using key/value pairs in a dictionary.</p> <p> TYPE: <code>Optional[Mapping[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>rules</code> <p>Replication rules associated with the data identifier. A list of dictionaries, e.g., [{'copies': 2, 'rse_expression': 'TIERS1'}, ].</p> <p> TYPE: <code>Optional[Sequence[Mapping[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>lifetime</code> <p>DID's lifetime (in seconds).</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_containers","title":"add_containers","text":"<pre><code>add_containers(cnts)\n</code></pre> <p>Bulk add containers.</p> PARAMETER DESCRIPTION <code>cnts</code> <p>A list of containers.</p> <p> TYPE: <code>Sequence[dict[str, Any]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.attach_dids","title":"attach_dids","text":"<pre><code>attach_dids(scope, name, dids, rse=None)\n</code></pre> <p>Attach data identifier.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>dids</code> <p>The content.</p> <p> TYPE: <code>Sequence[Mapping[str, Any]]</code> </p> <code>rse</code> <p>The RSE name when registering replicas.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.detach_dids","title":"detach_dids","text":"<pre><code>detach_dids(scope, name, dids=None)\n</code></pre> <p>Detach data identifier.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>dids</code> <p>The content.</p> <p> TYPE: <code>Optional[Sequence[Mapping[str, Any]]]</code> DEFAULT: <code>None</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.attach_dids_to_dids","title":"attach_dids_to_dids","text":"<pre><code>attach_dids_to_dids(attachments, ignore_duplicate=False)\n</code></pre> <p>Add DIDs to DIDs.</p> PARAMETER DESCRIPTION <code>attachments</code> <p>The attachments. An attachment contains: \"scope\", \"name\", \"DIDs\". DIDs is: [{'scope': scope, 'name': name}, ...]</p> <p> TYPE: <code>Sequence[dict[str, Union[str, Sequence[dict[str, Any]]]]]</code> </p> <code>ignore_duplicate</code> <p>If True, ignore duplicate entries.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_files_to_datasets","title":"add_files_to_datasets","text":"<pre><code>add_files_to_datasets(attachments, ignore_duplicate=False)\n</code></pre> <p>Add files to datasets.</p> PARAMETER DESCRIPTION <code>attachments</code> <p>The attachments. An attachment contains: \"scope\", \"name\", \"DIDs\". DIDs is: [{'scope': scope, 'name': name}, ...]</p> <p> TYPE: <code>Sequence[dict[str, Union[str, Sequence[dict[str, Any]]]]]</code> </p> <code>ignore_duplicate</code> <p>If True, ignore duplicate entries.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_datasets_to_containers","title":"add_datasets_to_containers","text":"<pre><code>add_datasets_to_containers(attachments)\n</code></pre> <p>Add datasets_to_containers.</p> PARAMETER DESCRIPTION <code>attachments</code> <p>The attachments. An attachment contains: \"scope\", \"name\", \"DIDs\". DIDs is: [{'scope': scope, 'name': name}, ...]</p> <p> TYPE: <code>Sequence[dict[str, Union[str, Sequence[dict[str, Any]]]]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_containers_to_containers","title":"add_containers_to_containers","text":"<pre><code>add_containers_to_containers(attachments)\n</code></pre> <p>Add containers_to_containers.</p> PARAMETER DESCRIPTION <code>attachments</code> <p>The attachments. An attachment contains: \"scope\", \"name\", \"DIDs\". DIDs is: [{'scope': scope, 'name': name}, ...]</p> <p> TYPE: <code>Sequence[dict[str, Union[str, Sequence[dict[str, Any]]]]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_files_to_dataset","title":"add_files_to_dataset","text":"<pre><code>add_files_to_dataset(scope, name, files, rse=None)\n</code></pre> <p>Add files to datasets.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The dataset name.</p> <p> TYPE: <code>str</code> </p> <code>files</code> <p>The content.</p> <p> TYPE: <code>Sequence[Mapping[str, Any]]</code> </p> <code>rse</code> <p>The RSE name when registering replicas.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_files_to_archive","title":"add_files_to_archive","text":"<pre><code>add_files_to_archive(scope, name, files)\n</code></pre> <p>Add files to archive.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The dataset name.</p> <p> TYPE: <code>str</code> </p> <code>files</code> <p>The content.</p> <p> TYPE: <code>Sequence[Mapping[str, Any]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_datasets_to_container","title":"add_datasets_to_container","text":"<pre><code>add_datasets_to_container(scope, name, dsns)\n</code></pre> <p>Add datasets to container.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The dataset name.</p> <p> TYPE: <code>str</code> </p> <code>dsns</code> <p>The content.</p> <p> TYPE: <code>Sequence[Mapping[str, Any]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.add_containers_to_container","title":"add_containers_to_container","text":"<pre><code>add_containers_to_container(scope, name, cnts)\n</code></pre> <p>Add containers to container.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The dataset name.</p> <p> TYPE: <code>str</code> </p> <code>cnts</code> <p>The content.</p> <p> TYPE: <code>Sequence[Mapping[str, Any]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_content","title":"list_content","text":"<pre><code>list_content(scope, name)\n</code></pre> <p>List data identifier contents.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_content_history","title":"list_content_history","text":"<pre><code>list_content_history(scope, name)\n</code></pre> <p>List data identifier contents history.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_files","title":"list_files","text":"<pre><code>list_files(scope, name, long=None)\n</code></pre> <p>List data identifier file contents.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>long</code> <p>A boolean to choose if GUID is returned or not.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.bulk_list_files","title":"bulk_list_files","text":"<pre><code>bulk_list_files(dids)\n</code></pre> <p>List data identifier file contents.</p> PARAMETER DESCRIPTION <code>dids</code> <p>The list of DIDs.</p> <p> TYPE: <code>list[dict[str, Any]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.get_did","title":"get_did","text":"<pre><code>get_did(scope, name, dynamic=False, dynamic_depth=None)\n</code></pre> <p>Retrieve a single data identifier.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>dynamic_depth</code> <p>The DID type ('FILE'/'DATASET') at which to stop the dynamic length/bytes calculation. If not set, the size will not be computed dynamically.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>dynamic</code> <p>Deprecated. Same as setting dynamic_depth='FILE'.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(scope, name, plugin='DID_COLUMN')\n</code></pre> <p>Get data identifier metadata.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>plugin</code> <p>Backend Metadata plugin the Rucio server should use to query data.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'DID_COLUMN'</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.get_metadata_bulk","title":"get_metadata_bulk","text":"<pre><code>get_metadata_bulk(dids, inherit=False, plugin='JSON')\n</code></pre> <p>Bulk get data identifier metadata</p> PARAMETER DESCRIPTION <code>dids</code> <p>A list of DIDs.</p> <p> TYPE: <code>Sequence[Mapping[str, Any]]</code> </p> <code>inherit</code> <p>A boolean. If set to true, the metadata of the parent are concatenated.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>plugin</code> <p>The metadata plugin to query, 'ALL' for all available plugins</p> <p> TYPE: <code>str</code> DEFAULT: <code>'JSON'</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.set_metadata","title":"set_metadata","text":"<pre><code>set_metadata(scope, name, key, value, recursive=False)\n</code></pre> <p>Set data identifier metadata.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>The metadata key.</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The metadata value.</p> <p> TYPE: <code>Any</code> </p> <code>recursive</code> <p>Option to propagate the metadata change to content.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.set_metadata_bulk","title":"set_metadata_bulk","text":"<pre><code>set_metadata_bulk(scope, name, meta, recursive=False)\n</code></pre> <p>Set data identifier metadata in bulk.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>meta</code> <p>The metadata key-value pairs.</p> <p> TYPE: <code>Mapping[str, Any]</code> </p> <code>recursive</code> <p>Option to propagate the metadata change to content.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.set_dids_metadata_bulk","title":"set_dids_metadata_bulk","text":"<pre><code>set_dids_metadata_bulk(dids, recursive=False)\n</code></pre> <p>Set metadata to a list of data identifiers.</p> PARAMETER DESCRIPTION <code>dids</code> <p>A list of DIDs including metadata, i.e. [{'scope': scope1, 'name': name1, 'meta': {key1: value1, key2: value2}}, ...].</p> <p> TYPE: <code>Sequence[Mapping[str, Any]]</code> </p> <code>recursive</code> <p>Option to propagate the metadata update to content.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.set_status","title":"set_status","text":"<pre><code>set_status(scope, name, **kwargs)\n</code></pre> <p>Set data identifier status.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>**kwargs</code> <p>Keyword arguments of the form status_name=value.</p> <p> DEFAULT: <code>{}</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.close","title":"close","text":"<pre><code>close(scope, name)\n</code></pre> <p>Close dataset/container.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The dataset/container name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.delete_metadata","title":"delete_metadata","text":"<pre><code>delete_metadata(scope, name, key)\n</code></pre> <p>Delete data identifier metadata.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>The metadata key to be deleted.</p> <p> TYPE: <code>str</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_did_rules","title":"list_did_rules","text":"<pre><code>list_did_rules(scope, name)\n</code></pre> <p>List the associated rules of a data identifier.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_associated_rules_for_file","title":"list_associated_rules_for_file","text":"<pre><code>list_associated_rules_for_file(scope, name)\n</code></pre> <p>List the associated rules a file is affected from..</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.get_dataset_by_guid","title":"get_dataset_by_guid","text":"<pre><code>get_dataset_by_guid(guid)\n</code></pre> <p>Get the parent datasets for a given GUID.</p> PARAMETER DESCRIPTION <code>guid</code> <p>The GUID.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>    A DID</code>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.scope_list","title":"scope_list","text":"<pre><code>scope_list(scope, name=None, recursive=False)\n</code></pre> <p>List data identifiers in a scope.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>recursive</code> <p>boolean, True or False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_parent_dids","title":"list_parent_dids","text":"<pre><code>list_parent_dids(scope, name)\n</code></pre> <p>List parent dataset/containers of a DID.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The name,</p> <p> TYPE: <code>str</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.create_did_sample","title":"create_did_sample","text":"<pre><code>create_did_sample(\n    input_scope,\n    input_name,\n    output_scope,\n    output_name,\n    nbfiles,\n)\n</code></pre> <p>Create a sample from an input collection.</p> PARAMETER DESCRIPTION <code>input_scope</code> <p>The scope of the input DID.</p> <p> TYPE: <code>str</code> </p> <code>input_name</code> <p>The name of the input DID.</p> <p> TYPE: <code>str</code> </p> <code>output_scope</code> <p>The scope of the output dataset.</p> <p> TYPE: <code>str</code> </p> <code>output_name</code> <p>The name of the output dataset.</p> <p> TYPE: <code>str</code> </p> <code>nbfiles</code> <p>The number of files to register in the output dataset.</p> <p> TYPE: <code>int</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.resurrect","title":"resurrect","text":"<pre><code>resurrect(dids)\n</code></pre> <p>Resurrect a list of DIDs.</p> PARAMETER DESCRIPTION <code>dids</code> <p>A list of DIDs [{'scope': scope, 'name': name}, ...]</p> <p> TYPE: <code>Sequence[Mapping[str, Any]]</code> </p>"},{"location":"didclient.html#rucio.client.didclient.DIDClient.list_archive_content","title":"list_archive_content","text":"<pre><code>list_archive_content(scope, name)\n</code></pre> <p>List archive contents.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The data identifier name.</p> <p> TYPE: <code>str</code> </p>"},{"location":"didclient.html#rucio.client.didclient-functions","title":"Functions","text":""},{"location":"diracclient.html","title":"Diracclient","text":""},{"location":"diracclient.html#rucio.client.diracclient-classes","title":"Classes","text":""},{"location":"diracclient.html#rucio.client.diracclient.DiracClient","title":"DiracClient","text":"<pre><code>DiracClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>DataIdentifier client class for working with data identifiers</p>"},{"location":"diracclient.html#rucio.client.diracclient.DiracClient-functions","title":"Functions","text":""},{"location":"diracclient.html#rucio.client.diracclient.DiracClient.add_files","title":"add_files","text":"<pre><code>add_files(\n    lfns, ignore_availability=False, parents_metadata=None\n)\n</code></pre> <p>Bulk add files:</p> <ul> <li>Create the file and replica.</li> <li>If doesn't exist, create the dataset containing the file as well as a rule on the dataset on ANY sites.</li> <li>Create all the ascendants of the dataset if they do not exist</li> <li>Attach metadata defined in <code>parents_metadata</code></li> </ul> PARAMETER DESCRIPTION <code>lfns</code> <p>List of lfn (dictionary {'lfn': , 'rse': , 'bytes': , 'adler32': , 'guid': , 'pfn': } <p> TYPE: <code>Iterable[Mapping[str, Any]]</code> </p> <code>ignore_availability</code> <p>A boolean to ignore blocked sites.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>parents_metadata</code> <p>Metadata for selected hierarchy DIDs. (dictionary {'lpn': {key : value}}). Default=None</p> <p> TYPE: <code>Optional[Mapping[str, Mapping[str, Any]]]</code> DEFAULT: <code>None</code> </p>"},{"location":"diracclient.html#rucio.client.diracclient-functions","title":"Functions","text":""},{"location":"downloadclient.html","title":"Downloadclient","text":""},{"location":"downloadclient.html#rucio.client.downloadclient-classes","title":"Classes","text":""},{"location":"downloadclient.html#rucio.client.downloadclient.FileDownloadState","title":"FileDownloadState","text":"<p>The state a file can be in before/while/after downloading.</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.BaseExtractionTool","title":"BaseExtractionTool","text":"<pre><code>BaseExtractionTool(\n    program_name,\n    useability_check_args,\n    extract_args,\n    logger=logging.log,\n)\n</code></pre> <p>Initializes a extraction tool object</p> PARAMETER DESCRIPTION <code>program_name</code> <p>the name of the archive extraction program, e.g., unzip</p> <p> TYPE: <code>str</code> </p> <code>useability_check_args</code> <p>the arguments of the extraction program to test if it's installed, e.g., --version</p> <p> TYPE: <code>str</code> </p> <code>extract_args</code> <p>the arguments that will be passed to the program for extraction</p> <p> TYPE: <code>str</code> </p> <code>logger</code> <p>optional decorated logging.log object that can be passed from the calling daemon or client.</p> <p> TYPE: <code>LoggerFunction</code> DEFAULT: <code>log</code> </p>"},{"location":"downloadclient.html#rucio.client.downloadclient.BaseExtractionTool-functions","title":"Functions","text":""},{"location":"downloadclient.html#rucio.client.downloadclient.BaseExtractionTool.is_useable","title":"is_useable","text":"<pre><code>is_useable()\n</code></pre> <p>Checks if the extraction tool is installed and usable</p> RETURNS DESCRIPTION <code>    True if it is usable otherwise False</code>"},{"location":"downloadclient.html#rucio.client.downloadclient.BaseExtractionTool.try_extraction","title":"try_extraction","text":"<pre><code>try_extraction(\n    archive_file_path, file_to_extract, dest_dir_path\n)\n</code></pre> <p>Calls the extraction program to extract a file from an archive</p> PARAMETER DESCRIPTION <code>archive_file_path</code> <p>path to the archive</p> <p> TYPE: <code>str</code> </p> <code>file_to_extract</code> <p>file name to extract from the archive</p> <p> TYPE: <code>str</code> </p> <code>dest_dir_pat</code> <p>destination directory where the extracted file will be stored</p> <p> </p> RETURNS DESCRIPTION <code>    True on success otherwise False</code>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient","title":"DownloadClient","text":"<pre><code>DownloadClient(\n    client=None,\n    logger=None,\n    tracing=True,\n    check_admin=False,\n    check_pcache=False,\n)\n</code></pre> <p>Initializes the basic settings for an DownloadClient object</p> PARAMETER DESCRIPTION <code>client</code> <p>Optional: rucio.client.client.Client object. If None, a new object will be created.</p> <p> TYPE: <code>Optional[Client]</code> DEFAULT: <code>None</code> </p> <code>logger</code> <p>Optional: If None, default logger will be used.</p> <p> TYPE: <code>Optional[LoggerFunction]</code> DEFAULT: <code>None</code> </p> <code>external_traces</code> <p>Optional: reference to a list where traces can be added</p> <p> </p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient-functions","title":"Functions","text":""},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.download_pfns","title":"download_pfns","text":"<pre><code>download_pfns(\n    items,\n    num_threads=2,\n    trace_custom_fields=None,\n    traces_copy_out=None,\n    deactivate_file_download_exceptions=False,\n)\n</code></pre> <p>Download items with a given PFN. This function can only download files, no datasets.</p> PARAMETER DESCRIPTION <code>items</code> <p>List of dictionaries. Each dictionary describing a file to download. Dictionary keys: * pfn : str     PFN string of this file</p> <ul> <li> <p>did : str     DID string of this file (e.g. 'scope:file.name'). Wildcards are not allowed</p> </li> <li> <p>rse : str     rse name (e.g. 'CERN-PROD_DATADISK'). RSE Expressions are not allowed</p> </li> <li> <p>base_dir : str, optional     Base directory where the downloaded files will be stored. Default: '.'</p> </li> <li> <p>no_subdir : bool, optional     If true, files are written directly into base_dir. Default: False</p> </li> <li> <p>adler32 : str, optional     The adler32 checksum to compare the downloaded file's adler32 checksum with</p> </li> <li> <p>md5 : str, optional     The md5 checksum to compare the downloaded file's md5 checksum with</p> </li> <li> <p>transfer_timeout : int, optional     Timeout time for the download protocols. Default: None</p> </li> <li> <p>check_local_with_filesize_only : bool, optional     If true, already downloaded files will not be validated by checksum. Default: False</p> </li> </ul> <p> TYPE: <code>list[dict[str, Any]]</code> </p> <code>num_threads</code> <p>Suggestion of number of threads to use for the download. It will be lowered if it's too high.</p> <p> TYPE: <code>int</code> DEFAULT: <code>2</code> </p> <code>trace_custom_fields</code> <p>Custom key value pairs to send with the traces</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>traces_copy_out</code> <p>Reference to an external list, where the traces should be uploaded</p> <p> TYPE: <code>Optional[list[dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deactivate_file_download_exceptions</code> <p>If file download exceptions shouldn't be raised. Default: False</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>    A list of dictionaries with an entry for each file, containing the input options,</code> <p>the DID, and the clientState. clientState can be one of the following: ALREADY_DONE, DONE, FILE_NOT_FOUND, FAIL_VALIDATE, FAILED</p> RAISES DESCRIPTION <code>InputValidationError</code> <p>If one of the input items is in the wrong format</p> <code>NoFilesDownloaded</code> <p>If no files could be downloaded</p> <code>NotAllFilesDownloaded</code> <p>If not all files could be downloaded</p> <code>RucioException</code> <p>If something unexpected went wrong during the download</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.download_dids","title":"download_dids","text":"<pre><code>download_dids(\n    items,\n    num_threads=2,\n    trace_custom_fields=None,\n    traces_copy_out=None,\n    deactivate_file_download_exceptions=False,\n    sort=None,\n)\n</code></pre> <p>Download items with given DIDs. This function can also download datasets and wildcarded DIDs.</p> PARAMETER DESCRIPTION <code>items</code> <p>List of dictionaries. Each dictionary describing an item to download. Dictionary keys: * did : str     DID string of this file (e.g. 'scope:file.name')</p> <ul> <li> <p>filters : dict, optional     Filter to select DIDs for download. Optional if DID is given</p> </li> <li> <p>rse : str, optional     rse name (e.g. 'CERN-PROD_DATADISK') or rse expression from where to download</p> </li> <li> <p>impl : str, optional     name of the protocol implementation to be used to download this item</p> </li> <li> <p>no_resolve_archives : bool, optional     bool indicating whether archives should not be considered for download. Default: False</p> </li> <li> <p>resolve_archives : bool, optional     Deprecated: Use no_resolve_archives instead</p> </li> <li> <p>force_scheme : str or list[str], optional     force a specific scheme to download this item. Default: None</p> </li> <li> <p>base_dir : str, optional     base directory where the downloaded files will be stored. Default: '.'</p> </li> <li> <p>no_subdir : bool, optional     If true, files are written directly into base_dir. Default: False</p> </li> <li> <p>nrandom : int, optional     if the DID addresses a dataset, nrandom files will be randomly chosen for download from the dataset</p> </li> <li> <p>ignore_checksum : bool, optional     If true, skips the checksum validation between the downloaded file and the rucio catalouge. Default: False</p> </li> <li> <p>transfer_timeout : int, optional     Timeout time for the download protocols. Default: None</p> </li> <li> <p>transfer_speed_timeout : int, optional     Minimum allowed transfer speed (in KBps). Ignored if transfer_timeout set. Otherwise, used to compute default timeout. Default: 500</p> </li> <li> <p>check_local_with_filesize_only : bool, optional     If true, already downloaded files will not be validated by checksum. Default: False</p> </li> </ul> <p> TYPE: <code>list[dict[str, Any]]</code> </p> <code>num_threads</code> <p>Suggestion of number of threads to use for the download. It will be lowered if it's too high.</p> <p> TYPE: <code>int</code> DEFAULT: <code>2</code> </p> <code>trace_custom_fields</code> <p>Custom key value pairs to send with the traces</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>traces_copy_out</code> <p>Reference to an external list, where the traces should be uploaded</p> <p> TYPE: <code>Optional[list[dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deactivate_file_download_exceptions</code> <p>If file download exceptions shouldn't be raised. Default: False</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>sort</code> <p>Select best replica by replica sorting algorithm. Available algorithms: <code>geoip</code> - based on src/dst IP topographical distance</p> <p> TYPE: <code>Optional[SORTING_ALGORITHMS_LITERAL]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>    A list of dictionaries with an entry for each file, containing the input options,</code> <p>the DID, and the clientState.</p> RAISES DESCRIPTION <code>InputValidationError</code> <p>If one of the input items is in the wrong format</p> <code>NoFilesDownloaded</code> <p>If no files could be downloaded</p> <code>NotAllFilesDownloaded</code> <p>If not all files could be downloaded</p> <code>RucioException</code> <p>If something unexpected went wrong during the download</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.download_from_metalink_file","title":"download_from_metalink_file","text":"<pre><code>download_from_metalink_file(\n    item,\n    metalink_file_path,\n    num_threads=2,\n    trace_custom_fields=None,\n    traces_copy_out=None,\n    deactivate_file_download_exceptions=False,\n)\n</code></pre> <p>Download items using a given metalink file.</p> PARAMETER DESCRIPTION <code>item</code> <p>Dictionary describing an item to download. Dictionary keys: * base_dir : str, optional Base directory where the downloaded files will be stored. Default: '.'</p> <ul> <li> <p>no_subdir : bool, optional If true, files are written directly into base_dir. Default: False</p> </li> <li> <p>ignore_checksum : bool, optional If true, skips the checksum validation between the downloaded file and the rucio catalogue. Default: False</p> </li> <li> <p>transfer_timeout : int, optional Timeout time for the download protocols. Default: None</p> </li> <li> <p>check_local_with_filesize_only : bool, optional If true, already downloaded files will not be validated by checksum. Default: False</p> </li> </ul> <p> TYPE: <code>dict[str, Any]</code> </p> <code>num_threads</code> <p>Suggestion of number of threads to use for the download. It will be lowered if it's too high.</p> <p> TYPE: <code>int</code> DEFAULT: <code>2</code> </p> <code>trace_custom_fields</code> <p>Custom key value pairs to send with the traces</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>traces_copy_out</code> <p>Reference to an external list, where the traces should be uploaded</p> <p> TYPE: <code>Optional[list[dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deactivate_file_download_exceptions</code> <p>If file download exceptions shouldn't be raised. Default: False</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>    A list of dictionaries with an entry for each file, containing the input options,</code> <p>the DID, and the clientState.</p> RAISES DESCRIPTION <code>InputValidationError</code> <p>If one of the input items is in the wrong format</p> <code>NoFilesDownloaded</code> <p>If no files could be downloaded</p> <code>NotAllFilesDownloaded</code> <p>If not all files could be downloaded</p> <code>RucioException</code> <p>If something unexpected went wrong during the download</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.download_aria2c","title":"download_aria2c","text":"<pre><code>download_aria2c(\n    items,\n    trace_custom_fields=None,\n    filters=None,\n    deactivate_file_download_exceptions=False,\n    sort=None,\n)\n</code></pre> <p>Uses aria2c to download the items with given DIDs. This function can also download datasets and wildcarded DIDs. It only can download files that are available via https/davs. Aria2c needs to be installed and X509_USER_PROXY needs to be set!</p> PARAMETER DESCRIPTION <code>items</code> <p>List of dictionaries. Each dictionary describing an item to download. Dictionary keys: * did : str     DID string of this file (e.g. 'scope:file.name'). Wildcards are not allowed</p> <ul> <li> <p>rse : str, optional     rse name (e.g. 'CERN-PROD_DATADISK') or rse expression from where to download</p> </li> <li> <p>base_dir : str, optional     base directory where the downloaded files will be stored. (Default: '.')</p> </li> <li> <p>no_subdir : bool, optional     If true, files are written directly into base_dir. (Default: False)</p> </li> <li> <p>nrandom : int, optional     if the DID addresses a dataset, nrandom files will be randomly chosen for download from the dataset</p> </li> <li> <p>ignore_checksum : bool, optional     If true, skips the checksum validation between the downloaded file and the rucio catalogue. (Default: False)</p> </li> <li> <p>check_local_with_filesize_only : bool, optional     If true, already downloaded files will not be validated by checksum. (Default: False)</p> </li> </ul> <p> TYPE: <code>list[dict[str, Any]]</code> </p> <code>trace_custom_fields</code> <p>Custom key value pairs to send with the traces</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>filters</code> <p>Filter to select DIDs for download</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>deactivate_file_download_exceptions</code> <p>If file download exceptions shouldn't be raised. Default: False</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>sort</code> <p>Select best replica by replica sorting algorithm. Available algorithms: * geoip - based on src/dst IP topographical distance</p> <p> TYPE: <code>Optional[SORTING_ALGORITHMS_LITERAL]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>    A list of dictionaries with an entry for each file, containing the input options,</code> <p>the DID, and the clientState.</p> RAISES DESCRIPTION <code>InputValidationError</code> <p>If one of the input items is in the wrong format</p> <code>NoFilesDownloaded</code> <p>If no files could be downloaded</p> <code>NotAllFilesDownloaded</code> <p>If not all files could be downloaded</p> <code>RucioException</code> <p>If something unexpected went wrong during the download (e.g. aria2c could not be started)</p>"},{"location":"downloadclient.html#rucio.client.downloadclient.DownloadClient.preferred_impl","title":"preferred_impl","text":"<pre><code>preferred_impl(sources)\n</code></pre> <p>Finds the optimum protocol impl preferred by the client and supported by the remote RSE.</p> PARAMETER DESCRIPTION <code>sources</code> <p>List of sources for a given DID</p> <p> TYPE: <code>list[dict[str, Any]]</code> </p> RAISES DESCRIPTION <code>RucioException</code> <p>General exception with msg for more details</p>"},{"location":"downloadclient.html#rucio.client.downloadclient-functions","title":"Functions","text":""},{"location":"exportclient.html","title":"Exportclient","text":""},{"location":"exportclient.html#rucio.client.exportclient-classes","title":"Classes","text":""},{"location":"exportclient.html#rucio.client.exportclient.ExportClient","title":"ExportClient","text":"<pre><code>ExportClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>RSE client class for exporting data from Rucio</p>"},{"location":"exportclient.html#rucio.client.exportclient.ExportClient-functions","title":"Functions","text":""},{"location":"exportclient.html#rucio.client.exportclient.ExportClient.export_data","title":"export_data","text":"<pre><code>export_data(distance=True)\n</code></pre> <p>Retrieve a detailed snapshot of the current RSE configuration.</p> <p>The exported information includes all registered RSEs with their settings and attributes. When <code>distance</code> is <code>True</code>, the RSE distance matrix is included as well. The snapshot is intended for use cases such as configuration back\u2011ups, migrations between instances, and monitoring (e.g. generating monitoring dashboards).</p> PARAMETER DESCRIPTION <code>distance</code> <p>If True (default), the server also returns the inter\u2011RSE distance matrix in the payload.</p> <p>Note: Omitting the distance information can significantly reduce the response size and improve transfer times.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>A nested dictionary that mirrors the server\u2011side JSON structure. The top\u2011level keys are:</p> <p><code>rses</code>:     Per\u2011RSE settings (name, deterministic flag, QoS class, supported protocol, etc.).</p> <p><code>distances</code>:     Pairwise RSE\u2011to\u2011RSE distance values (only present when <code>distance=True</code>).</p> RAISES DESCRIPTION <code>RucioException</code> <p>Raised if the HTTP status code is not 200 OK.</p> <p>Examples:</p> Example <p>Retrieve a full export of all configured RSEs, including their attributes and inter-RSE distances:</p> <pre><code>from rucio.client.exportclient import ExportClient\n\nexport_client = ExportClient()\n\ntry:\n    rse_data = export_client.export_data()  # distance=True by default\n    print(f\"Full RSE properties: {rse_data}\")\nexcept Exception as err:\n    print(f\"Action failed: {err}\")\n</code></pre>"},{"location":"exportclient.html#rucio.client.exportclient-functions","title":"Functions","text":""},{"location":"fileclient.html","title":"Fileclient","text":""},{"location":"fileclient.html#rucio.client.fileclient-classes","title":"Classes","text":""},{"location":"fileclient.html#rucio.client.fileclient.FileClient","title":"FileClient","text":"<pre><code>FileClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Dataset client class for working with dataset</p>"},{"location":"fileclient.html#rucio.client.fileclient.FileClient-functions","title":"Functions","text":""},{"location":"fileclient.html#rucio.client.fileclient.FileClient.list_file_replicas","title":"list_file_replicas","text":"<pre><code>list_file_replicas(scope, lfn)\n</code></pre> <p>List file replicas.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope of the file.</p> <p> TYPE: <code>str</code> </p> <code>lfn</code> <p>The LFN</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>    List of replicas.</code>"},{"location":"fileclient.html#rucio.client.fileclient-functions","title":"Functions","text":""},{"location":"importclient.html","title":"Importclient","text":""},{"location":"importclient.html#rucio.client.importclient-classes","title":"Classes","text":""},{"location":"importclient.html#rucio.client.importclient.ImportClient","title":"ImportClient","text":"<pre><code>ImportClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>RSE client class for importing data into Rucio</p>"},{"location":"importclient.html#rucio.client.importclient.ImportClient-functions","title":"Functions","text":""},{"location":"importclient.html#rucio.client.importclient.ImportClient.import_data","title":"import_data","text":"<pre><code>import_data(data)\n</code></pre> <p>Imports data into Rucio.</p> PARAMETER DESCRIPTION <code>data</code> <p>A dict containing data to be imported into Rucio.</p> <p> TYPE: <code>dict[str, Any]</code> </p>"},{"location":"importclient.html#rucio.client.importclient-functions","title":"Functions","text":""},{"location":"lifetimeclient.html","title":"Lifetimeclient","text":""},{"location":"lifetimeclient.html#rucio.client.lifetimeclient-classes","title":"Classes","text":""},{"location":"lifetimeclient.html#rucio.client.lifetimeclient.LifetimeClient","title":"LifetimeClient","text":"<pre><code>LifetimeClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Lifetime client class for working with Lifetime Model exceptions</p>"},{"location":"lifetimeclient.html#rucio.client.lifetimeclient.LifetimeClient-functions","title":"Functions","text":""},{"location":"lifetimeclient.html#rucio.client.lifetimeclient.LifetimeClient.list_exceptions","title":"list_exceptions","text":"<pre><code>list_exceptions(exception_id=None, states=None)\n</code></pre> <p>Lists lifetime model exceptions that allow extending data lifetimes beyond their configured policies.</p> <p>The lifetime model exceptions are used to override the default lifecycle policies for data identifiers (files, datasets, containers, or archives) that need to be kept longer than usual. These exceptions can be filtered by their ID or approval state (this feature is not available yet).</p> PARAMETER DESCRIPTION <code>exception_id</code> <p>The unique identifier of a specific exception. If provided, returns only that exception.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>states</code> <p>Filter exceptions by their states. Possible values are: * <code>A</code> (APPROVED): Exception was approved * <code>R</code> (REJECTED): Exception was rejected * <code>W</code> (WAITING): Exception is waiting for approval by an admin (or other authorized account)</p> <p> TYPE: <code>Optional[Sequence[LifetimeExceptionsState]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>    An iterator of dictionaries containing the exception details:</code> <ul> <li><code>id</code>: The unique identifier of the exception</li> <li><code>scope</code>: The scope of the data identifier</li> <li><code>name</code>: The name of the data identifier</li> <li><code>did_type</code>: Type of the data identifier:     <code>F</code> (file), <code>D</code> (dataset), <code>C</code> (container), <code>A</code> (archive),     <code>X</code> (deleted file), <code>Y</code> (deleted dataset), <code>Z</code> (deleted container)</li> <li><code>account</code>: The account that requested the exception</li> <li><code>pattern</code>: Pattern used for matching data identifiers</li> <li><code>comments</code>: User provided comments explaining the exception</li> <li><code>state</code>: Current state of the exception</li> <li><code>created_at</code>: When the exception was created (returned as timestamp string)</li> <li><code>expires_at</code>: When the exception expires (returned as timestamp string)</li> </ul>"},{"location":"lifetimeclient.html#rucio.client.lifetimeclient.LifetimeClient.add_exception","title":"add_exception","text":"<pre><code>add_exception(dids, account, pattern, comments, expires_at)\n</code></pre> <p>Creates a lifetime model exception request to extend the expiration date of data identifiers (DIDs).</p> <p>These exceptions allow requesting extensions to DIDs' lifetimes, subject to approval and configured maximum extension periods. The request includes details about which DIDs should have extended lifetimes, who is requesting it, and why it's needed.</p> PARAMETER DESCRIPTION <code>dids</code> <p>List of dictionaries containing the data identifiers to be excepted. Each dictionary must contain: * scope : The scope of the data identifier * name : The name of the data identifier</p> <p> TYPE: <code>list[dict[str, Any]]</code> </p> <code>account</code> <p>The account requesting the exception</p> <p> TYPE: <code>str</code> </p> <code>pattern</code> <p>Associated pattern for the exception request</p> <p> TYPE: <code>str</code> </p> <code>comments</code> <p>Justification for why the exception is needed (e.g. \"Needed for my XYZ analysis..\")</p> <p> TYPE: <code>str</code> </p> <code>expires_at</code> <p>When the exception should expire (datetime object)</p> <p> TYPE: <code>datetime</code> </p> RETURNS DESCRIPTION <code>    A dictionary containing:</code> <ul> <li>exceptions : Dictionary mapping exception IDs to lists of DIDs that were successfully added</li> <li>unknown : List of DIDs that could not be found</li> <li>not_affected : List of DIDs that did not qualify for an exception</li> </ul>"},{"location":"lifetimeclient.html#rucio.client.lifetimeclient-functions","title":"Functions","text":""},{"location":"lockclient.html","title":"Lockclient","text":""},{"location":"lockclient.html#rucio.client.lockclient-classes","title":"Classes","text":""},{"location":"lockclient.html#rucio.client.lockclient.LockClient","title":"LockClient","text":"<pre><code>LockClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Lock client class for working with rucio locks</p>"},{"location":"lockclient.html#rucio.client.lockclient.LockClient-functions","title":"Functions","text":""},{"location":"lockclient.html#rucio.client.lockclient.LockClient.get_dataset_locks","title":"get_dataset_locks","text":"<pre><code>get_dataset_locks(scope, name)\n</code></pre> <p>Get a dataset locks of the specified dataset.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope of the DID of the locks to list.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The name of the DID of the locks to list.</p> <p> TYPE: <code>str</code> </p>"},{"location":"lockclient.html#rucio.client.lockclient.LockClient.get_locks_for_dids","title":"get_locks_for_dids","text":"<pre><code>get_locks_for_dids(dids, **filter_args)\n</code></pre> <p>Get list of locks for for all the files found, recursively, in the listed datasets or containers.</p> PARAMETER DESCRIPTION <code>dids</code> <p>list of dictionaries {\"scope\":..., \"name\":..., \"type\":...} type can be either \"dataset\" or \"container\" type is optional, but if specified, improves the query performance</p> <p> TYPE: <code>list[Mapping[str, Any]]</code> </p> RETURNS DESCRIPTION <code>    list of dictionaries with lock info</code>"},{"location":"lockclient.html#rucio.client.lockclient.LockClient.get_dataset_locks_by_rse","title":"get_dataset_locks_by_rse","text":"<pre><code>get_dataset_locks_by_rse(rse)\n</code></pre> <p>Get all dataset locks of the specified rse.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The rse of the locks to list</p> <p> TYPE: <code>str</code> </p>"},{"location":"lockclient.html#rucio.client.lockclient-functions","title":"Functions","text":""},{"location":"metaconventionsclient.html","title":"Metaconventionsclient","text":""},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient-classes","title":"Classes","text":""},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient","title":"MetaConventionClient","text":"<pre><code>MetaConventionClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Metadata client class for working with data identifier attributes</p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient-functions","title":"Functions","text":""},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.add_key","title":"add_key","text":"<pre><code>add_key(key, key_type, value_type=None, value_regexp=None)\n</code></pre> <p>Sends the request to add an allowed key for DID metadata (update the DID Metadata Conventions table with a new key).</p> PARAMETER DESCRIPTION <code>key</code> <p>The name for the new key.</p> <p> TYPE: <code>str</code> </p> <code>key_type</code> <p>The type of the key: all(container, dataset, file), collection(dataset or container), file, derived(compute from file for collection).</p> <p> TYPE: <code>Union[KeyType, str]</code> </p> <code>value_type</code> <p>The type of the value, if defined.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>value_regexp</code> <p>The regular expression that values should match, if defined.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>    True if key was created successfully.</code> RAISES DESCRIPTION <code>Duplicate</code> <p>If key already exists..</p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.list_keys","title":"list_keys","text":"<pre><code>list_keys()\n</code></pre> <p>Sends the request to list all keys for DID Metadata Conventions.</p> RETURNS DESCRIPTION <code>    A list containing the names of all keys.</code>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.list_values","title":"list_values","text":"<pre><code>list_values(key)\n</code></pre> <p>Sends the request to lists all allowed values for a DID key (all values for a key in DID Metadata Conventions).</p> RETURNS DESCRIPTION <code>    A list containing the names of all values for a key</code>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.add_value","title":"add_value","text":"<pre><code>add_value(key, value)\n</code></pre> <p>Sends the request to add a value for a key in DID Metadata Convention.</p> PARAMETER DESCRIPTION <code>key</code> <p>The name for key.</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The value to be added.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>    True if value was created successfully.</code> RAISES DESCRIPTION <code>Duplicate</code> <p>If value already exists.</p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.del_value","title":"del_value","text":"<pre><code>del_value(key, value)\n</code></pre> <p>Delete a key in the DID Metadata Conventions table.</p> PARAMETER DESCRIPTION <code>key</code> <p>The name for the key</p> <p> </p> <code>value</code> <p>The value</p> <p> </p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.del_key","title":"del_key","text":"<pre><code>del_key(key)\n</code></pre> <p>Delete an allowed key.</p> PARAMETER DESCRIPTION <code>key</code> <p>The name for the key.</p> <p> </p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient.MetaConventionClient.update_key","title":"update_key","text":"<pre><code>update_key(key, type_=None, regexp=None)\n</code></pre> <p>Update a key.</p> PARAMETER DESCRIPTION <code>key</code> <p>The name for the key.</p> <p> </p> <code>type_</code> <p>The type of the value, if defined.</p> <p> DEFAULT: <code>None</code> </p> <code>regexp</code> <p>The regular expression that values should match, if defined.</p> <p> DEFAULT: <code>None</code> </p>"},{"location":"metaconventionsclient.html#rucio.client.metaconventionsclient-functions","title":"Functions","text":""},{"location":"pingclient.html","title":"Pingclient","text":""},{"location":"pingclient.html#rucio.client.pingclient-classes","title":"Classes","text":""},{"location":"pingclient.html#rucio.client.pingclient.PingClient","title":"PingClient","text":"<pre><code>PingClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Ping client class</p>"},{"location":"pingclient.html#rucio.client.pingclient.PingClient-functions","title":"Functions","text":""},{"location":"pingclient.html#rucio.client.pingclient.PingClient.ping","title":"ping","text":"<pre><code>ping()\n</code></pre> <p>This is a light\u2011weight \u201care you alive?\u201d call (ping request) to the configured Rucio.</p> <p>A quick way to verify (without any required authentication):</p> <ul> <li> <p>Network connectivity between the client and the server.</p> </li> <li> <p>Whether the server process is running and able to respond.</p> </li> <li> <p>The server\u2019s build / version.</p> </li> </ul> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>A dictionary with a single key: the server version (e.g. {'version': '37.0.0'})</p> RAISES DESCRIPTION <code>RucioException</code> <p>If the HTTP status code is not 200 OK.</p> <p>Examples:</p> Example <p>Basic connectivity check:</p> <pre><code>from rucio.client.pingclient import PingClient\nping_client = PingClient()\n\ntry:\n    info = ping_client.ping()\n    print(f\"Connected to Rucio {info['version']}\")\nexcept Exception as err:\n    print(f\"Ping failed: {err}\")\n</code></pre>"},{"location":"pingclient.html#rucio.client.pingclient-functions","title":"Functions","text":""},{"location":"replicaclient.html","title":"Replicaclient","text":""},{"location":"replicaclient.html#rucio.client.replicaclient-classes","title":"Classes","text":""},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient","title":"ReplicaClient","text":"<pre><code>ReplicaClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Replica client class for working with replicas</p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient-functions","title":"Functions","text":""},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.quarantine_replicas","title":"quarantine_replicas","text":"<pre><code>quarantine_replicas(replicas, rse=None, rse_id=None)\n</code></pre> <p>Add quaratined replicas for RSE.</p> PARAMETER DESCRIPTION <code>replicas</code> <p>List of replica infos: {'scope':  (optional), 'name':  (optional), 'path': (required)}. <p> </p> <code>rse</code> <p>RSE name.</p> <p> DEFAULT: <code>None</code> </p> <code>rse_id</code> <p>RSE id. Either RSE name or RSE id must be specified, but not both.</p> <p> DEFAULT: <code>None</code> </p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.declare_bad_file_replicas","title":"declare_bad_file_replicas","text":"<pre><code>declare_bad_file_replicas(replicas, reason, force=False)\n</code></pre> <p>Declare a list of bad replicas.</p> PARAMETER DESCRIPTION <code>replicas</code> <p>Either a list of PFNs (string) or a list of dicts {'scope': , 'name': , 'rse_id':  or 'rse': } <p> </p> <code>reason</code> <p>The reason of the loss.</p> <p> </p> <code>force</code> <p>Tell the server to ignore existing replica status in the bad_replicas table. Default: False</p> <p> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>    Dictionary of the form {\"rse_name\": [\"did: error\",...]} - list of strings for DIDs failed to declare, by RSE</code>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.declare_bad_did_replicas","title":"declare_bad_did_replicas","text":"<pre><code>declare_bad_did_replicas(rse, dids, reason)\n</code></pre> <p>Declare a list of bad replicas.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE where the bad replicas reside.</p> <p> </p> <code>dids</code> <p>The DIDs of the bad replicas.</p> <p> </p> <code>reason</code> <p>The reason of the loss.</p> <p> </p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.declare_suspicious_file_replicas","title":"declare_suspicious_file_replicas","text":"<pre><code>declare_suspicious_file_replicas(pfns, reason)\n</code></pre> <p>Declare a list of bad replicas.</p> PARAMETER DESCRIPTION <code>pfns</code> <p>The list of PFNs.</p> <p> </p> <code>reason</code> <p>The reason of the loss.</p> <p> </p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.get_did_from_pfns","title":"get_did_from_pfns","text":"<pre><code>get_did_from_pfns(pfns, rse=None)\n</code></pre> <p>Get the DIDs associated to a PFN on one given RSE.</p> PARAMETER DESCRIPTION <code>pfns</code> <p>The list of PFNs.</p> <p> </p> <code>rse</code> <p>The RSE name.</p> <p> DEFAULT: <code>None</code> </p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_replicas","title":"list_replicas","text":"<pre><code>list_replicas(\n    dids,\n    schemes=None,\n    ignore_availability=True,\n    all_states=False,\n    metalink=False,\n    rse_expression=None,\n    client_location=None,\n    sort=None,\n    domain=None,\n    signature_lifetime=None,\n    nrandom=None,\n    resolve_archives=True,\n    resolve_parents=False,\n    updated_after=None,\n)\n</code></pre> <p>List file replicas for a list of data identifiers (DIDs).</p> PARAMETER DESCRIPTION <code>dids</code> <p>The list of data identifiers (DIDs) like : [{'scope': , 'name': }, {'scope': , 'name': }, ...] <p> </p> <code>schemes</code> <p>A list of schemes to filter the replicas. (e.g. file, http, ...)</p> <p> DEFAULT: <code>None</code> </p> <code>ignore_availability</code> <p>Also include replicas from blocked RSEs into the list</p> <p> DEFAULT: <code>True</code> </p> <code>all_states</code> <p>Include all states of the replicas. Default: False</p> <p> DEFAULT: <code>False</code> </p> <code>metalink</code> <p><code>False</code> (default) retrieves as JSON, <code>True</code> retrieves as metalink4+xml.</p> <p> DEFAULT: <code>False</code> </p> <code>rse_expression</code> <p>The RSE expression to restrict replicas on a set of RSEs.</p> <p> DEFAULT: <code>None</code> </p> <code>client_location</code> <p>Client location dictionary for PFN modification {'ip', 'fqdn', 'site', 'latitude', 'longitude'}</p> <p> DEFAULT: <code>None</code> </p> <code>sort</code> <p>Sort the replicas: <code>geoip</code> - based on src/dst IP topographical distance</p> <p> DEFAULT: <code>None</code> </p> <code>domain</code> <p>Define the domain. None is fallback to 'wan', otherwise 'wan, 'lan', or 'all'</p> <p> DEFAULT: <code>None</code> </p> <code>signature_lifetime</code> <p>If supported, in seconds, restrict the lifetime of the signed PFN.</p> <p> DEFAULT: <code>None</code> </p> <code>nrandom</code> <p>pick N random replicas. If the initial number of replicas is smaller than N, returns all replicas.</p> <p> DEFAULT: <code>None</code> </p> <code>resolve_archives</code> <p>When set to True, find archives which contain the replicas.</p> <p> DEFAULT: <code>True</code> </p> <code>resolve_parents</code> <p>When set to True, find all parent datasets which contain the replicas.</p> <p> DEFAULT: <code>False</code> </p> <code>updated_after</code> <p>epoch timestamp or datetime object (UTC time), only return replicas updated after this time</p> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>    A list of dictionaries with replica information.</code>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_suspicious_replicas","title":"list_suspicious_replicas","text":"<pre><code>list_suspicious_replicas(\n    rse_expression=None, younger_than=None, nattempts=None\n)\n</code></pre> <p>List file replicas tagged as suspicious.</p> PARAMETER DESCRIPTION <code>rse_expression</code> <p>The RSE expression to restrict replicas on a set of RSEs.</p> <p> DEFAULT: <code>None</code> </p> <code>younger_than</code> <p>Datetime object to select the replicas which were declared since younger_than date. Default value = 10 days ago.</p> <p> DEFAULT: <code>None</code> </p> <code>nattempts</code> <p>The minimum number of replica appearances in the bad_replica DB table from younger_than date. Default value = 0.</p> <p> DEFAULT: <code>None</code> </p> <code>state</code> <p>State of the replica, either 'BAD' or 'SUSPICIOUS'. No value returns replicas with either state.</p> <p> </p>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.add_replica","title":"add_replica","text":"<pre><code>add_replica(\n    rse,\n    scope,\n    name,\n    bytes_,\n    adler32,\n    pfn=None,\n    md5=None,\n    meta=None,\n)\n</code></pre> <p>Add file replicas to a RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>The scope of the file.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The name of the file.</p> <p> TYPE: <code>str</code> </p> <code>bytes_</code> <p>The size in bytes.</p> <p> TYPE: <code>int</code> </p> <code>adler32</code> <p>adler32 checksum.</p> <p> TYPE: <code>str</code> </p> <code>pfn</code> <p>PFN of the file for non deterministic RSE.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>md5</code> <p>md5 checksum.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>meta</code> <p>Metadata attributes.</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>    True if files were created successfully.</code>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.add_replicas","title":"add_replicas","text":"<pre><code>add_replicas(rse, files, ignore_availability=True)\n</code></pre> <p>Bulk add file replicas to a RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the RSE name</p> <p> </p> <code>files</code> <p>The list of files. This is a list of DIDs like : [{'scope': , 'name': }, {'scope': , 'name': }, ...] <p> </p> <code>ignore_availability</code> <p>Ignore the RSE blocklist</p> <p> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>True if files were created successfully.</code>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.delete_replicas","title":"delete_replicas","text":"<pre><code>delete_replicas(rse, files, ignore_availability=True)\n</code></pre> <p>Bulk delete file replicas from a RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>the RSE name</p> <p> </p> <code>files</code> <p>The list of files. This is a list of DIDs like : [{'scope': , 'name': }, {'scope': , 'name': }, ...] <p> </p> <code>ignore_availability</code> <p>Ignore the RSE blocklist</p> <p> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>True if files have been deleted successfully.</code>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.update_replicas_states","title":"update_replicas_states","text":"<pre><code>update_replicas_states(rse, files)\n</code></pre> <p>Bulk update the file replicas states from a RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> </p> <code>files</code> <p>The list of files. This is a list of DIDs like : [{'scope': , 'name': , 'state': }, {'scope': , 'name': , 'state': }, ...], Where a state value can be any of:     * 'A' (AVAILABLE)     * 'U' (UNAVAILABLE)     * 'C' (COPYING)     * 'B' (BEING_DELETED)     * 'D' (BAD)     * 'T' (TEMPORARY_UNAVAILABLE) <p> </p> RETURNS DESCRIPTION <code>True if replica states have been updated successfully, otherwise an exception is raised.</code>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_dataset_replicas","title":"list_dataset_replicas","text":"<pre><code>list_dataset_replicas(scope, name, deep=False)\n</code></pre> <p>List dataset replicas for a DID (scope:name).</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope of the dataset.</p> <p> </p> <code>name</code> <p>The name of the dataset.</p> <p> </p> <code>deep</code> <p>Lookup at the file level.</p> <p> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>A list of dict dataset replicas</code>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_dataset_replicas_bulk","title":"list_dataset_replicas_bulk","text":"<pre><code>list_dataset_replicas_bulk(dids)\n</code></pre> <p>List dataset replicas for a DID (scope:name).</p> PARAMETER DESCRIPTION <code>dids</code> <p>The list of DIDs of the datasets</p> <p> </p> RETURNS DESCRIPTION <code>A list of dict dataset replicas</code>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_dataset_replicas_vp","title":"list_dataset_replicas_vp","text":"<pre><code>list_dataset_replicas_vp(scope, name, deep=False)\n</code></pre> <p>List dataset replicas for a DID (scope:name) using the Virtual Placement service.</p> <p>NOTICE: This is an RnD function and might change or go away at any time.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope of the dataset.</p> <p> </p> <code>name</code> <p>The name of the dataset.</p> <p> </p> <code>deep</code> <p>Lookup at the file level.</p> <p> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>If VP exists a list of dicts of sites</code>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.list_datasets_per_rse","title":"list_datasets_per_rse","text":"<pre><code>list_datasets_per_rse(rse, filters=None, limit=None)\n</code></pre> <p>List datasets at a RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> </p> <code>filters</code> <p>dictionary of attributes by which the results should be filtered.</p> <p> DEFAULT: <code>None</code> </p> <code>limit</code> <p>limit number.</p> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>A list of dict dataset replicas</code>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.add_bad_pfns","title":"add_bad_pfns","text":"<pre><code>add_bad_pfns(pfns, reason, state, expires_at)\n</code></pre> <p>Declare a list of bad replicas.</p> PARAMETER DESCRIPTION <code>pfns</code> <p>The list of PFNs.</p> <p> </p> <code>reason</code> <p>The reason of the loss.</p> <p> </p> <code>state</code> <p>The state of the replica. Either BAD, SUSPICIOUS, TEMPORARY_UNAVAILABLE</p> <p> </p> <code>expires_at</code> <p>Specify a timeout for the TEMPORARY_UNAVAILABLE replicas. None for BAD files.</p> <p> </p> RETURNS DESCRIPTION <code>True if PFNs were created successfully.</code>"},{"location":"replicaclient.html#rucio.client.replicaclient.ReplicaClient.set_tombstone","title":"set_tombstone","text":"<pre><code>set_tombstone(replicas)\n</code></pre> <p>Set a tombstone on a list of replicas.</p> PARAMETER DESCRIPTION <code>replicas</code> <p>list of replicas.</p> <p> </p>"},{"location":"replicaclient.html#rucio.client.replicaclient-functions","title":"Functions","text":""},{"location":"requestclient.html","title":"Requestclient","text":""},{"location":"requestclient.html#rucio.client.requestclient-classes","title":"Classes","text":""},{"location":"requestclient.html#rucio.client.requestclient.RequestClient","title":"RequestClient","text":"<pre><code>RequestClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient-functions","title":"Functions","text":""},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.list_requests","title":"list_requests","text":"<pre><code>list_requests(src_rse, dst_rse, request_states)\n</code></pre> <p>Return latest request details</p> RETURNS DESCRIPTION <code>request information</code>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.list_requests_history","title":"list_requests_history","text":"<pre><code>list_requests_history(\n    src_rse, dst_rse, request_states, offset=0, limit=100\n)\n</code></pre> <p>Return historical request details</p> RETURNS DESCRIPTION <code>request information</code>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.list_request_by_did","title":"list_request_by_did","text":"<pre><code>list_request_by_did(name, rse, scope=None)\n</code></pre> <p>Return latest request details for a DID</p> PARAMETER DESCRIPTION <code>name</code> <p>DID</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>Destination RSE name</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>rucio scope, defaults to None</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>exc_cls: from BaseClient._get_exception</code> RETURNS DESCRIPTION <code>request information</code>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.list_request_history_by_did","title":"list_request_history_by_did","text":"<pre><code>list_request_history_by_did(name, rse, scope=None)\n</code></pre> <p>Return latest request details for a DID</p> PARAMETER DESCRIPTION <code>name</code> <p>DID</p> <p> TYPE: <code>str</code> </p> <code>rse</code> <p>Destination RSE name</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>rucio scope, defaults to None</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>exc_cls: from BaseClient._get_exception</code> RETURNS DESCRIPTION <code>request information</code>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.list_transfer_limits","title":"list_transfer_limits","text":"<pre><code>list_transfer_limits()\n</code></pre> <p>Returns all the transfer limits</p> <p>:returns: transfer limits</p>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.set_transfer_limit","title":"set_transfer_limit","text":"<pre><code>set_transfer_limit(\n    rse_expression,\n    activity=None,\n    direction=TransferLimitDirection.DESTINATION,\n    max_transfers=None,\n    volume=None,\n    deadline=None,\n    strategy=None,\n    transfers=None,\n    waitings=None,\n)\n</code></pre> <p>Set the transfer limit for a given RSE</p> <p>:param rse_expression: RSE expression string. :param activity: The activity. :param direction: The direction in which this limit applies (source/destination) :param max_transfers: Maximum transfers. :param volume: Maximum transfer volume in bytes. :param deadline: Maximum waiting time in hours until a datasets gets released. :param strategy: defines how to handle datasets: <code>fifo</code> (each file released separately) or <code>grouped_fifo</code> (wait for the entire dataset to fit) :param transfers: Current number of active transfers :param waitings: Current number of waiting transfers</p> <p>:returns: True if the transfer limit was deleted</p>"},{"location":"requestclient.html#rucio.client.requestclient.RequestClient.delete_transfer_limit","title":"delete_transfer_limit","text":"<pre><code>delete_transfer_limit(\n    rse_expression,\n    activity=None,\n    direction=TransferLimitDirection.DESTINATION,\n)\n</code></pre> <p>Delete the transfer limit for a given RSE</p> <p>:param rse_expression: RSE expression string. :param activity: The activity. :param direction: The direction in which this limit applies (source/destination)</p> <p>:returns: True if the transfer limit was deleted</p>"},{"location":"requestclient.html#rucio.client.requestclient-functions","title":"Functions","text":""},{"location":"richclient.html","title":"Richclient","text":""},{"location":"richclient.html#rucio.client.richclient-classes","title":"Classes","text":""},{"location":"richclient.html#rucio.client.richclient.CLITheme","title":"CLITheme","text":"<p>Class to define styles for Rich widgets and prints in the CLI.</p>"},{"location":"richclient.html#rucio.client.richclient-functions","title":"Functions","text":""},{"location":"richclient.html#rucio.client.richclient.setup_rich_logger","title":"setup_rich_logger","text":"<pre><code>setup_rich_logger(\n    module_name=None,\n    logger_name=None,\n    logger_level=None,\n    verbose=False,\n    console=None,\n)\n</code></pre> <p>Factory method to set logger with RichHandler.</p> <p>The function is a copy of the method in rucio.common.utils setup_logger() with minor changes.</p> <p>:param module_name: name of the module that is calling this method :param logger_name: name of the logger, typically name of the module. :param logger_level: if not given, fetched from config. :param verbose: verbose option set in bin/rucio :param console: Rich console object :returns: logger with RichHandler</p>"},{"location":"richclient.html#rucio.client.richclient.generate_table","title":"generate_table","text":"<pre><code>generate_table(\n    rows,\n    headers=None,\n    row_styles=None,\n    col_alignments=None,\n    table_format=CLITheme.TABLE_FMT,\n)\n</code></pre> <p>Generates a Rich Table object from given input rows.</p> <p>The elements in each row can be either plain strings or Rich renderable objects. Passing strings will display them as simple text, while using Rich objects allows you to introduce additional structure, styling, and widgets (e.g. Text, Trees) into the table. Strings with style markup will be rendered as styled text.</p> <p>:param table_format: style of the table :param headers: list of headers :param rows: list of rows :param col_alignments: list of column alignments :param row_styles: list of row styles :returns: a Rich Table object</p>"},{"location":"richclient.html#rucio.client.richclient.print_output","title":"print_output","text":"<pre><code>print_output(*output, console, no_pager=False)\n</code></pre> <p>Prints the objects using the specified Rich console object. Optionally disables the pager if specified.</p> <p>The function works similarly to Rich's <code>console.print()</code> method but provides additional control over the pager feature.</p> <p>:param output: objects to print to the terminal :param console: Rich console object :param no_pager: flag to disable the pager</p>"},{"location":"richclient.html#rucio.client.richclient.get_cli_config","title":"get_cli_config","text":"<pre><code>get_cli_config()\n</code></pre> <p>Returns the CLI type from the config file.</p> <p>:returns: CLI type (Rich or tabulate)</p>"},{"location":"richclient.html#rucio.client.richclient.get_pager","title":"get_pager","text":"<pre><code>get_pager()\n</code></pre> <p>Returns the pager function based on the terminal availability.</p> <p>:returns: pager</p>"},{"location":"rseclient.html","title":"Rseclient","text":""},{"location":"rseclient.html#rucio.client.rseclient-classes","title":"Classes","text":""},{"location":"rseclient.html#rucio.client.rseclient.RSEClient","title":"RSEClient","text":"<pre><code>RSEClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>RSE client class for working with rucio RSEs</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient-functions","title":"Functions","text":""},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_rse","title":"get_rse","text":"<pre><code>get_rse(rse)\n</code></pre> <p>Returns details about the referred RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>Name of the referred RSE</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>A dict containing all attributes of the referred RSE.</code> RAISES DESCRIPTION <code>RSENotFound:</code> <p>if the referred RSE was not found in the database.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_rse","title":"add_rse","text":"<pre><code>add_rse(rse, **kwargs)\n</code></pre> <p>Sends the request to create a new RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The name of the RSE.</p> <p> TYPE: <code>str</code> </p> <code>deterministic</code> <p>Boolean to know if the pfn is generated deterministically.</p> <p> </p> <code>volatile</code> <p>Boolean for RSE cache.</p> <p> </p> <code>city</code> <p>City for the RSE.</p> <p> </p> <code>region_code</code> <p>The region code for the RSE.</p> <p> </p> <code>country_name</code> <p>The country.</p> <p> </p> <code>continent</code> <p>The continent.</p> <p> </p> <code>time_zone</code> <p>Timezone.</p> <p> </p> <code>staging_area</code> <p>Staging area.</p> <p> </p> <code>ISP</code> <p>Internet service provider.</p> <p> </p> <code>rse_type</code> <p>RSE type.</p> <p> </p> <code>latitude</code> <p>Latitude coordinate of RSE.</p> <p> </p> <code>longitude</code> <p>Longitude coordinate of RSE.</p> <p> </p> <code>ASN</code> <p>Access service network.</p> <p> </p> <code>availability</code> <p>Availability.</p> <p> </p> RETURNS DESCRIPTION <code>    True if RSE was created successfully else False</code> RAISES DESCRIPTION <code>Duplicate</code> <p>If RSE already exists.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.update_rse","title":"update_rse","text":"<pre><code>update_rse(rse, parameters)\n</code></pre> <p>Update RSE properties like availability or name.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The name of the RSE.</p> <p> TYPE: <code>str</code> </p> <code>parameters</code> <p>A dictionary with property (name, read, write, delete as keys).</p> <p> TYPE: <code>dict[str, Any]</code> </p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_rse","title":"delete_rse","text":"<pre><code>delete_rse(rse)\n</code></pre> <p>Sends the request to delete a rse.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The name of the RSE.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>True if RSE was deleted successfully else False.</code>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.list_rses","title":"list_rses","text":"<pre><code>list_rses(rse_expression=None)\n</code></pre> <p>Sends the request to list all rucio locations(RSEs).</p> PARAMETER DESCRIPTION <code>rse_expression</code> <p>RSE expression to use as filter.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>A list containing the names of all rucio locations.</code>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_rse_attribute","title":"add_rse_attribute","text":"<pre><code>add_rse_attribute(rse, key, value)\n</code></pre> <p>Sends the request to add a RSE attribute.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The name of the RSE.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>The attribute key.</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The attribute value.</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>True if RSE attribute was created successfully else False.</code> RAISES DESCRIPTION <code>Duplicate</code> <p>If RSE attribute already exists.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_rse_attribute","title":"delete_rse_attribute","text":"<pre><code>delete_rse_attribute(rse, key)\n</code></pre> <p>Sends the request to delete a RSE attribute.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>The attribute key.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>True if RSE attribute was deleted successfully else False.</code>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.list_rse_attributes","title":"list_rse_attributes","text":"<pre><code>list_rse_attributes(rse)\n</code></pre> <p>Sends the request to get RSE attributes.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>A dict with the RSE attribute name/value pairs.</code>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_protocol","title":"add_protocol","text":"<pre><code>add_protocol(rse, params)\n</code></pre> <p>Sends the request to create a new protocol for the given RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The name of the RSE.</p> <p> TYPE: <code>str</code> </p> <code>params</code> <p>Attributes of the protocol. Supported are: - scheme: identifier of this protocol - hostname: hostname for this protocol (default = localhost) - port: port for this protocol (default = 0) - prefix: string used as a prefix for this protocol when generating the PFN (default = None) - impl: qualified name of the implementation class for this protocol (mandatory) - read: integer representing the priority of this protocol for read operations (default = -1) - write: integer representing the priority of this protocol for write operations (default = -1) - delete: integer representing the priority of this protocol for delete operations (default = -1) - extended_attributes: miscellaneous protocol specific information e.g. spacetoken for SRM (default = None)</p> <p> TYPE: <code>dict[str, Any]</code> </p> RETURNS DESCRIPTION <code>    True if protocol was created successfully.</code> RAISES DESCRIPTION <code>Duplicate</code> <p>If protocol with same hostname, port and protocol identifier already exists for the given RSE.</p> <code>RSENotFound</code> <p>If the RSE doesn't exist.</p> <code>KeyNotFound</code> <p>If params is missing mandatory attributes to create the protocol.</p> <code>AccessDenied</code> <p>If not authorized.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_protocols","title":"get_protocols","text":"<pre><code>get_protocols(\n    rse,\n    protocol_domain=\"ALL\",\n    operation=None,\n    default=False,\n    scheme=None,\n)\n</code></pre> <p>Returns protocol information. Parameter combinations are: (operation OR default) XOR protocol.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> <code>protocol_domain</code> <p>The scope of the protocol. Supported are 'LAN', 'WAN', and 'ALL', by default 'ALL'.</p> <p> TYPE: <code>RSE_SUPPORTED_PROTOCOL_DOMAINS_LITERAL</code> DEFAULT: <code>'ALL'</code> </p> <code>operation</code> <p>The name of the requested operation (read, write, or delete). If None, all operations are queried, by default None.</p> <p> TYPE: <code>Optional[RSE_ALL_SUPPORTED_PROTOCOL_OPERATIONS_LITERAL]</code> DEFAULT: <code>None</code> </p> <code>default</code> <p>Indicates if only the default operations should be returned, by default False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>scheme</code> <p>The identifier of the requested protocol, by default None.</p> <p> TYPE: <code>Optional[SUPPORTED_PROTOCOLS_LITERAL]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>    A dict with details about each matching protocol.</code> RAISES DESCRIPTION <code>RSENotFound</code> <p>If the RSE doesn't exist.</p> <code>RSEProtocolNotSupported</code> <p>If no matching protocol entry could be found.</p> <code>RSEOperationNotSupported</code> <p>If no matching protocol entry for the requested operation could be found.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.lfns2pfns","title":"lfns2pfns","text":"<pre><code>lfns2pfns(\n    rse,\n    lfns,\n    protocol_domain=\"ALL\",\n    operation=None,\n    scheme=None,\n)\n</code></pre> <p>Returns PFNs that should be used at a RSE, corresponding to requested LFNs. The PFNs are generated for the RSE regardless of whether a replica exists for the LFN.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> <code>lfns</code> <p>A list of LFN strings to translate to PFNs.</p> <p> TYPE: <code>Iterable[str]</code> </p> <code>protocol_domain</code> <p>The scope of the protocol.</p> <p> TYPE: <code>RSE_SUPPORTED_PROTOCOL_DOMAINS_LITERAL</code> DEFAULT: <code>'ALL'</code> </p> <code>operation</code> <p>The name of the requested operation (read, write, or delete). If None, all operations are queried, by default None.</p> <p> TYPE: <code>Optional[RSE_ALL_SUPPORTED_PROTOCOL_OPERATIONS_LITERAL]</code> DEFAULT: <code>None</code> </p> <code>scheme</code> <p>The identifier of the requested protocol (gsiftp, https, davs, etc), by default None.</p> <p> TYPE: <code>Optional[SUPPORTED_PROTOCOLS_LITERAL]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>    A dictionary of LFN / PFN pairs.</code> RAISES DESCRIPTION <code>RSENotFound</code> <p>If the RSE doesn't exist.</p> <code>RSEProtocolNotSupported</code> <p>If no matching protocol entry could be found.</p> <code>RSEOperationNotSupported</code> <p>If no matching protocol entry for the requested operation could be found.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_protocols","title":"delete_protocols","text":"<pre><code>delete_protocols(rse, scheme, hostname=None, port=None)\n</code></pre> <p>Deletes matching protocols from RSE. Protocols using the same identifier can be distinguished by hostname and port.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> <code>scheme</code> <p>The identifier of the protocol.</p> <p> TYPE: <code>SUPPORTED_PROTOCOLS_LITERAL</code> </p> <code>hostname</code> <p>The hostname of the protocol.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>port</code> <p>The port of the protocol.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>True if success.</code> RAISES DESCRIPTION <code>RSEProtocolNotSupported</code> <p>If no matching protocol entry could be found.</p> <code>RSENotFound</code> <p>If the RSE doesn't exist.</p> <code>AccessDenied</code> <p>If not authorized.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.update_protocols","title":"update_protocols","text":"<pre><code>update_protocols(\n    rse, scheme, data, hostname=None, port=None\n)\n</code></pre> <p>Updates matching protocols from RSE. Protocol using the same identifier can be distinguished by hostname and port.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> <code>scheme</code> <p>The identifier of the protocol.</p> <p> TYPE: <code>SUPPORTED_PROTOCOLS_LITERAL</code> </p> <code>data</code> <p>A dict providing the new values of the protocol attributes. Keys must match column names in database.</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>hostname</code> <p>The hostname of the protocol.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>port</code> <p>The port of the protocol.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>True if success.</code> RAISES DESCRIPTION <code>RSEProtocolNotSupported</code> <p>If no matching protocol entry could be found.</p> <code>RSENotFound</code> <p>If the RSE doesn't exist.</p> <code>KeyNotFound</code> <p>If invalid data was provided for update.</p> <code>AccessDenied</code> <p>If not authorized.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.swap_protocols","title":"swap_protocols","text":"<pre><code>swap_protocols(rse, domain, operation, scheme_a, scheme_b)\n</code></pre> <p>Swaps the priorities of the provided operation.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> <code>domain</code> <p>The domain in which priorities should be swapped (e.g., 'wan' or 'lan').</p> <p> TYPE: <code>RSE_SUPPORTED_PROTOCOL_DOMAINS_LITERAL</code> </p> <code>operation</code> <p>The operation for which priorities should be swapped (e.g., 'read', 'write', or 'delete').</p> <p> TYPE: <code>RSE_ALL_SUPPORTED_PROTOCOL_OPERATIONS_LITERAL</code> </p> <code>scheme_a</code> <p>The scheme of one of the two protocols to be swapped (e.g., 'srm').</p> <p> TYPE: <code>SUPPORTED_PROTOCOLS_LITERAL</code> </p> <code>scheme_b</code> <p>The scheme of the other protocol to be swapped (e.g., 'http').</p> <p> TYPE: <code>SUPPORTED_PROTOCOLS_LITERAL</code> </p> RETURNS DESCRIPTION <code>    True if successful.</code> RAISES DESCRIPTION <code>RSEProtocolNotSupported</code> <p>If no matching protocol entry could be found.</p> <code>RSENotFound</code> <p>If the RSE doesn't exist.</p> <code>KeyNotFound</code> <p>If invalid data was provided for update.</p> <code>AccessDenied</code> <p>If not authorized.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_qos_policy","title":"add_qos_policy","text":"<pre><code>add_qos_policy(rse, qos_policy)\n</code></pre> <p>Add a QoS policy to an RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The name of the RSE.</p> <p> TYPE: <code>str</code> </p> <code>qos_policy</code> <p>The QoS policy to add.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>True if successful.</code> RAISES DESCRIPTION <code>Duplicate</code> <p>If the QoS policy already exists.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_qos_policy","title":"delete_qos_policy","text":"<pre><code>delete_qos_policy(rse, qos_policy)\n</code></pre> <p>Delete a QoS policy from an RSE.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The name of the RSE.</p> <p> TYPE: <code>str</code> </p> <code>qos_policy</code> <p>The QoS policy to delete.</p> <p> TYPE: <code>str</code> </p> <code>session</code> <p>The database session in use.</p> <p> </p> RETURNS DESCRIPTION <code>True if successful.</code> RAISES DESCRIPTION <code>RSENotFound</code> <p>If the RSE doesn't exist.</p> <code>QoSPolicyNotFound</code> <p>If the QoS policy doesn't exist.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.list_qos_policies","title":"list_qos_policies","text":"<pre><code>list_qos_policies(rse)\n</code></pre> <p>List all QoS policies of an RSE.</p> <p>:param rse_id: The id of the RSE. :param session: The database session in use.</p> <p>:returns: List containing all QoS policies.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.set_rse_usage","title":"set_rse_usage","text":"<pre><code>set_rse_usage(rse, source, used, free, files=None)\n</code></pre> <p>Set RSE usage information.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> <code>source</code> <p>The information source, e.g. srm.</p> <p> TYPE: <code>str</code> </p> <code>used</code> <p>The used space in bytes.</p> <p> TYPE: <code>int</code> </p> <code>free</code> <p>The free space in bytes.</p> <p> TYPE: <code>int</code> </p> <code>files</code> <p>The number of files.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>True if successful.</code>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_rse_usage","title":"get_rse_usage","text":"<pre><code>get_rse_usage(rse, filters=None)\n</code></pre> <p>Get RSE usage information.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> <code>filters</code> <p>dictionary of attributes by which the results should be filtered</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>True if successful, otherwise false.</code>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.list_rse_usage_history","title":"list_rse_usage_history","text":"<pre><code>list_rse_usage_history(rse, filters=None)\n</code></pre> <p>List RSE usage history information.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> <code>filters</code> <p>dictionary of attributes by which the results should be filtered</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list of dictionaries</code>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.set_rse_limits","title":"set_rse_limits","text":"<pre><code>set_rse_limits(rse, name, value)\n</code></pre> <p>Set RSE limit information.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The name of the limit.</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The feature value.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>True if successful.</code>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_rse_limits","title":"get_rse_limits","text":"<pre><code>get_rse_limits(rse)\n</code></pre> <p>Get RSE limits.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>An iterator of RSE limits as dicts with 'name' and 'value' as keys.</code>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_rse_limits","title":"delete_rse_limits","text":"<pre><code>delete_rse_limits(rse, name)\n</code></pre> <p>Delete RSE limit information.</p> PARAMETER DESCRIPTION <code>rse</code> <p>The RSE name.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The name of the limit.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>True if successful.</code>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.add_distance","title":"add_distance","text":"<pre><code>add_distance(source, destination, parameters)\n</code></pre> <p>Add a src-dest distance.</p> <p>:param source: The source. :param destination: The destination. :param parameters: A dictionary with property.</p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.update_distance","title":"update_distance","text":"<pre><code>update_distance(source, destination, parameters)\n</code></pre> <p>Update distances with the given RSE ids.</p> PARAMETER DESCRIPTION <code>source</code> <p>The source RSE.</p> <p> TYPE: <code>str</code> </p> <code>destination</code> <p>The destination RSE.</p> <p> TYPE: <code>str</code> </p> <code>parameters</code> <p>A dictionary with property</p> <p> TYPE: <code>dict[str, int]</code> </p>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.get_distance","title":"get_distance","text":"<pre><code>get_distance(source, destination)\n</code></pre> <p>Get distances between rses.</p> Param <p>source :     The source RSE. destination :</p> <pre><code>The destination RSE.\n</code></pre> RETURNS DESCRIPTION <code>    A list of dictionaries with the distance information.</code>"},{"location":"rseclient.html#rucio.client.rseclient.RSEClient.delete_distance","title":"delete_distance","text":"<pre><code>delete_distance(source, destination)\n</code></pre> <p>Delete distances with the given RSE ids.</p> PARAMETER DESCRIPTION <code>source</code> <p>The source</p> <p> TYPE: <code>str</code> </p> <code>destination</code> <p>The destination</p> <p> TYPE: <code>str</code> </p>"},{"location":"rseclient.html#rucio.client.rseclient-functions","title":"Functions","text":""},{"location":"ruleclient.html","title":"Ruleclient","text":""},{"location":"ruleclient.html#rucio.client.ruleclient-classes","title":"Classes","text":""},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient","title":"RuleClient","text":"<pre><code>RuleClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>RuleClient class for working with replication rules</p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient-functions","title":"Functions","text":""},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.add_replication_rule","title":"add_replication_rule","text":"<pre><code>add_replication_rule(\n    dids,\n    copies,\n    rse_expression,\n    priority=3,\n    lifetime=None,\n    grouping=\"DATASET\",\n    notify=\"N\",\n    source_replica_expression=None,\n    activity=None,\n    account=None,\n    meta=None,\n    ignore_availability=False,\n    purge_replicas=False,\n    ask_approval=False,\n    asynchronous=False,\n    locked=False,\n    delay_injection=None,\n    comment=None,\n    weight=None,\n)\n</code></pre> <p>Add a replication rule.</p> PARAMETER DESCRIPTION <code>dids</code> <p>The data identifier set.</p> <p> TYPE: <code>Sequence[dict[str, str]]</code> </p> <code>copies</code> <p>The number of replicas.</p> <p> TYPE: <code>int</code> </p> <code>rse_expression</code> <p>Boolean string expression to give the list of RSEs.</p> <p> TYPE: <code>str</code> </p> <code>priority</code> <p>Priority of the transfers. Default is 3.</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>lifetime</code> <p>The lifetime of the replication rules (in seconds).</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>grouping</code> <p>ALL - All files will be replicated to the same RSE. DATASET - All files in the same dataset will be replicated to the same RSE. NONE - Files will be completely spread over all allowed RSEs without any grouping considerations at all. Default is 'DATASET'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'DATASET'</code> </p> <code>notify</code> <p>Notification setting for the rule (Y, N, C). Default is 'N'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'N'</code> </p> <code>source_replica_expression</code> <p>RSE Expression for RSEs to be considered for source replicas.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>activity</code> <p>Transfer Activity to be passed to FTS.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>account</code> <p>The account owning the rule.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>meta</code> <p>Metadata, as dictionary.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>ignore_availability</code> <p>Option to ignore the availability of RSEs. Default is False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>purge_replicas</code> <p>When the rule gets deleted purge the associated replicas immediately. Default is False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>ask_approval</code> <p>Ask for approval of this replication rule. Default is False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>asynchronous</code> <p>Create rule asynchronously by judge-injector. Default is False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>locked</code> <p>If the rule is locked, it cannot be deleted. Default is False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>delay_injection</code> <p>Delay the rule injection.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>comment</code> <p>Comment about the rule.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>weight</code> <p>If the weighting option of the replication rule is used, the choice of RSEs takes their weight into account.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.delete_replication_rule","title":"delete_replication_rule","text":"<pre><code>delete_replication_rule(rule_id, purge_replicas=None)\n</code></pre> <p>Deletes a replication rule and all associated locks.</p> PARAMETER DESCRIPTION <code>rule_id</code> <p>The id of the rule to be deleted.</p> <p> TYPE: <code>str</code> </p> <code>purge_replicas</code> <p>Immediate delete the replicas</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>RuleNotFound</code> <code>AccessDenied</code>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.get_replication_rule","title":"get_replication_rule","text":"<pre><code>get_replication_rule(rule_id)\n</code></pre> <p>Get a replication rule.</p> PARAMETER DESCRIPTION <code>rule_id</code> <p>The id of the rule to be retrieved.</p> <p> TYPE: <code>str</code> </p> RAISES DESCRIPTION <code>RuleNotFound</code>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.update_replication_rule","title":"update_replication_rule","text":"<pre><code>update_replication_rule(rule_id, options)\n</code></pre> PARAMETER DESCRIPTION <code>rule_id</code> <p>The id of the rule to be retrieved.</p> <p> TYPE: <code>str</code> </p> <code>options</code> <p>Options dictionary.</p> <p> TYPE: <code>dict[str, Any]</code> </p> RAISES DESCRIPTION <code>RuleNotFound</code>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.reduce_replication_rule","title":"reduce_replication_rule","text":"<pre><code>reduce_replication_rule(\n    rule_id, copies, exclude_expression=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>rule_id</code> <p>The id of the rule to be reduced.</p> <p> TYPE: <code>str</code> </p> <code>copies</code> <p>Number of copies of the new rule.</p> <p> TYPE: <code>int</code> </p> <code>exclude_expression</code> <p>RSE Expression of RSEs to exclude.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>RuleNotFound</code> <code>RuleReplaceFailed</code>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.move_replication_rule","title":"move_replication_rule","text":"<pre><code>move_replication_rule(rule_id, rse_expression, override)\n</code></pre> <p>Move a replication rule to another RSE and, once done, delete the original one.</p> PARAMETER DESCRIPTION <code>rule_id</code> <p>Rule to be moved.</p> <p> TYPE: <code>str</code> </p> <code>rse_expression</code> <p>RSE expression of the new rule.</p> <p> TYPE: <code>str</code> </p> <code>override</code> <p>Configurations to update for the new rule.</p> <p> TYPE: <code>Mapping[str, Any]</code> </p> RAISES DESCRIPTION <code>RuleNotFound</code> <code>RuleReplaceFailed</code>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.approve_replication_rule","title":"approve_replication_rule","text":"<pre><code>approve_replication_rule(rule_id)\n</code></pre> PARAMETER DESCRIPTION <code>rule_id</code> <p>Rule to be approved.</p> <p> TYPE: <code>str</code> </p> RAISES DESCRIPTION <code>RuleNotFound</code>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.deny_replication_rule","title":"deny_replication_rule","text":"<pre><code>deny_replication_rule(rule_id, reason=None)\n</code></pre> PARAMETER DESCRIPTION <code>rule_id</code> <p>Rule to be denied.</p> <p> TYPE: <code>str</code> </p> <code>reason</code> <p>Reason for denying the rule.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>RuleNotFound</code>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.list_replication_rule_full_history","title":"list_replication_rule_full_history","text":"<pre><code>list_replication_rule_full_history(scope, name)\n</code></pre> <p>List the rule history of a DID.</p> PARAMETER DESCRIPTION <code>scope</code> <p>The scope of the DID.</p> <p> TYPE: <code>Union[str, bytes]</code> </p> <code>name</code> <p>The name of the DID.</p> <p> TYPE: <code>Union[str, bytes]</code> </p>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.examine_replication_rule","title":"examine_replication_rule","text":"<pre><code>examine_replication_rule(rule_id)\n</code></pre> <p>Examine a replication rule for errors during transfer.</p> PARAMETER DESCRIPTION <code>rule_id</code> <p>The rule to be denied</p> <p> TYPE: <code>str</code> </p> RAISES DESCRIPTION <code>RuleNotFound</code>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.list_replica_locks","title":"list_replica_locks","text":"<pre><code>list_replica_locks(rule_id)\n</code></pre> <p>List details of all replica locks for a rule.</p> PARAMETER DESCRIPTION <code>rule_id</code> <p>The rule to be denied</p> <p> TYPE: <code>str</code> </p> RAISES DESCRIPTION <code>RuleNotFound</code>"},{"location":"ruleclient.html#rucio.client.ruleclient.RuleClient.list_replication_rules","title":"list_replication_rules","text":"<pre><code>list_replication_rules(filters=None)\n</code></pre> <p>List all replication rules which match a filter</p> PARAMETER DESCRIPTION <code>filers</code> <p>dictionary of attributes by which the rules should be filtered</p> <p> </p> RETURNS DESCRIPTION <code>True if successful, otherwise false.</code>"},{"location":"ruleclient.html#rucio.client.ruleclient-functions","title":"Functions","text":""},{"location":"scopeclient.html","title":"Scopeclient","text":""},{"location":"scopeclient.html#rucio.client.scopeclient-classes","title":"Classes","text":""},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient","title":"ScopeClient","text":"<pre><code>ScopeClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Scope client class for working with rucio scopes</p>"},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient-functions","title":"Functions","text":""},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient.add_scope","title":"add_scope","text":"<pre><code>add_scope(account, scope)\n</code></pre> <p>Sends the request to add a new scope.</p> PARAMETER DESCRIPTION <code>account</code> <p>The name of the account to add the scope to.</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>The name of the new scope.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>    True if scope was created successfully.</code> RAISES DESCRIPTION <code>Duplicate</code> <p>If scope already exists.</p> <code>AccountNotFound</code> <p>If account doesn't exist.</p>"},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient.list_scopes","title":"list_scopes","text":"<pre><code>list_scopes()\n</code></pre> <p>Sends the request to list all scopes.</p> RETURNS DESCRIPTION <code>A list containing the names of all scopes.</code>"},{"location":"scopeclient.html#rucio.client.scopeclient.ScopeClient.list_scopes_for_account","title":"list_scopes_for_account","text":"<pre><code>list_scopes_for_account(account)\n</code></pre> <p>Sends the request to list all scopes for a rucio account.</p> PARAMETER DESCRIPTION <code>account</code> <p>The rucio account to list scopes for.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>    A list containing the names of all scopes for a rucio account.</code> RAISES DESCRIPTION <code>AccountNotFound</code> <p>If account doesn't exist.</p> <code>ScopeNotFound</code> <p>If no scopes exist for account.</p>"},{"location":"scopeclient.html#rucio.client.scopeclient-functions","title":"Functions","text":""},{"location":"subscriptionclient.html","title":"Subscriptionclient","text":""},{"location":"subscriptionclient.html#rucio.client.subscriptionclient-classes","title":"Classes","text":""},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient","title":"SubscriptionClient","text":"<pre><code>SubscriptionClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>SubscriptionClient class for working with subscriptions</p>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient-functions","title":"Functions","text":""},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient.add_subscription","title":"add_subscription","text":"<pre><code>add_subscription(\n    name,\n    account,\n    filter_,\n    replication_rules,\n    comments,\n    lifetime,\n    retroactive,\n    dry_run,\n    priority=3,\n)\n</code></pre> <p>Adds a new subscription which will be verified against every new added file and dataset</p> PARAMETER DESCRIPTION <code>name</code> <p>Name of the subscription</p> <p> TYPE: <code>str</code> </p> <code>account</code> <p>Account identifier</p> <p> TYPE: <code>str</code> </p> <code>filter_</code> <p>Dictionary of attributes by which the input data should be filtered Example: <code>{'dsn': 'data11_hi*.express_express.*,data11_hi*physics_MinBiasOverlay*', 'account': 'tzero'}</code></p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>replication_rules</code> <p>Replication rules to be set. Dictionary with keys copies, rse_expression, weight, rse_expression</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>comments</code> <p>Comments for the subscription</p> <p> TYPE: <code>str</code> </p> <code>lifetime</code> <p>Subscription's lifetime (days); False if subscription has no lifetime</p> <p> TYPE: <code>Union[int, Literal[False]]</code> </p> <code>retroactive</code> <p>Flag to know if the subscription should be applied on previous data</p> <p> TYPE: <code>bool</code> </p> <code>dry_run</code> <p>Just print the subscriptions actions without actually executing them (Useful if retroactive flag is set)</p> <p> TYPE: <code>bool</code> </p> <code>priority</code> <p>The priority of the subscription (3 by default)</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient.list_subscriptions","title":"list_subscriptions","text":"<pre><code>list_subscriptions(name=None, account=None)\n</code></pre> <p>Returns a dictionary with the subscription information : Examples: <code>{'status': 'INACTIVE/ACTIVE/BROKEN', 'last_modified_date': ...}</code></p> PARAMETER DESCRIPTION <code>name</code> <p>Name of the subscription</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>account</code> <p>Account identifier</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Dictionary with the subscription information</code> RAISES DESCRIPTION <code>NotFound</code> <p>If subscription is not found</p>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient.update_subscription","title":"update_subscription","text":"<pre><code>update_subscription(\n    name,\n    account=None,\n    filter_=None,\n    replication_rules=None,\n    comments=None,\n    lifetime=None,\n    retroactive=None,\n    dry_run=None,\n    priority=None,\n)\n</code></pre> <p>Updates a subscription</p> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>Name of the subscription</code> </p> <code>account</code> <p> TYPE: <code>Account identifier</code> DEFAULT: <code>None</code> </p> <code>filter_</code> <p>Example: <code>{'dsn': 'data11_hi*.express_express.*,data11_hi*physics_MinBiasOverlay*', 'account': 'tzero'}</code></p> <p> TYPE: <code>Dictionary of attributes by which the input data should be filtered</code> DEFAULT: <code>None</code> </p> <code>replication_rules</code> <p> TYPE: <code>Replication rules to be set. Dictionary with keys copies, rse_expression, weight, rse_expression</code> DEFAULT: <code>None</code> </p> <code>comments</code> <p> TYPE: <code>Comments for the subscription</code> DEFAULT: <code>None</code> </p> <code>lifetime</code> <p> TYPE: <code>Subscription's lifetime (days); False if subscription has no lifetime</code> DEFAULT: <code>None</code> </p> <code>retroactive</code> <p> TYPE: <code>Flag to know if the subscription should be applied on previous data</code> DEFAULT: <code>None</code> </p> <code>dry_run</code> <p> TYPE: <code>Just print the subscriptions actions without actually executing them (Useful if retroactive flag is set)</code> DEFAULT: <code>None</code> </p> <code>priority</code> <p> TYPE: <code>The priority of the subscription</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>NotFound</code> <p>If subscription is not found</p>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient.deactivate_subscription","title":"deactivate_subscription","text":"<pre><code>deactivate_subscription(name, account=None)\n</code></pre> <p>Mark a subscription as inactive</p> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>Name of the subscription</code> </p> <code>account</code> <p> TYPE: <code>Account identifier</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>NotFound</code> <p>If subscription is not found</p>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient.SubscriptionClient.list_subscription_rules","title":"list_subscription_rules","text":"<pre><code>list_subscription_rules(account, name)\n</code></pre> <p>List the associated rules of a subscription.</p> PARAMETER DESCRIPTION <code>account</code> <p>Account of the subscription.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>Name of the subscription.</p> <p> TYPE: <code>str</code> </p>"},{"location":"subscriptionclient.html#rucio.client.subscriptionclient-functions","title":"Functions","text":""},{"location":"touchclient.html","title":"Touchclient","text":""},{"location":"touchclient.html#rucio.client.touchclient-classes","title":"Classes","text":""},{"location":"touchclient.html#rucio.client.touchclient.TouchClient","title":"TouchClient","text":"<pre><code>TouchClient(\n    rucio_host=None,\n    auth_host=None,\n    account=None,\n    ca_cert=None,\n    auth_type=None,\n    creds=None,\n    timeout=600,\n    user_agent=\"rucio-clients\",\n    vo=None,\n    logger=LOG,\n)\n</code></pre> <p>Touch client class to send a trace that can be used to update accessed_at for file or dataset DIDs</p>"},{"location":"touchclient.html#rucio.client.touchclient.TouchClient-functions","title":"Functions","text":""},{"location":"touchclient.html#rucio.client.touchclient.TouchClient.touch","title":"touch","text":"<pre><code>touch(scope, name, rse=None)\n</code></pre> <p>Sends a touch trace for a given file or dataset.</p> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>The scope of the file/dataset to update.</code> </p> <code>name</code> <p> TYPE: <code>The name of file/dataset to update.</code> </p> <code>rse</code> <p> TYPE: <code>Optional parameter if a specific replica should be touched.</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>DataIdentifierNotFound</code> <p>If given DIDs does not exist.</p> <code>RSENotFound</code> <p>If rse is not None and given rse does not exist.</p> <code>UnsupportedDIDType</code> <p>If type of the given DID is not FILE or DATASET.</p> <code>RucioException</code> <p>If trace could not be sent successfully.</p>"},{"location":"touchclient.html#rucio.client.touchclient-functions","title":"Functions","text":""},{"location":"uploadclient.html","title":"Uploadclient","text":""},{"location":"uploadclient.html#rucio.client.uploadclient-classes","title":"Classes","text":""},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient","title":"UploadClient","text":"<pre><code>UploadClient(_client=None, logger=None, tracing=True)\n</code></pre> <p>Initialize the UploadClient with the necessary configuration to manage file uploads.</p> <p>This method is used to create a new UploadClient instance that can upload files. It allows the use of an existing Rucio Client, a custom logger, and tracing for debug information during the upload process.</p> PARAMETER DESCRIPTION <code>_client</code> <p>An existing Rucio <code>Client</code> instance to reuse. If not provided, a new one is created.</p> <p> TYPE: <code>Optional[Client]</code> DEFAULT: <code>None</code> </p> <code>logger</code> <p>A logger function. If not provided, the default Python logger is used.</p> <p> TYPE: <code>Optional[LoggerFunction]</code> DEFAULT: <code>None</code> </p> <code>tracing</code> <p>Indicates whether to enable tracing to capture upload activity details.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RAISES DESCRIPTION <code>InputValidationError</code> <p>If the client account is not found or is invalid, preventing upload setup.</p>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient-functions","title":"Functions","text":""},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient.upload","title":"upload","text":"<pre><code>upload(\n    items,\n    summary_file_path=None,\n    traces_copy_out=None,\n    ignore_availability=False,\n    activity=None,\n)\n</code></pre> <p>Uploads one or more files to an RSE (Rucio Storage Element) and optionally registers them.</p> <p>An overview of this method's performed actions:</p> <ol> <li> <p>Collects and validates file info from the passed <code>items</code> (directories may be     also included), ensuring valid paths exist on the local filesystem. If an RSE     expression is provided, a single RSE is picked at random from it.</p> </li> <li> <p>Checks the RSE's availability for writing (unless <code>ignore_availability</code> is True).</p> </li> <li> <p>Optionally registers each file in the Rucio Catalog, handling the DID creation,     dataset creation/attachment, and replication rules as needed.</p> </li> <li> <p>Uploads the files using the underlying protocol handlers and verifies checksums     if desired/possible. Partial or failed uploads raise exceptions.</p> </li> <li> <p>(Optional) Produces a JSON summary file at <code>summary_file_path</code>, listing the final     PFNs, checksums, and other info for all successfully uploaded files.</p> </li> </ol> PARAMETER DESCRIPTION <code>items</code> <p>A sequence of dictionaries, each describing a file to upload (or a directory to be scanned). For each item, the supported keys are:</p> <ul> <li> <p><code>path</code> (PathTypeAlias, required):     The local path to the file or directory. If this is a directory and     <code>recursive</code> is True, the directory (and its subdirectories) are traversed.</p> </li> <li> <p><code>rse</code> (str, required):     The target RSE or an RSE expression where the upload should be placed. If     an expression is provided (e.g., \"tier=1\"), one RSE from that expression     is chosen randomly.</p> </li> <li> <p><code>did_scope</code> (str, not required):     The Rucio scope in which to register the file DID. Defaults to <code>user.&lt;account&gt;</code>.</p> </li> <li> <p><code>did_name</code> (str, not required):     The logical filename in Rucio. Defaults to the local basename if not provided.</p> </li> <li> <p><code>lifetime</code> (int, not required):     The lifetime (in seconds) to apply when creating a new replication rule.     For file uploads without a dataset, a new rule with that lifetime is created     if the file DID does not already exist in Rucio. For a new dataset, the     dataset is created with a rule using this lifetime, but if the dataset     already exists and you specify a lifetime, an error is raised.</p> <p>Note: <code>lifetime</code> is not automatically applied to nested containers or datasets in recursive mode.</p> </li> <li> <p><code>impl</code> (str, not required):     Name of the protocol implementation to be used for uploading this item.     For example, <code>\"rucio.rse.protocols.gfal.Default\"</code>.</p> </li> <li> <p><code>pfn</code> (str, not required):     Allows you to explicitly set the Physical File Name (PFN) for the upload,     determining exactly where the file is placed on the storage. However, for     deterministic RSEs, specifying a PFN causes the client to skip registering     the file under the usual deterministic scheme. For non-deterministic RSEs,     you can still force the file to be registered in the Rucio catalog after     being uploaded, using <code>no_register=False</code> along with <code>register_after_upload=True</code>     (or by manually handling the registration later).</p> </li> <li> <p><code>force_scheme</code> (str, not required):     Enforces the use of a specific protocol scheme (e.g., davs, https) during     file uploads. If the selected protocol is not compatible, the upload will     stop and raise an error instead of falling back to any other scheme.</p> </li> <li> <p><code>transfer_timeout</code> (int, not required):     A maximum duration (in seconds) to wait for each individual file transfer     to complete. If the file transfer does not finish before this timeout     elapses, the operation will be aborted and retried one last time. When     transfer_timeout is None, no specific timeout is enforced, and the transfer     may continue until it completes or fails for another reason.</p> </li> <li> <p><code>guid</code> (str, not required):     If provided, Rucio will use this GUID. If not provided and the file is     \u201cpool.root\u201d with <code>no_register</code> unset, Rucio tries to extract the GUID via     <code>pool_extractFileIdentifier</code>, raising an error if that fails. Otherwise, a     random GUID will be generated.</p> </li> <li> <p><code>no_register</code> (bool, not required, default=False):     If set to True, the file is not registered in the Rucio Catalog, i.e., there     is no DID creation, no replica entry, and no rules. This is appropriate if     you plan to register the replica or create rules separately.</p> <p>Note: If <code>recursive</code>=True, the method still creates datasets and/or containers for the directories when needed.</p> </li> <li> <p><code>register_after_upload</code> (bool, not required, default=False):     If set to True, the file is uploaded first, and only then is the DID created     or updated in the Catalog. This can be useful when you want the actual data     on storage before finalizing the registration. By default (False), the file     is registered in Rucio before the physical upload if <code>no_register</code> is False.</p> </li> <li> <p><code>recursive</code> (bool, not required, default=False):     If set to <code>True</code>, the method treats the specified path as a directory and     (depending on the combination with other parameters) recursively traverses     its subdirectories, mapping them into container/dataset hierarchies. Single     top-level file paths are ignored, but individual files found in subdirectories     are processed. Empty directories or non-existent paths also produce a warning.     If <code>False</code>, then top-level file paths or the direct children-files of the     given top-level directory are only processed (subdirectories are ignored,     and no container structure is created).</p> </li> <li> <p><code>dataset_scope</code> / <code>dataset_name</code> (str, not required):     To register uploaded files into a dataset DID, you need to specify both     dataset_name and dataset_scope. With no_register=False, the client ensures     {dataset_scope}:{dataset_name} exists (creating it with a replication rule     if it doesn't), or simply attaching new files if it does. If the dataset     already exists and you specify a new lifetime, or if a checksum mismatch     is detected, registration fails. In non-recursive mode, only files in the     top-level directory are attached to the dataset and subdirectories are     skipped with a warning. In recursive mode, the client aims to create     containers for directories containing only subdirectories and datasets for     directories containing only files (raising an error if the top-level folder     mixes files and directories). If the top-level directory has subdirectories,     the user-supplied dataset_name is effectively ignored at that level (each     subdirectory becomes its own dataset or container); if there are no     subdirectories, the entire folder is registered as a single dataset.</p> </li> <li> <p><code>dataset_meta</code> (dict, not required):     Additional metadata (e.g., <code>{'project': 'myProject'}</code>) to attach to the     newly created dataset when: the dataset does not already exist, <code>recursive=False</code>,     <code>no_register=False</code> and both <code>dataset_scope</code> and <code>dataset_name</code> are provided.</p> <p>Note: If multiple files share the same <code>dataset_scope</code> and <code>dataset_name</code>, then if a dataset is created, it considers only the first item\u2019s dataset_meta.</p> </li> </ul> <p> TYPE: <code>Iterable[FileToUploadDict]</code> </p> <code>summary_file_path</code> <p>If specified, a JSON file is created with a summary of each successfully uploaded file, including checksum, PFN, scope, and name entries.</p> <p> TYPE: <code>Optional[Union[str, PathLike[str]]]</code> DEFAULT: <code>None</code> </p> <code>traces_copy_out</code> <p>A list reference for collecting the trace dictionaries that Rucio generates while iterating over each file. A new trace dictionary is appended to this list for each file considered (even those ultimately skipped or already on the RSE).</p> <p> TYPE: <code>Optional[list[TraceBaseDict]]</code> DEFAULT: <code>None</code> </p> <code>ignore_availability</code> <p>If set to True, the RSE's \"write availability\" is not enforced. By default, this is False, and an RSE marked as unavailable for writing will raise an error.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>activity</code> <p>If you are uploading files without a parent dataset, this string sets the \u201cactivity\u201d on the replication rule that Rucio creates for each file (e.g., \"Analysis\"), which can affect RSE queue priorities.</p> <p>Note: If your files are uploaded into a dataset, the dataset\u2019s replication rule does not use this activity parameter.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>int</code> <p>Status code (<code>0</code> if all files were uploaded successfully).</p> RAISES DESCRIPTION <code>NoFilesUploaded</code> <p>Raised if none of the requested files could be uploaded.</p> <code>NotAllFilesUploaded</code> <p>Raised if some files were successfully uploaded, but others failed.</p> <code>RSEWriteBlocked</code> <p>Raised if <code>ignore_availability=False</code> but the chosen RSE does not allow writing.</p> <code>InputValidationError</code> <p>Raised if mandatory fields are missing, if conflicting DIDs are found, or if no valid files remain after input parsing.</p> <p>Examples:</p> Example <p>Upload a single local file to the CERN-PROD RSE and write a JSON summary to <code>upload_summary.json</code>:</p> <pre><code>from rucio.client.uploadclient import UploadClient\nupload_client = UploadClient()\nitems = [\n    {\"path\": \"/data/file1.txt\",\n     \"rse\": \"CERN-PROD\",            # target RSE\n     \"did_scope\": \"user.alice\",     # optional; defaults to user.&lt;account&gt;\n     \"did_name\": \"file1.txt\"}       # optional; defaults to basename\n]\nupload_client.upload(items, summary_file_path=\"upload_summary.json\")\n</code></pre> <p>Recursively upload every file found under <code>/data/dataset</code> into a new dataset <code>user.alice:mydataset</code> on a random RSE that matches the expression <code>tier=1</code>; collect per-file trace dictionaries for later inspection:</p> <pre><code>traces: list[TraceBaseDict] = []\ndir_item = {\n    \"path\": \"/data/dataset\",\n    \"rse\": \"tier=1\",                # RSE expression; one will be chosen\n    \"recursive\": True,\n    \"dataset_scope\": \"user.alice\",\n    \"dataset_name\": \"mydataset\",\n    \"dataset_meta\": {\"project\": \"demo\"},\n}\nupload_client.upload([dir_item], traces_copy_out=traces)\n</code></pre>"},{"location":"uploadclient.html#rucio.client.uploadclient.UploadClient.preferred_impl","title":"preferred_impl","text":"<pre><code>preferred_impl(rse_settings, domain)\n</code></pre> <p>Select a suitable protocol implementation for read, write, and delete operations on the given RSE and domain.</p> <p>This method checks the local client configuration (under the <code>[upload] preferred_impl</code> setting) and compares it against the list of protocols declared in <code>rse_settings</code>. It attempts to find a protocol that supports the required I/O operations (read, write, delete) in the specified domain. If multiple preferred protocols are listed in the config, it iterates in order and returns the first viable match.</p> PARAMETER DESCRIPTION <code>rse_settings</code> <p>A dictionary describing RSE details, including available protocols and their domains.</p> <p> TYPE: <code>RSESettingsDict</code> </p> <code>domain</code> <p>The network domain (e.g., 'lan' or 'wan') in which the protocol must support all operations.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Optional[str]</code> <p>The name of a protocol implementation that can handle read/write/delete for the specified domain, or None if no suitable protocol was found.</p>"},{"location":"uploadclient.html#rucio.client.uploadclient-functions","title":"Functions","text":""}]}