{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"bittorrent.html","title":"Bittorrent","text":""},{"location":"bittorrent.html#rucio.rse.protocols.bittorrent-classes","title":"Classes","text":""},{"location":"bittorrent.html#rucio.rse.protocols.bittorrent-functions","title":"Functions","text":""},{"location":"cache.html","title":"Cache","text":""},{"location":"cache.html#rucio.rse.protocols.cache-classes","title":"Classes","text":""},{"location":"cache.html#rucio.rse.protocols.cache.Default","title":"Default","text":"<pre><code>Default(protocol_attr, rse_settings, logger=None)\n</code></pre> <p>Implementing access to RSEs using the local filesystem.</p> <p>Initializes the object with information about the referred RSE.</p> PARAMETER DESCRIPTION <code>props</code> <p>Properties derived from the RSE Repository</p> <p> </p>"},{"location":"cache.html#rucio.rse.protocols.cache.Default-functions","title":"Functions","text":""},{"location":"cache.html#rucio.rse.protocols.cache.Default._get_path","title":"_get_path","text":"<pre><code>_get_path(scope, name)\n</code></pre> <p>Transforms the physical file name into the local URI in the referred RSE. Suitable for sites implementoing the RUCIO naming convention.</p> PARAMETER DESCRIPTION <code>name</code> <p>filename</p> <p> </p> <code>scope</code> <p>scope</p> <p> </p> RETURNS DESCRIPTION <p>RSE specific URI of the physical file</p>"},{"location":"cache.html#rucio.rse.protocols.cache.Default.path2pfn","title":"path2pfn","text":"<pre><code>path2pfn(path)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"cache.html#rucio.rse.protocols.cache.Default.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Establishes the actual connection to the referred RSE.</p> PARAMETER DESCRIPTION <code>credentials</code> <p>Provide all necessary information to establish a connection to the referred storage system. Some is loaded from the repository inside the RSE class and some must be provided specific for the SFTP protocol like username, password, private_key, private_key_pass, port. For details about possible additional parameters and details about their usage see the pysftp.Connection() documentation. NOTE: the host parametrer is overwritten with the value provided by the repository</p> <p> </p>"},{"location":"cache.html#rucio.rse.protocols.cache.Default.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Closes the connection to RSE.</p>"},{"location":"cache.html#rucio.rse.protocols.cache.Default.get","title":"get","text":"<pre><code>get(pfn, dest, transfer_timeout=None)\n</code></pre> <p>Provides access to files stored inside connected the RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name of requested file</p> <p> </p> <code>dest</code> <p>Name and path of the files when stored at the client</p> <p> </p>"},{"location":"cache.html#rucio.rse.protocols.cache.Default.put","title":"put","text":"<pre><code>put(source, target, source_dir=None, transfer_timeout=None)\n</code></pre> <p>Allows to store files inside the referred RSE.</p> PARAMETER DESCRIPTION <code>source</code> <p>Physical file name</p> <p> </p> <code>target</code> <p>Name of the file on the storage system e.g. with prefixed scope</p> <p> </p>"},{"location":"cache.html#rucio.rse.protocols.cache.Default.delete","title":"delete","text":"<pre><code>delete(pfn)\n</code></pre> <p>Deletes a file from the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name</p> <p> </p>"},{"location":"cache.html#rucio.rse.protocols.cache.Default.rename","title":"rename","text":"<pre><code>rename(pfn, new_pfn)\n</code></pre> <p>Allows to rename a file stored inside the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Current physical file name</p> <p> </p>"},{"location":"dummy.html","title":"Dummy","text":""},{"location":"dummy.html#rucio.rse.protocols.dummy-classes","title":"Classes","text":""},{"location":"dummy.html#rucio.rse.protocols.dummy.Default","title":"Default","text":"<pre><code>Default(protocol_attr, rse_settings, logger=None)\n</code></pre> <p>Implementing access to RSEs using the local filesystem.</p> <p>Initializes the object with information about the referred RSE.</p> PARAMETER DESCRIPTION <code>props</code> <p>Properties derived from the RSE Repository</p> <p> </p>"},{"location":"dummy.html#rucio.rse.protocols.dummy.Default-functions","title":"Functions","text":""},{"location":"dummy.html#rucio.rse.protocols.dummy.Default.path2pfn","title":"path2pfn","text":"<pre><code>path2pfn(path)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"dummy.html#rucio.rse.protocols.dummy.Default.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Establishes the actual connection to the referred RSE.</p> PARAMETER DESCRIPTION <code>credentials</code> <p>Provide all necessary information to establish a connection to the referred storage system. Some is loaded from the repository inside the RSE class and some must be provided specific for the SFTP protocol like username, password, private_key, private_key_pass, port. For details about possible additional parameters and details about their usage see the pysftp.Connection() documentation. NOTE: the host parametrer is overwritten with the value provided by the repository</p> <p> </p>"},{"location":"dummy.html#rucio.rse.protocols.dummy.Default.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Closes the connection to RSE.</p>"},{"location":"dummy.html#rucio.rse.protocols.dummy.Default.get","title":"get","text":"<pre><code>get(pfn, dest, transfer_timeout=None)\n</code></pre> <p>Provides access to files stored inside connected the RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name of requested file</p> <p> </p> <code>dest</code> <p>Name and path of the files when stored at the client</p> <p> </p>"},{"location":"dummy.html#rucio.rse.protocols.dummy.Default.put","title":"put","text":"<pre><code>put(source, target, source_dir=None, transfer_timeout=None)\n</code></pre> <p>Allows to store files inside the referred RSE.</p> PARAMETER DESCRIPTION <code>source</code> <p>Physical file name</p> <p> </p> <code>target</code> <p>Name of the file on the storage system e.g. with prefixed scope</p> <p> </p>"},{"location":"dummy.html#rucio.rse.protocols.dummy.Default.delete","title":"delete","text":"<pre><code>delete(pfn)\n</code></pre> <p>Deletes a file from the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name</p> <p> </p>"},{"location":"dummy.html#rucio.rse.protocols.dummy.Default.rename","title":"rename","text":"<pre><code>rename(pfn, new_pfn)\n</code></pre> <p>Allows to rename a file stored inside the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Current physical file name</p> <p> </p>"},{"location":"gfal.html","title":"Gfal","text":""},{"location":"gfal.html#rucio.rse.protocols.gfal-classes","title":"Classes","text":""},{"location":"gfal.html#rucio.rse.protocols.gfal.Default","title":"Default","text":"<pre><code>Default(protocol_attr, rse_settings, logger=logging.log)\n</code></pre> <p>Implementing access to RSEs using the srm protocol.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default-functions","title":"Functions","text":""},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.lfns2pfns","title":"lfns2pfns","text":"<pre><code>lfns2pfns(lfns)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.parse_pfns","title":"parse_pfns","text":"<pre><code>parse_pfns(pfns)\n</code></pre> <p>Splits the given PFN into the parts known by the protocol. During parsing the PFN is also checked for validity on the given RSE with the given protocol.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>a fully qualified PFN</p> <p> </p> RETURNS DESCRIPTION <p>a dict containing all known parts of the PFN for the protocol e.g. scheme, path, filename</p> RAISES DESCRIPTION <code>RSEFileNameNotSupported</code> <p>if the provided PFN doesn't match with the protocol settings</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.path2pfn","title":"path2pfn","text":"<pre><code>path2pfn(path)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Establishes the actual connection to the referred RSE. If we decide to use gfal, init should be done here.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.get","title":"get","text":"<pre><code>get(path, dest, transfer_timeout=None)\n</code></pre> <p>Provides access to files stored inside connected the RSE.</p> PARAMETER DESCRIPTION <code>path</code> <p>Physical file name of requested file</p> <p> </p> <code>dest</code> <p>Name and path of the files when stored at the client</p> <p> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <p> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.put","title":"put","text":"<pre><code>put(source, target, source_dir, transfer_timeout=None)\n</code></pre> <p>Allows to store files inside the referred RSE.</p> PARAMETER DESCRIPTION <code>source</code> <p>path to the source file on the client file system</p> <p> </p> <code>target</code> <p>path to the destination file on the storage</p> <p> </p> <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> <p> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <p> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.delete","title":"delete","text":"<pre><code>delete(path)\n</code></pre> <p>Deletes a file from the connected RSE.</p> PARAMETER DESCRIPTION <code>path</code> <p>path to the to be deleted file</p> <p> </p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.rename","title":"rename","text":"<pre><code>rename(path, new_path)\n</code></pre> <p>Allows to rename a file stored inside the connected RSE.</p> PARAMETER DESCRIPTION <code>path</code> <p>path to the current file on the storage</p> <p> </p> <code>new_path</code> <p>path to the new file on the storage</p> <p> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.exists","title":"exists","text":"<pre><code>exists(path)\n</code></pre> <p>Checks if the requested file is known by the referred RSE.</p> PARAMETER DESCRIPTION <code>path</code> <p>Physical file name</p> <p> </p> RETURNS DESCRIPTION <p>True if the file exists, False if it doesn't</p> RAISES DESCRIPTION <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Closes the connection to RSE.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.stat","title":"stat","text":"<pre><code>stat(path)\n</code></pre> <p>Returns the stats of a file.</p> PARAMETER DESCRIPTION <code>path</code> <p>path to file</p> <p> </p> RETURNS DESCRIPTION <p>a dict with two keys, filesize and an element of GLOBALLY_SUPPORTED_CHECKSUMS.</p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.__gfal2_cancel","title":"__gfal2_cancel","text":"<pre><code>__gfal2_cancel()\n</code></pre> <p>Cancel all gfal operations in progress.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.__gfal2_copy","title":"__gfal2_copy","text":"<pre><code>__gfal2_copy(\n    src,\n    dest,\n    src_spacetoken=None,\n    dest_spacetoken=None,\n    transfer_timeout=None,\n)\n</code></pre> <p>Uses gfal2 to copy file from src to dest.</p> PARAMETER DESCRIPTION <code>src</code> <p>Physical source file name</p> <p> </p> <code>src_spacetoken</code> <p>The source file's space token</p> <p> DEFAULT: <code>None</code> </p> <code>dest</code> <p>Physical destination file name</p> <p> </p> <code>dest_spacetoken</code> <p>The destination file's space token</p> <p> DEFAULT: <code>None</code> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <p> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <p>0 if copied successfully, other than 0 if failed</p> RAISES DESCRIPTION <code>SourceNotFound</code> <p>if source file cannot be found.</p> <code>RucioException</code> <p>if it failed to copy the file.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.__gfal2_rm","title":"__gfal2_rm","text":"<pre><code>__gfal2_rm(paths)\n</code></pre> <p>Uses gfal2 to remove the file.</p> PARAMETER DESCRIPTION <code>path</code> <p>Physical file name</p> <p> </p> RETURNS DESCRIPTION <p>0 if removed successfully, other than 0 if failed</p> RAISES DESCRIPTION <code>SourceNotFound</code> <p>if the source file was not found.</p> <code>RucioException</code> <p>if it failed to remove the file.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.__gfal2_exist","title":"__gfal2_exist","text":"<pre><code>__gfal2_exist(path)\n</code></pre> <p>Uses gfal2 to check whether the file exists.</p> PARAMETER DESCRIPTION <code>path</code> <p>Physical file name</p> <p> </p> RETURNS DESCRIPTION <p>0 if it exists, -1 if it doesn't</p> RAISES DESCRIPTION <code>RucioException</code> <p>if the error is not source not found.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.__gfal2_rename","title":"__gfal2_rename","text":"<pre><code>__gfal2_rename(path, new_path)\n</code></pre> <p>Uses gfal2 to rename a file.</p> PARAMETER DESCRIPTION <code>path</code> <p>path to the current file on the storage</p> <p> </p> <code>new_path</code> <p>path to the new file on the storage</p> <p> </p> RETURNS DESCRIPTION <p>0 if it exists, -1 if it doesn't</p> RAISES DESCRIPTION <code>RucioException</code> <p>if failed.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.get_space_usage","title":"get_space_usage","text":"<pre><code>get_space_usage()\n</code></pre> <p>Get RSE space usage information.</p> RETURNS DESCRIPTION <p>a list with dict containing 'totalsize' and 'unusedsize'</p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.__gfal2_get_space_usage","title":"__gfal2_get_space_usage","text":"<pre><code>__gfal2_get_space_usage(path, space_token)\n</code></pre> <p>Uses gfal2 to get space usage info with space token.</p> PARAMETER DESCRIPTION <code>path</code> <p>the endpoint path</p> <p> </p> <code>space_token</code> <p>a string space token. E.g. \"ATLASDATADISK\"</p> <p> </p> RETURNS DESCRIPTION <p>a list with dict containing 'totalsize' and 'unusedsize'</p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if failed.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.NoRename","title":"NoRename","text":"<pre><code>NoRename(protocol_attr, rse_settings, logger=logging.log)\n</code></pre> <p>Implementing access to RSEs using the srm protocol without renaming files on upload/download. Necessary for some storage endpoints.</p> <p>Initializes the object with information about the referred RSE.</p> PARAMETER DESCRIPTION <code>protocol_attr</code> <p>Properties of the requested protocol.</p> <p> </p> <code>rse_settting</code> <p>The RSE settings.</p> <p> </p> <code>logger</code> <p>Optional decorated logger that can be passed from the calling daemons or servers.</p> <p> DEFAULT: <code>log</code> </p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.NoRename-functions","title":"Functions","text":""},{"location":"gfal.html#rucio.rse.protocols.gfal.NoRename.rename","title":"rename","text":"<pre><code>rename(pfn, new_pfn)\n</code></pre> <p>Allows to rename a file stored inside the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Current physical file name</p> <p> </p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.CLI","title":"CLI","text":"<pre><code>CLI(protocol_attr, rse_settings, logger=logging.log)\n</code></pre> <p>Implementing access to RSEs using the srm protocol through CLI with 'gfal' commands.</p> <p>Initializes the object with information about the referred RSE.</p> PARAMETER DESCRIPTION <code>props</code> <p>Properties derived from the RSE Repository</p> <p> </p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.CLI-functions","title":"Functions","text":""},{"location":"gfal.html#rucio.rse.protocols.gfal.CLI.get","title":"get","text":"<pre><code>get(path, dest, transfer_timeout=None)\n</code></pre> <p>Provides access to files stored inside connected the RSE.</p> PARAMETER DESCRIPTION <code>path</code> <p>Physical file name of requested file</p> <p> </p> <code>dest</code> <p>Name and path of the files when stored at the client</p> <p> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <p> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>RucioException</code> <p>Passthrough of gfal-copy error message.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.CLI.put","title":"put","text":"<pre><code>put(source, target, source_dir, transfer_timeout=None)\n</code></pre> <p>Allows to store files inside the referred RSE.</p> PARAMETER DESCRIPTION <code>source</code> <p>path to the source file on the client file system</p> <p> </p> <code>target</code> <p>path to the destination file on the storage</p> <p> </p> <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> <p> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <p> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>RucioException</code> <p>Passthrough of gfal-copy error message.</p>"},{"location":"globus.html","title":"Globus","text":""},{"location":"globus.html#rucio.rse.protocols.globus-classes","title":"Classes","text":""},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol","title":"GlobusRSEProtocol","text":"<pre><code>GlobusRSEProtocol(\n    protocol_attr, rse_settings, logger=logging.log\n)\n</code></pre> <p>Implementing access to RSEs using the Globus service as a Rucio RSE protocol.</p> <p>Initializes the object with information about the referred RSE.</p> PARAMETER DESCRIPTION <code>props</code> <p>Properties of the requested protocol</p> <p> </p>"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol-functions","title":"Functions","text":""},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol.lfns2pfns","title":"lfns2pfns","text":"<pre><code>lfns2pfns(lfns)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol._get_path","title":"_get_path","text":"<pre><code>_get_path(scope, name)\n</code></pre> <p>Transforms the logical file name into a PFN. Suitable for sites implementing the RUCIO naming convention. This implementation is only invoked if the RSE is deterministic.</p> PARAMETER DESCRIPTION <code>scope</code> <p>scope</p> <p> </p> <code>name</code> <p>filename</p> <p> </p> RETURNS DESCRIPTION <p>RSE specific URI of the physical file</p>"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol.parse_pfns","title":"parse_pfns","text":"<pre><code>parse_pfns(pfns)\n</code></pre> <p>Splits the given PFN into the parts known by the protocol. It is also checked if the provided protocol supports the given PFNs.</p> PARAMETER DESCRIPTION <code>pfns</code> <p>a list of a fully qualified PFNs</p> <p> </p> RETURNS DESCRIPTION <p>dic with PFN as key and a dict with path and name as value</p> RAISES DESCRIPTION <code>RSEFileNameNotSupported</code> <p>if the provided PFN doesn't match with the protocol settings</p>"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol.exists","title":"exists","text":"<pre><code>exists(path)\n</code></pre> <p>Checks if the requested file is known by the referred RSE.</p> PARAMETER DESCRIPTION <code>path</code> <p>Physical file name</p> <p> </p> RETURNS DESCRIPTION <p>True if the file exists, False if it doesn't</p> RAISES DESCRIPTION <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol.list","title":"list","text":"<pre><code>list(path)\n</code></pre> <p>Checks if the requested path is known by the referred RSE and returns a list of items</p> PARAMETER DESCRIPTION <code>path</code> <p>Physical file name</p> <p> </p> RETURNS DESCRIPTION <p>List of items</p>"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol.delete","title":"delete","text":"<pre><code>delete(path)\n</code></pre> <p>Deletes a file from the connected RSE.</p> PARAMETER DESCRIPTION <code>path</code> <p>path to the to be deleted file</p> <p> </p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol.bulk_delete","title":"bulk_delete","text":"<pre><code>bulk_delete(pfns)\n</code></pre> <p>Submits an async task to bulk delete files on globus endpoint.</p> PARAMETER DESCRIPTION <code>pfns</code> <p>list of pfns to delete</p> <p> </p> RAISES DESCRIPTION <code>TransferAPIError</code> <p>if unexpected response from the service.</p>"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Establishes the actual connection to the referred RSE.</p> <p>reaper2 daemon requires implementation of protocol.connect</p>"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Closes the connection to RSE.</p> <p>reaper2 daemon requires implementation of protocol.close</p>"},{"location":"globus.html#rucio.rse.protocols.globus-functions","title":"Functions","text":""},{"location":"http_cache.html","title":"Http cache","text":""},{"location":"http_cache.html#rucio.rse.protocols.http_cache-classes","title":"Classes","text":""},{"location":"http_cache.html#rucio.rse.protocols.http_cache.Default","title":"Default","text":"<pre><code>Default(protocol_attr, rse_settings, logger=None)\n</code></pre> <p>Implementing access to RSEs using the ngarc protocol.</p> <p>Initializes the object with information about the referred RSE.</p> PARAMETER DESCRIPTION <code>props</code> <p>Properties derived from the RSE Repository</p> <p> </p>"},{"location":"http_cache.html#rucio.rse.protocols.http_cache.Default-functions","title":"Functions","text":""},{"location":"http_cache.html#rucio.rse.protocols.http_cache.Default._get_path","title":"_get_path","text":"<pre><code>_get_path(scope, name)\n</code></pre> <p>Transforms the physical file name into the local URI in the referred RSE. Suitable for sites implementoing the RUCIO naming convention.</p> PARAMETER DESCRIPTION <code>name</code> <p>filename</p> <p> </p> <code>scope</code> <p>scope</p> <p> </p> RETURNS DESCRIPTION <p>RSE specific URI of the physical file</p>"},{"location":"http_cache.html#rucio.rse.protocols.http_cache.Default.path2pfn","title":"path2pfn","text":"<pre><code>path2pfn(path)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"http_cache.html#rucio.rse.protocols.http_cache.Default.put","title":"put","text":"<pre><code>put(source, target, source_dir=None, transfer_timeout=None)\n</code></pre> <p>Allows to store files inside the referred RSE.</p> PARAMETER DESCRIPTION <code>source</code> <p>Physical file name</p> <p> </p> <code>target</code> <p>Name of the file on the storage system e.g. with prefixed scope</p> <p> </p>"},{"location":"http_cache.html#rucio.rse.protocols.http_cache.Default.delete","title":"delete","text":"<pre><code>delete(pfn)\n</code></pre> <p>Deletes a file from the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name</p> <p> </p>"},{"location":"http_cache.html#rucio.rse.protocols.http_cache.Default.rename","title":"rename","text":"<pre><code>rename(pfn, new_pfn)\n</code></pre> <p>Allows to rename a file stored inside the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Current physical file name</p> <p> </p>"},{"location":"mock.html","title":"Mock","text":""},{"location":"mock.html#rucio.rse.protocols.mock-classes","title":"Classes","text":""},{"location":"mock.html#rucio.rse.protocols.mock.Default","title":"Default","text":"<pre><code>Default(protocol_attr, rse_settings, logger=None)\n</code></pre> <p>Implementing access to RSEs using the local filesystem.</p> <p>Initializes the object with information about the referred RSE.</p> PARAMETER DESCRIPTION <code>props</code> <p>Properties derived from the RSE Repository</p> <p> </p>"},{"location":"mock.html#rucio.rse.protocols.mock.Default-functions","title":"Functions","text":""},{"location":"mock.html#rucio.rse.protocols.mock.Default.path2pfn","title":"path2pfn","text":"<pre><code>path2pfn(path)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"mock.html#rucio.rse.protocols.mock.Default.exists","title":"exists","text":"<pre><code>exists(pfn)\n</code></pre> <p>Checks if the requested file is known by the referred RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name</p> <p> </p> RETURNS DESCRIPTION <p>True if the file exists, False if it doesn't</p>"},{"location":"mock.html#rucio.rse.protocols.mock.Default.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Establishes the actual connection to the referred RSE.</p> PARAMETER DESCRIPTION <code>credentials</code> <p>Provide all necessary information to establish a connection to the referred storage system. Some is loaded from the repository inside the RSE class and some must be provided specific for the SFTP protocol like username, password, private_key, private_key_pass, port. For details about possible additional parameters and details about their usage see the pysftp.Connection() documentation. NOTE: the host parametrer is overwritten with the value provided by the repository</p> <p> </p>"},{"location":"mock.html#rucio.rse.protocols.mock.Default.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Closes the connection to RSE.</p>"},{"location":"mock.html#rucio.rse.protocols.mock.Default.get","title":"get","text":"<pre><code>get(pfn, dest, transfer_timeout=None)\n</code></pre> <p>Provides access to files stored inside connected the RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name of requested file</p> <p> </p> <code>dest</code> <p>Name and path of the files when stored at the client</p> <p> </p>"},{"location":"mock.html#rucio.rse.protocols.mock.Default.put","title":"put","text":"<pre><code>put(source, target, source_dir=None, transfer_timeout=None)\n</code></pre> <p>Allows to store files inside the referred RSE.</p> PARAMETER DESCRIPTION <code>source</code> <p>Physical file name</p> <p> </p> <code>target</code> <p>Name of the file on the storage system e.g. with prefixed scope</p> <p> </p>"},{"location":"mock.html#rucio.rse.protocols.mock.Default.delete","title":"delete","text":"<pre><code>delete(pfn)\n</code></pre> <p>Deletes a file from the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name</p> <p> </p>"},{"location":"mock.html#rucio.rse.protocols.mock.Default.bulk_delete","title":"bulk_delete","text":"<pre><code>bulk_delete(pfns)\n</code></pre> <p>Submits an async task to bulk delete files.</p> PARAMETER DESCRIPTION <code>pfns</code> <p>list of pfns to delete</p> <p> </p> RAISES DESCRIPTION <code>TransferAPIError</code> <p>if unexpected response from the service.</p>"},{"location":"mock.html#rucio.rse.protocols.mock.Default.rename","title":"rename","text":"<pre><code>rename(pfn, new_pfn)\n</code></pre> <p>Allows to rename a file stored inside the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Current physical file name</p> <p> </p>"},{"location":"ngarc.html","title":"Ngarc","text":""},{"location":"ngarc.html#rucio.rse.protocols.ngarc-classes","title":"Classes","text":""},{"location":"ngarc.html#rucio.rse.protocols.ngarc.DataPoint","title":"DataPoint","text":"<pre><code>DataPoint(u, uc)\n</code></pre> <p>Wrapper around arc.datapoint_from_url() which does not clean up DataPoints when python objects are destroyed, leading to connection leaking when used with gridftp. This class should be used instead of arc.datapoint_from_url(). It can be called like dp = DataPoint('gsiftp://...', uc); dp.h.Stat() where uc is an arc.UserConfig object.</p>"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default","title":"Default","text":"<pre><code>Default(protocol_attr, rse_settings, logger=None)\n</code></pre> <p>Implementing access to RSEs using ARC client.</p> <p>Set up UserConfig object.</p>"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default-functions","title":"Functions","text":""},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default.path2pfn","title":"path2pfn","text":"<pre><code>path2pfn(path)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default.exists","title":"exists","text":"<pre><code>exists(pfn)\n</code></pre> <p>Checks if the requested file is known by the referred RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name</p> <p> </p> RETURNS DESCRIPTION <p>True if the file exists, False if it doesn't</p>"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Establishes the actual connection to the referred RSE.</p>"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Closes the connection to RSE.</p>"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default.get","title":"get","text":"<pre><code>get(pfn, dest, transfer_timeout=None)\n</code></pre> <p>Provides access to files stored inside connected the RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name of requested file</p> <p> </p> <code>dest</code> <p>Name and path of the files when stored at the client</p> <p> </p>"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default.put","title":"put","text":"<pre><code>put(source, target, source_dir=None, transfer_timeout=None)\n</code></pre> <p>Allows to store files inside the referred RSE.</p> PARAMETER DESCRIPTION <code>source</code> <p>Physical file name</p> <p> </p> <code>target</code> <p>Name of the file on the storage system e.g. with prefixed scope</p> <p> </p>"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default.delete","title":"delete","text":"<pre><code>delete(pfn)\n</code></pre> <p>Deletes a file from the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name</p> <p> </p>"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default.rename","title":"rename","text":"<pre><code>rename(pfn, new_pfn)\n</code></pre> <p>Allows to rename a file stored inside the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Current physical file name</p> <p> </p>"},{"location":"posix.html","title":"Posix","text":""},{"location":"posix.html#rucio.rse.protocols.posix-classes","title":"Classes","text":""},{"location":"posix.html#rucio.rse.protocols.posix.Default","title":"Default","text":"<pre><code>Default(protocol_attr, rse_settings, logger=logging.log)\n</code></pre> <p>Implementing access to RSEs using the local filesystem.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default-functions","title":"Functions","text":""},{"location":"posix.html#rucio.rse.protocols.posix.Default.exists","title":"exists","text":"<pre><code>exists(pfn)\n</code></pre> <p>Checks if the requested file is known by the referred RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name</p> <p> </p> RETURNS DESCRIPTION <p>True if the file exists, False if it doesn't</p> RAISES DESCRIPTION <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Establishes the actual connection to the referred RSE.</p> PARAMETER DESCRIPTION <code>credentials</code> <p>needed to establish a connection with the storage.</p> <p> </p> RAISES DESCRIPTION <code>RSEAccessDenied</code> <p>if no connection could be established.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Closes the connection to RSE.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default.get","title":"get","text":"<pre><code>get(pfn, dest, transfer_timeout=None)\n</code></pre> <p>Provides access to files stored inside connected the RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name of requested file</p> <p> </p> <code>dest</code> <p>Name and path of the files when stored at the client</p> <p> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default.put","title":"put","text":"<pre><code>put(source, target, source_dir=None, transfer_timeout=None)\n</code></pre> <p>Allows to store files inside the referred RSE.</p> PARAMETER DESCRIPTION <code>source</code> <p>path to the source file on the client file system</p> <p> </p> <code>target</code> <p>path to the destination file on the storage</p> <p> </p> <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> <p> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default.delete","title":"delete","text":"<pre><code>delete(pfn)\n</code></pre> <p>Deletes a file from the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>pfn to the to be deleted file</p> <p> </p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default.rename","title":"rename","text":"<pre><code>rename(pfn, new_pfn)\n</code></pre> <p>Allows to rename a file stored inside the connected RSE.</p> PARAMETER DESCRIPTION <code>path</code> <p>path to the current file on the storage</p> <p> </p> <code>new_path</code> <p>path to the new file on the storage</p> <p> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default.lfns2pfns","title":"lfns2pfns","text":"<pre><code>lfns2pfns(lfns)\n</code></pre> <p>Returns fully qualified PFNs for the file referred by each lfn in the lfns list.</p> PARAMETER DESCRIPTION <code>lfns</code> <p>List of lfns. If lfn['path'] is present it is used as the path to the file, otherwise the path is constructed deterministically.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFNs.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default.stat","title":"stat","text":"<pre><code>stat(pfn)\n</code></pre> <p>Determines the file size in bytes and checksum (adler32) of the provided file.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>The PFN the file.</p> <p> </p> RETURNS DESCRIPTION <p>a dict containing the keys filesize and adler32.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Symlink","title":"Symlink","text":"<pre><code>Symlink(protocol_attr, rse_settings, logger=logging.log)\n</code></pre> <p>Implementing access to RSEs using the local filesystem, creating a symlink on a get</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Symlink-functions","title":"Functions","text":""},{"location":"posix.html#rucio.rse.protocols.posix.Symlink.get","title":"get","text":"<pre><code>get(pfn, dest, transfer_timeout=None)\n</code></pre> <p>Provides access to files stored inside connected the RSE. A download/get will create a symlink on the local file system pointing to the underlying file. Other operations act directly on the remote file.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name of requested file</p> <p> </p> <code>dest</code> <p>Name and path of the files when stored at the client</p> <p> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"posix.html#rucio.rse.protocols.posix-functions","title":"Functions","text":""},{"location":"protocol.html","title":"Protocol","text":"<p>This module defines the base class for implementing a transfer protocol, along with some of the default methods for LFN2PFN translations.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol-classes","title":"Classes","text":""},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol","title":"RSEProtocol","text":"<pre><code>RSEProtocol(\n    protocol_attr, rse_settings, logger=logging.log\n)\n</code></pre> <p>This class is virtual and acts as a base to inherit new protocols from. It further provides some common functionality which applies for the majority of the protocols.</p> <p>Initializes the object with information about the referred RSE.</p> PARAMETER DESCRIPTION <code>protocol_attr</code> <p>Properties of the requested protocol.</p> <p> </p> <code>rse_settting</code> <p>The RSE settings.</p> <p> </p> <code>logger</code> <p>Optional decorated logger that can be passed from the calling daemons or servers.</p> <p> DEFAULT: <code>log</code> </p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol-functions","title":"Functions","text":""},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.lfns2pfns","title":"lfns2pfns","text":"<pre><code>lfns2pfns(lfns)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.__lfns2pfns_client","title":"__lfns2pfns_client","text":"<pre><code>__lfns2pfns_client(lfns)\n</code></pre> <p>Provides the path of a replica for non-deterministic sites. Will be assigned to get path by the init method if necessary.</p> PARAMETER DESCRIPTION <code>scope</code> <p>list of DIDs</p> <p> </p> RETURNS DESCRIPTION <p>dict with scope:name as keys and PFN as value (in case of errors the Rucio exception si assigned to the key)</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol._get_path","title":"_get_path","text":"<pre><code>_get_path(scope, name)\n</code></pre> <p>Transforms the logical file name into a PFN. Suitable for sites implementing the RUCIO naming convention. This implementation is only invoked if the RSE is deterministic.</p> PARAMETER DESCRIPTION <code>scope</code> <p>scope</p> <p> </p> <code>name</code> <p>filename</p> <p> </p> RETURNS DESCRIPTION <p>RSE specific URI of the physical file</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol._get_path_nondeterministic_server","title":"_get_path_nondeterministic_server","text":"<pre><code>_get_path_nondeterministic_server(scope, name)\n</code></pre> <p>Provides the path of a replica for non-deterministic sites. Will be assigned to get path by the init method if necessary.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.parse_pfns","title":"parse_pfns","text":"<pre><code>parse_pfns(pfns)\n</code></pre> <p>Splits the given PFN into the parts known by the protocol. It is also checked if the provided protocol supports the given PFNs.</p> PARAMETER DESCRIPTION <code>pfns</code> <p>a list of a fully qualified PFNs</p> <p> </p> RETURNS DESCRIPTION <p>dic with PFN as key and a dict with path and name as value</p> RAISES DESCRIPTION <code>RSEFileNameNotSupported</code> <p>if the provided PFN doesn't match with the protocol settings</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.exists","title":"exists","text":"<pre><code>exists(path)\n</code></pre> <p>Checks if the requested file is known by the referred RSE.</p> PARAMETER DESCRIPTION <code>path</code> <p>Physical file name</p> <p> </p> RETURNS DESCRIPTION <p>True if the file exists, False if it doesn't</p> RAISES DESCRIPTION <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.connect","title":"connect  <code>abstractmethod</code>","text":"<pre><code>connect()\n</code></pre> <p>Establishes the actual connection to the referred RSE.</p> RAISES DESCRIPTION <code>RSEAccessDenied</code> <p>if no connection could be established.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.close","title":"close  <code>abstractmethod</code>","text":"<pre><code>close()\n</code></pre> <p>Closes the connection to RSE.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.get","title":"get  <code>abstractmethod</code>","text":"<pre><code>get(path, dest, transfer_timeout=None)\n</code></pre> <p>Provides access to files stored inside connected the RSE.</p> PARAMETER DESCRIPTION <code>path</code> <p>Physical file name of requested file</p> <p> </p> <code>dest</code> <p>Name and path of the files when stored at the client</p> <p> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <p> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.put","title":"put  <code>abstractmethod</code>","text":"<pre><code>put(source, target, source_dir, transfer_timeout=None)\n</code></pre> <p>Allows to store files inside the referred RSE.</p> PARAMETER DESCRIPTION <code>source</code> <p>path to the source file on the client file system</p> <p> </p> <code>target</code> <p>path to the destination file on the storage</p> <p> </p> <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> <p> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <p> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.delete","title":"delete  <code>abstractmethod</code>","text":"<pre><code>delete(path)\n</code></pre> <p>Deletes a file from the connected RSE.</p> PARAMETER DESCRIPTION <code>path</code> <p>path to the to be deleted file</p> <p> </p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.rename","title":"rename  <code>abstractmethod</code>","text":"<pre><code>rename(path, new_path)\n</code></pre> <p>Allows to rename a file stored inside the connected RSE.</p> PARAMETER DESCRIPTION <code>path</code> <p>path to the current file on the storage</p> <p> </p> <code>new_path</code> <p>path to the new file on the storage</p> <p> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.get_space_usage","title":"get_space_usage","text":"<pre><code>get_space_usage()\n</code></pre> <p>Get RSE space usage information.</p> RETURNS DESCRIPTION <p>a list with dict containing 'totalsize' and 'unusedsize'</p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.stat","title":"stat","text":"<pre><code>stat(path)\n</code></pre> <p>Returns the stats of a file.</p> PARAMETER DESCRIPTION <code>path</code> <p>path to file</p> <p> </p> RETURNS DESCRIPTION <p>a dict with two keys, filesize and adler32 of the file provided in path.</p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol-functions","title":"Functions","text":""},{"location":"rclone.html","title":"Rclone","text":""},{"location":"rclone.html#rucio.rse.protocols.rclone-classes","title":"Classes","text":""},{"location":"rclone.html#rucio.rse.protocols.rclone.Default","title":"Default","text":"<pre><code>Default(protocol_attr, rse_settings, logger=logging.log)\n</code></pre> <p>Implementing access to RSEs using the rclone protocol.</p> <p>Initializes the object with information about the referred RSE.</p> PARAMETER DESCRIPTION <code>props</code> <p>Properties derived from the RSE Repository</p> <p> </p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default-functions","title":"Functions","text":""},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.setuphostname","title":"setuphostname","text":"<pre><code>setuphostname(protocols)\n</code></pre> <p>Initializes the rclone object with information about protocols in the referred RSE.</p> PARAMETER DESCRIPTION <code>protocols</code> <p>Protocols in the RSE</p> <p> </p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.path2pfn","title":"path2pfn","text":"<pre><code>path2pfn(path)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.exists","title":"exists","text":"<pre><code>exists(pfn)\n</code></pre> <p>Checks if the requested file is known by the referred RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name</p> <p> </p> RETURNS DESCRIPTION <p>True if the file exists, False if it doesn't</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.stat","title":"stat","text":"<pre><code>stat(path)\n</code></pre> <p>Returns the stats of a file.</p> PARAMETER DESCRIPTION <code>path</code> <p>path to file</p> <p> </p> RETURNS DESCRIPTION <p>a dict with two keys, filesize and an element of GLOBALLY_SUPPORTED_CHECKSUMS.</p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.pfn2path","title":"pfn2path","text":"<pre><code>pfn2path(pfn)\n</code></pre> <p>Returns the path of a file given the pfn, i.e. scheme, user and hostname are subtracted from the pfn.</p> PARAMETER DESCRIPTION <code>path</code> <p>pfn of a file</p> <p> </p> RETURNS DESCRIPTION <p>path.</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.lfns2pfns","title":"lfns2pfns","text":"<pre><code>lfns2pfns(lfns)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Establishes the actual connection to the referred RSE.</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Closes the connection to RSE.</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.get","title":"get","text":"<pre><code>get(pfn, dest, transfer_timeout=None)\n</code></pre> <p>Provides access to files stored inside connected the RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name of requested file</p> <p> </p> <code>dest</code> <p>Name and path of the files when stored at the client</p> <p> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <p> DEFAULT: <code>None</code> </p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.put","title":"put","text":"<pre><code>put(filename, target, source_dir, transfer_timeout=None)\n</code></pre> <p>Allows to store files inside the referred RSE.</p> PARAMETER DESCRIPTION <code>source</code> <p>path to the source file on the client file system</p> <p> </p> <code>target</code> <p>path to the destination file on the storage</p> <p> </p> <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> <p> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <p> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.delete","title":"delete","text":"<pre><code>delete(pfn)\n</code></pre> <p>Deletes a file from the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name</p> <p> </p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.rename","title":"rename","text":"<pre><code>rename(pfn, new_pfn)\n</code></pre> <p>Allows to rename a file stored inside the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Current physical file name</p> <p> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone-functions","title":"Functions","text":""},{"location":"rfio.html","title":"Rfio","text":"<p>RFIO protocol</p>"},{"location":"rfio.html#rucio.rse.protocols.rfio-classes","title":"Classes","text":""},{"location":"rfio.html#rucio.rse.protocols.rfio.Default","title":"Default","text":"<pre><code>Default(protocol_attr, rse_settings, logger=logging.log)\n</code></pre> <p>Implementing access to RSEs using the RFIO protocol.</p>"},{"location":"rfio.html#rucio.rse.protocols.rfio.Default-functions","title":"Functions","text":""},{"location":"rfio.html#rucio.rse.protocols.rfio.Default.connect","title":"connect","text":"<pre><code>connect(credentials)\n</code></pre> <p>Establishes the actual connection to the referred RSE.</p> PARAMETER DESCRIPTION <code>credentials</code> <p>needed to establish a connection with the storage.</p> <p> </p> RAISES DESCRIPTION <code>RSEAccessDenied</code> <p>if no connection could be established.</p>"},{"location":"rfio.html#rucio.rse.protocols.rfio.Default.path2pfn","title":"path2pfn","text":"<pre><code>path2pfn(path)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"rfio.html#rucio.rse.protocols.rfio.Default.exists","title":"exists","text":"<pre><code>exists(path)\n</code></pre> <p>Checks if the requested file is known by the referred RSE.</p> PARAMETER DESCRIPTION <code>path</code> <p>Physical file name</p> <p> </p> RETURNS DESCRIPTION <p>True if the file exists, False if it doesn't</p> RAISES DESCRIPTION <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"rfio.html#rucio.rse.protocols.rfio.Default.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Closes the connection to RSE.</p>"},{"location":"rfio.html#rucio.rse.protocols.rfio.Default.put","title":"put","text":"<pre><code>put(source, target, source_dir, transfer_timeout=None)\n</code></pre> <p>Allows to store files inside the referred RSE.</p> PARAMETER DESCRIPTION <code>source</code> <p>path to the source file on the client file system</p> <p> </p> <code>target</code> <p>path to the destination file on the storage</p> <p> </p> <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> <p> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <p> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"rfio.html#rucio.rse.protocols.rfio.Default.mkdir","title":"mkdir","text":"<pre><code>mkdir(directory)\n</code></pre> <p>Create new directory.</p>"},{"location":"rfio.html#rucio.rse.protocols.rfio.Default.split_pfn","title":"split_pfn","text":"<pre><code>split_pfn(pfn)\n</code></pre> <p>Splits the given PFN into the parts known by the protocol. During parsing the PFN is also checked for validity on the given RSE with the given protocol.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>a fully qualified PFN</p> <p> </p> RETURNS DESCRIPTION <p>a dict containing all known parts of the PFN for the protocol e.g. scheme, hostname, port, prefix, path, filename</p> RAISES DESCRIPTION <code>RSEFileNameNotSupported</code> <p>if the provided PFN doesn't match with the protocol settings</p>"},{"location":"rfio.html#rucio.rse.protocols.rfio-functions","title":"Functions","text":""},{"location":"srm.html","title":"Srm","text":""},{"location":"srm.html#rucio.rse.protocols.srm-classes","title":"Classes","text":""},{"location":"srm.html#rucio.rse.protocols.srm.Default","title":"Default","text":"<pre><code>Default(protocol_attr, rse_settings, logger=logging.log)\n</code></pre> <p>Implementing access to RSEs using the SRM protocol.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default-functions","title":"Functions","text":""},{"location":"srm.html#rucio.rse.protocols.srm.Default.lfns2pfns","title":"lfns2pfns","text":"<pre><code>lfns2pfns(lfns)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.parse_pfns","title":"parse_pfns","text":"<pre><code>parse_pfns(pfns)\n</code></pre> <p>Splits the given PFN into the parts known by the protocol. During parsing the PFN is also checked for validity on the given RSE with the given protocol.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>a fully qualified PFN</p> <p> </p> RETURNS DESCRIPTION <p>a dict containing all known parts of the PFN for the protocol e.g. scheme, path, filename</p> RAISES DESCRIPTION <code>RSEFileNameNotSupported</code> <p>if the provided PFN doesn't match with the protocol settings</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.path2pfn","title":"path2pfn","text":"<pre><code>path2pfn(path)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Establishes the actual connection to the referred RSE. As a quick and dirty implementation we just use this method to check if the lcg tools are available. If we decide to use gfal, init should be done here.</p> RAISES DESCRIPTION <code>RSEAccessDenied</code> <p>Cannot connect.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.get","title":"get","text":"<pre><code>get(path, dest, transfer_timeout=None)\n</code></pre> <p>Provides access to files stored inside connected the RSE.</p> PARAMETER DESCRIPTION <code>path</code> <p>Physical file name of requested file</p> <p> </p> <code>dest</code> <p>Name and path of the files when stored at the client</p> <p> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <p> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.put","title":"put","text":"<pre><code>put(source, target, source_dir, transfer_timeout=None)\n</code></pre> <p>Allows to store files inside the referred RSE.</p> PARAMETER DESCRIPTION <code>source</code> <p>path to the source file on the client file system</p> <p> </p> <code>target</code> <p>path to the destination file on the storage</p> <p> </p> <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> <p> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <p> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.delete","title":"delete","text":"<pre><code>delete(path)\n</code></pre> <p>Deletes a file from the connected RSE.</p> PARAMETER DESCRIPTION <code>path</code> <p>path to the to be deleted file</p> <p> </p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.rename","title":"rename","text":"<pre><code>rename(path, new_path)\n</code></pre> <p>Allows to rename a file stored inside the connected RSE.</p> PARAMETER DESCRIPTION <code>path</code> <p>path to the current file on the storage</p> <p> </p> <code>new_path</code> <p>path to the new file on the storage</p> <p> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.exists","title":"exists","text":"<pre><code>exists(path)\n</code></pre> <p>Checks if the requested file is known by the referred RSE.</p> PARAMETER DESCRIPTION <code>path</code> <p>Physical file name</p> <p> </p> RETURNS DESCRIPTION <p>True if the file exists, False if it doesn't</p> RAISES DESCRIPTION <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.__parse_srm_error__","title":"__parse_srm_error__","text":"<pre><code>__parse_srm_error__(err_code, out, err)\n</code></pre> <p>Parse the error message to return error code.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Closes the connection to RSE.</p>"},{"location":"srm.html#rucio.rse.protocols.srm-functions","title":"Functions","text":""},{"location":"ssh.html","title":"Ssh","text":""},{"location":"ssh.html#rucio.rse.protocols.ssh-classes","title":"Classes","text":""},{"location":"ssh.html#rucio.rse.protocols.ssh.Default","title":"Default","text":"<pre><code>Default(protocol_attr, rse_settings, logger=logging.log)\n</code></pre> <p>Implementing access to RSEs using the SSH protocol.</p> <p>Initializes the object with information about the referred RSE.</p> PARAMETER DESCRIPTION <code>props</code> <p>Properties derived from the RSE Repository</p> <p> </p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default-functions","title":"Functions","text":""},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.path2pfn","title":"path2pfn","text":"<pre><code>path2pfn(path)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.exists","title":"exists","text":"<pre><code>exists(pfn)\n</code></pre> <p>Checks if the requested file is known by the referred RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name</p> <p> </p> RETURNS DESCRIPTION <p>True if the file exists, False if it doesn't</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.stat","title":"stat","text":"<pre><code>stat(path)\n</code></pre> <p>Returns the stats of a file.</p> PARAMETER DESCRIPTION <code>path</code> <p>path to file</p> <p> </p> RETURNS DESCRIPTION <p>a dict with two keys, filesize and an element of GLOBALLY_SUPPORTED_CHECKSUMS.</p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.pfn2path","title":"pfn2path","text":"<pre><code>pfn2path(pfn)\n</code></pre> <p>Returns the path of a file given the pfn, i.e. scheme, user and hostname are subtracted from the pfn.</p> PARAMETER DESCRIPTION <code>path</code> <p>pfn of a file</p> <p> </p> RETURNS DESCRIPTION <p>path.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.lfns2pfns","title":"lfns2pfns","text":"<pre><code>lfns2pfns(lfns)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Establishes the actual connection to the referred RSE.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Closes the connection to RSE.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.get","title":"get","text":"<pre><code>get(pfn, dest, transfer_timeout=None)\n</code></pre> <p>Provides access to files stored inside connected the RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name of requested file</p> <p> </p> <code>dest</code> <p>Name and path of the files when stored at the client</p> <p> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <p> DEFAULT: <code>None</code> </p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.put","title":"put","text":"<pre><code>put(filename, target, source_dir, transfer_timeout=None)\n</code></pre> <p>Allows to store files inside the referred RSE.</p> PARAMETER DESCRIPTION <code>source</code> <p>path to the source file on the client file system</p> <p> </p> <code>target</code> <p>path to the destination file on the storage</p> <p> </p> <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> <p> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <p> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.delete","title":"delete","text":"<pre><code>delete(pfn)\n</code></pre> <p>Deletes a file from the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name</p> <p> </p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.rename","title":"rename","text":"<pre><code>rename(pfn, new_pfn)\n</code></pre> <p>Allows to rename a file stored inside the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Current physical file name</p> <p> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Rsync","title":"Rsync","text":"<pre><code>Rsync(protocol_attr, rse_settings, logger=logging.log)\n</code></pre> <p>Implementing access to RSEs using the ssh.Rsync implementation.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Rsync-functions","title":"Functions","text":""},{"location":"ssh.html#rucio.rse.protocols.ssh.Rsync.stat","title":"stat","text":"<pre><code>stat(path)\n</code></pre> <p>Returns the stats of a file.</p> PARAMETER DESCRIPTION <code>path</code> <p>path to file</p> <p> </p> RETURNS DESCRIPTION <p>a dict with two keys, filesize and an element of GLOBALLY_SUPPORTED_CHECKSUMS.</p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Rsync.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Establishes the actual connection to the referred RSE.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Rsync.get","title":"get","text":"<pre><code>get(pfn, dest, transfer_timeout=None)\n</code></pre> <p>Provides access to files stored inside connected the RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name of requested file</p> <p> </p> <code>dest</code> <p>Name and path of the files when stored at the client</p> <p> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <p> DEFAULT: <code>None</code> </p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Rsync.put","title":"put","text":"<pre><code>put(filename, target, source_dir, transfer_timeout=None)\n</code></pre> <p>Allows to store files inside the referred RSE.</p> PARAMETER DESCRIPTION <code>source</code> <p>path to the source file on the client file system</p> <p> </p> <code>target</code> <p>path to the destination file on the storage</p> <p> </p> <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> <p> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <p> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh-functions","title":"Functions","text":""},{"location":"storm.html","title":"Storm","text":""},{"location":"storm.html#rucio.rse.protocols.storm-classes","title":"Classes","text":""},{"location":"storm.html#rucio.rse.protocols.storm.Default","title":"Default","text":"<pre><code>Default(protocol_attr, rse_settings, logger=None)\n</code></pre> <p>Implementing access to RSEs using the local filesystem.</p> <p>Initializes the object with information about the referred RSE.</p> PARAMETER DESCRIPTION <code>props</code> <p>Properties derived from the RSE Repository</p> <p> </p>"},{"location":"storm.html#rucio.rse.protocols.storm.Default-functions","title":"Functions","text":""},{"location":"storm.html#rucio.rse.protocols.storm.Default.lfns2pfns","title":"lfns2pfns","text":"<pre><code>lfns2pfns(lfns)\n</code></pre> <p>Create fake storm:// path. Will be resolved at the get() stage later.</p>"},{"location":"storm.html#rucio.rse.protocols.storm.Default.path2pfn","title":"path2pfn","text":"<pre><code>path2pfn(path)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"storm.html#rucio.rse.protocols.storm.Default.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Establishes the actual connection to the referred RSE.</p> PARAMETER DESCRIPTION <code>credentials</code> <p>Provide all necessary information to establish a connection to the referred storage system. Some is loaded from the repository inside the RSE class and some must be provided specific for the SFTP protocol like username, password, private_key, private_key_pass, port. For details about possible additional parameters and details about their usage see the pysftp.Connection() documentation. NOTE: the host parametrer is overwritten with the value provided by the repository</p> <p> </p>"},{"location":"storm.html#rucio.rse.protocols.storm.Default.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Closes the connection to RSE.</p>"},{"location":"storm.html#rucio.rse.protocols.storm.Default.get","title":"get","text":"<pre><code>get(pfn, dest, transfer_timeout=None)\n</code></pre> <p>Provides access to files stored inside connected the RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name of requested file</p> <p> </p> <code>dest</code> <p>Name and path of the files when stored at the client</p> <p> </p>"},{"location":"storm.html#rucio.rse.protocols.storm.Default.put","title":"put","text":"<pre><code>put(source, target, source_dir=None, transfer_timeout=None)\n</code></pre> <p>Allows to store files inside the referred RSE.</p> PARAMETER DESCRIPTION <code>source</code> <p>Physical file name</p> <p> </p> <code>target</code> <p>Name of the file on the storage system e.g. with prefixed scope</p> <p> </p>"},{"location":"storm.html#rucio.rse.protocols.storm.Default.delete","title":"delete","text":"<pre><code>delete(pfn)\n</code></pre> <p>Deletes a file from the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name</p> <p> </p>"},{"location":"storm.html#rucio.rse.protocols.storm.Default.rename","title":"rename","text":"<pre><code>rename(pfn, new_pfn)\n</code></pre> <p>Allows to rename a file stored inside the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Current physical file name</p> <p> </p>"},{"location":"storm.html#rucio.rse.protocols.storm-functions","title":"Functions","text":""},{"location":"webdav.html","title":"Webdav","text":""},{"location":"webdav.html#rucio.rse.protocols.webdav-classes","title":"Classes","text":""},{"location":"webdav.html#rucio.rse.protocols.webdav.TLSHTTPAdapter","title":"TLSHTTPAdapter","text":"<p>Class to force the SSL protocol to latest TLS</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.UploadInChunks","title":"UploadInChunks","text":"<pre><code>UploadInChunks(filename, chunksize, progressbar=False)\n</code></pre> <p>Class to upload by chunks.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.IterableToFileAdapter","title":"IterableToFileAdapter","text":"<pre><code>IterableToFileAdapter(iterable)\n</code></pre> <p>Class IterableToFileAdapter</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav._PropfindFile","title":"_PropfindFile  <code>dataclass</code>","text":"<pre><code>_PropfindFile(href, size)\n</code></pre> <p>Contains the properties of one file from a PROPFIND response.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav._PropfindFile-functions","title":"Functions","text":""},{"location":"webdav.html#rucio.rse.protocols.webdav._PropfindFile.from_xml_node","title":"from_xml_node  <code>classmethod</code>","text":"<pre><code>from_xml_node(node)\n</code></pre> <p>Extract file properties from a <code>&lt;{DAV:}response&gt;</code> node.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav._PropfindResponse","title":"_PropfindResponse  <code>dataclass</code>","text":"<pre><code>_PropfindResponse(files)\n</code></pre> <p>Contains all the files from a PROPFIND response.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav._PropfindResponse-functions","title":"Functions","text":""},{"location":"webdav.html#rucio.rse.protocols.webdav._PropfindResponse.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(document)\n</code></pre> <p>Parses the XML document of a WebDAV PROPFIND response.</p> <p>The PROPFIND response is described in RFC 4918. This method expects the document root to be a node with tag <code>{DAV:}multistatus</code>.</p> PARAMETER DESCRIPTION <code>document</code> <p>XML document to parse.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <p>The parsed response.</p> RAISES DESCRIPTION <code>ValueError</code> <p>if the XML document couldn't be parsed.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default","title":"Default","text":"<pre><code>Default(protocol_attr, rse_settings, logger=logging.log)\n</code></pre> <p>Implementing access to RSEs using the webDAV protocol.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default-functions","title":"Functions","text":""},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.connect","title":"connect","text":"<pre><code>connect(credentials=None)\n</code></pre> <p>Establishes the actual connection to the referred RSE.</p> PARAMETER DESCRIPTION <code>credentials</code> <p>Provides information to establish a connection to the referred storage system. For WebDAV connections these are ca_cert, cert, auth_type, timeout</p> <p> TYPE: <code>Optional[dict[str, Any]]</code> DEFAULT: <code>None</code> </p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.path2pfn","title":"path2pfn","text":"<pre><code>path2pfn(path)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.exists","title":"exists","text":"<pre><code>exists(pfn)\n</code></pre> <p>Checks if the requested file is known by the referred RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name</p> <p> </p> RETURNS DESCRIPTION <p>True if the file exists, False if it doesn't</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.get","title":"get","text":"<pre><code>get(pfn, dest='.', transfer_timeout=None)\n</code></pre> <p>Provides access to files stored inside connected the RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name of requested file</p> <p> </p> <code>dest</code> <p>Name and path of the files when stored at the client</p> <p> DEFAULT: <code>'.'</code> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <p> DEFAULT: <code>None</code> </p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.put","title":"put","text":"<pre><code>put(\n    source,\n    target,\n    source_dir=None,\n    transfer_timeout=None,\n    progressbar=False,\n)\n</code></pre> <p>Allows to store files inside the referred RSE.</p> PARAMETER DESCRIPTION <code>source</code> <p>Physical file name</p> <p> </p> <code>target</code> <p>Name of the file on the storage system e.g. with prefixed scope</p> <p> </p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.rename","title":"rename","text":"<pre><code>rename(pfn, new_pfn)\n</code></pre> <p>Allows to rename a file stored inside the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Current physical file name</p> <p> </p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.delete","title":"delete","text":"<pre><code>delete(pfn)\n</code></pre> <p>Deletes a file from the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name</p> <p> </p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.mkdir","title":"mkdir","text":"<pre><code>mkdir(directory)\n</code></pre> <p>Internal method to create directories</p> PARAMETER DESCRIPTION <code>directory</code> <p>Name of the directory that needs to be created</p> <p> </p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.ls","title":"ls","text":"<pre><code>ls(filename)\n</code></pre> <p>Internal method to list files/directories</p> PARAMETER DESCRIPTION <code>filename</code> <p>Name of the directory that needs to be created</p> <p> </p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.stat","title":"stat","text":"<pre><code>stat(path)\n</code></pre> <p>Returns the stats of a file.</p> PARAMETER DESCRIPTION <code>path</code> <p>path to file</p> <p> </p> RETURNS DESCRIPTION <p>a dict with filesize of the file provided in path as a key.</p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p> <code>RSEAccessDenied</code> <p>in case of permission issue.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.get_space_usage","title":"get_space_usage","text":"<pre><code>get_space_usage()\n</code></pre> <p>Get RSE space usage information.</p> RETURNS DESCRIPTION <p>a list with dict containing 'totalsize' and 'unusedsize'</p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.NoRename","title":"NoRename","text":"<pre><code>NoRename(protocol_attr, rse_settings, logger=logging.log)\n</code></pre> <p>Implementing access to RSEs using the WebDAV protocol but without renaming files on upload/download. Necessary for some storage endpoints.</p> <p>Initializes the object with information about the referred RSE.</p> PARAMETER DESCRIPTION <code>protocol_attr</code> <p>Properties of the requested protocol.</p> <p> </p> <code>rse_settings</code> <p>The RSE settings.</p> <p> </p> <code>logger</code> <p>Optional decorated logger that can be passed from the calling daemons or servers.</p> <p> DEFAULT: <code>log</code> </p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.NoRename-functions","title":"Functions","text":""},{"location":"webdav.html#rucio.rse.protocols.webdav.NoRename.rename","title":"rename","text":"<pre><code>rename(pfn, new_pfn)\n</code></pre> <p>Allows to rename a file stored inside the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Current physical file name</p> <p> </p>"},{"location":"xrootd.html","title":"Xrootd","text":""},{"location":"xrootd.html#rucio.rse.protocols.xrootd-classes","title":"Classes","text":""},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default","title":"Default","text":"<pre><code>Default(protocol_attr, rse_settings, logger=logging.log)\n</code></pre> <p>Implementing access to RSEs using the XRootD protocol using GSI authentication.</p> <p>Initializes the object with information about the referred RSE.</p> PARAMETER DESCRIPTION <code>props</code> <p>Properties derived from the RSE Repository</p> <p> </p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default-functions","title":"Functions","text":""},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.path2pfn","title":"path2pfn","text":"<pre><code>path2pfn(path)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.exists","title":"exists","text":"<pre><code>exists(pfn)\n</code></pre> <p>Checks if the requested file is known by the referred RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name</p> <p> </p> RETURNS DESCRIPTION <p>True if the file exists, False if it doesn't</p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.stat","title":"stat","text":"<pre><code>stat(path)\n</code></pre> <p>Returns the stats of a file.</p> PARAMETER DESCRIPTION <code>path</code> <p>path to file</p> <p> </p> RETURNS DESCRIPTION <p>a dict with two keys, filesize and an element of GLOBALLY_SUPPORTED_CHECKSUMS.</p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.pfn2path","title":"pfn2path","text":"<pre><code>pfn2path(pfn)\n</code></pre> <p>Returns the path of a file given the pfn, i.e. scheme and hostname are subtracted from the pfn.</p> PARAMETER DESCRIPTION <code>path</code> <p>pfn of a file</p> <p> </p> RETURNS DESCRIPTION <p>path.</p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.lfns2pfns","title":"lfns2pfns","text":"<pre><code>lfns2pfns(lfns)\n</code></pre> <p>Returns a fully qualified PFN for the file referred by path.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file.</p> <p> </p> RETURNS DESCRIPTION <p>Fully qualified PFN.</p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Establishes the actual connection to the referred RSE.</p> PARAMETER DESCRIPTION <code>credentials</code> <p>Provides information to establish a connection to the referred storage system. For S3 connections these are access_key, secretkey, host_base, host_bucket, progress_meter and skip_existing.</p> <p> </p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Closes the connection to RSE.</p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.get","title":"get","text":"<pre><code>get(pfn, dest, transfer_timeout=None)\n</code></pre> <p>Provides access to files stored inside connected the RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name of requested file</p> <p> </p> <code>dest</code> <p>Name and path of the files when stored at the client</p> <p> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <p> DEFAULT: <code>None</code> </p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.put","title":"put","text":"<pre><code>put(filename, target, source_dir, transfer_timeout=None)\n</code></pre> <p>Allows to store files inside the referred RSE.</p> PARAMETER DESCRIPTION <code>source</code> <p>path to the source file on the client file system</p> <p> </p> <code>target</code> <p>path to the destination file on the storage</p> <p> </p> <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> <p> </p> <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <p> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.delete","title":"delete","text":"<pre><code>delete(pfn)\n</code></pre> <p>Deletes a file from the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Physical file name</p> <p> </p> RAISES DESCRIPTION <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.rename","title":"rename","text":"<pre><code>rename(pfn, new_pfn)\n</code></pre> <p>Allows to rename a file stored inside the connected RSE.</p> PARAMETER DESCRIPTION <code>pfn</code> <p>Current physical file name</p> <p> </p> RAISES DESCRIPTION <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd-functions","title":"Functions","text":""}]}