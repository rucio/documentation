{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"bittorrent.html","title":"Bittorrent","text":""},{"location":"cache.html","title":"Cache","text":""},{"location":"cache.html#rucio.rse.protocols.cache.Default","title":"<code>Default(protocol_attr, rse_settings, logger=None)</code>","text":"<p>Implementing access to RSEs using the local filesystem.</p> <p>Initializes the object with information about the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <p>Properties derived from the RSE Repository</p> required"},{"location":"cache.html#rucio.rse.protocols.cache.Default._get_path","title":"<code>_get_path(scope, name)</code>","text":"<p>Transforms the physical file name into the local URI in the referred RSE. Suitable for sites implementoing the RUCIO naming convention.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <p>filename</p> required <code>scope</code> <p>scope</p> required <p>Returns:</p> Type Description <p>RSE specific URI of the physical file</p>"},{"location":"cache.html#rucio.rse.protocols.cache.Default.path2pfn","title":"<code>path2pfn(path)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"cache.html#rucio.rse.protocols.cache.Default.exists","title":"<code>exists(pfn)</code>","text":"<p>Checks if the requested file is known by the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>True if the file exists, False if it doesn't</p>"},{"location":"cache.html#rucio.rse.protocols.cache.Default.connect","title":"<code>connect()</code>","text":"<p>Establishes the actual connection to the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>credentials</code> <p>Provide all necessary information to establish a connection to the referred storage system. Some is loaded from the repository inside the RSE class and some must be provided specific for the SFTP protocol like username, password, private_key, private_key_pass, port. For details about possible additional parameters and details about their usage see the pysftp.Connection() documentation. NOTE: the host parametrer is overwritten with the value provided by the repository</p> required"},{"location":"cache.html#rucio.rse.protocols.cache.Default.close","title":"<code>close()</code>","text":"<p>Closes the connection to RSE.</p>"},{"location":"cache.html#rucio.rse.protocols.cache.Default.get","title":"<code>get(pfn, dest, transfer_timeout=None)</code>","text":"<p>Provides access to files stored inside connected the RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name of requested file</p> required <code>dest</code> <p>Name and path of the files when stored at the client</p> required"},{"location":"cache.html#rucio.rse.protocols.cache.Default.put","title":"<code>put(source, target, source_dir=None, transfer_timeout=None)</code>","text":"<p>Allows to store files inside the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <p>Physical file name</p> required <code>target</code> <p>Name of the file on the storage system e.g. with prefixed scope</p> required"},{"location":"cache.html#rucio.rse.protocols.cache.Default.delete","title":"<code>delete(pfn)</code>","text":"<p>Deletes a file from the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required"},{"location":"cache.html#rucio.rse.protocols.cache.Default.rename","title":"<code>rename(pfn, new_pfn)</code>","text":"<p>Allows to rename a file stored inside the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Current physical file name</p> required"},{"location":"dummy.html","title":"Dummy","text":""},{"location":"dummy.html#rucio.rse.protocols.dummy.Default","title":"<code>Default(protocol_attr, rse_settings, logger=None)</code>","text":"<p>Implementing access to RSEs using the local filesystem.</p> <p>Initializes the object with information about the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <p>Properties derived from the RSE Repository</p> required"},{"location":"dummy.html#rucio.rse.protocols.dummy.Default.path2pfn","title":"<code>path2pfn(path)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"dummy.html#rucio.rse.protocols.dummy.Default.exists","title":"<code>exists(pfn)</code>","text":"<p>Checks if the requested file is known by the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>True if the file exists, False if it doesn't</p>"},{"location":"dummy.html#rucio.rse.protocols.dummy.Default.connect","title":"<code>connect()</code>","text":"<p>Establishes the actual connection to the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>credentials</code> <p>Provide all necessary information to establish a connection to the referred storage system. Some is loaded from the repository inside the RSE class and some must be provided specific for the SFTP protocol like username, password, private_key, private_key_pass, port. For details about possible additional parameters and details about their usage see the pysftp.Connection() documentation. NOTE: the host parametrer is overwritten with the value provided by the repository</p> required"},{"location":"dummy.html#rucio.rse.protocols.dummy.Default.close","title":"<code>close()</code>","text":"<p>Closes the connection to RSE.</p>"},{"location":"dummy.html#rucio.rse.protocols.dummy.Default.get","title":"<code>get(pfn, dest, transfer_timeout=None)</code>","text":"<p>Provides access to files stored inside connected the RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name of requested file</p> required <code>dest</code> <p>Name and path of the files when stored at the client</p> required"},{"location":"dummy.html#rucio.rse.protocols.dummy.Default.put","title":"<code>put(source, target, source_dir=None, transfer_timeout=None)</code>","text":"<p>Allows to store files inside the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <p>Physical file name</p> required <code>target</code> <p>Name of the file on the storage system e.g. with prefixed scope</p> required"},{"location":"dummy.html#rucio.rse.protocols.dummy.Default.delete","title":"<code>delete(pfn)</code>","text":"<p>Deletes a file from the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required"},{"location":"dummy.html#rucio.rse.protocols.dummy.Default.rename","title":"<code>rename(pfn, new_pfn)</code>","text":"<p>Allows to rename a file stored inside the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Current physical file name</p> required"},{"location":"gfal.html","title":"Gfal","text":""},{"location":"gfal.html#rucio.rse.protocols.gfal.Default","title":"<code>Default(protocol_attr, rse_settings, logger=logging.log)</code>","text":"<p>Implementing access to RSEs using the srm protocol.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.lfns2pfns","title":"<code>lfns2pfns(lfns)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.parse_pfns","title":"<code>parse_pfns(pfns)</code>","text":"<p>Splits the given PFN into the parts known by the protocol. During parsing the PFN is also checked for validity on the given RSE with the given protocol.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>a fully qualified PFN</p> required <p>Returns:</p> Type Description <p>a dict containing all known parts of the PFN for the protocol e.g. scheme, path, filename</p> <p>Raises:</p> Type Description <code>RSEFileNameNotSupported</code> <p>if the provided PFN doesn't match with the protocol settings</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.path2pfn","title":"<code>path2pfn(path)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.connect","title":"<code>connect()</code>","text":"<p>Establishes the actual connection to the referred RSE. If we decide to use gfal, init should be done here.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.get","title":"<code>get(path, dest, transfer_timeout=None)</code>","text":"<p>Provides access to files stored inside connected the RSE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>Physical file name of requested file</p> required <code>dest</code> <p>Name and path of the files when stored at the client</p> required <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <code>None</code> <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.put","title":"<code>put(source, target, source_dir, transfer_timeout=None)</code>","text":"<p>Allows to store files inside the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <p>path to the source file on the client file system</p> required <code>target</code> <p>path to the destination file on the storage</p> required <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> required <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <code>None</code> <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.delete","title":"<code>delete(path)</code>","text":"<p>Deletes a file from the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>path to the to be deleted file</p> required <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.rename","title":"<code>rename(path, new_path)</code>","text":"<p>Allows to rename a file stored inside the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>path to the current file on the storage</p> required <code>new_path</code> <p>path to the new file on the storage</p> required <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.exists","title":"<code>exists(path)</code>","text":"<p>Checks if the requested file is known by the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>True if the file exists, False if it doesn't</p> <p>Raises:</p> Type Description <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.close","title":"<code>close()</code>","text":"<p>Closes the connection to RSE.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.stat","title":"<code>stat(path)</code>","text":"<p>Returns the stats of a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>path to file</p> required <p>Returns:</p> Type Description <p>a dict with two keys, filesize and an element of GLOBALLY_SUPPORTED_CHECKSUMS.</p> <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.__gfal2_cancel","title":"<code>__gfal2_cancel()</code>","text":"<p>Cancel all gfal operations in progress.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.__gfal2_copy","title":"<code>__gfal2_copy(src, dest, src_spacetoken=None, dest_spacetoken=None, transfer_timeout=None)</code>","text":"<p>Uses gfal2 to copy file from src to dest.</p> <p>Parameters:</p> Name Type Description Default <code>src</code> <p>Physical source file name</p> required <code>src_spacetoken</code> <p>The source file's space token</p> <code>None</code> <code>dest</code> <p>Physical destination file name</p> required <code>dest_spacetoken</code> <p>The destination file's space token</p> <code>None</code> <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <code>None</code> <p>Returns:</p> Type Description <p>0 if copied successfully, other than 0 if failed</p> <p>Raises:</p> Type Description <code>SourceNotFound</code> <p>if source file cannot be found.</p> <code>RucioException</code> <p>if it failed to copy the file.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.__gfal2_rm","title":"<code>__gfal2_rm(paths)</code>","text":"<p>Uses gfal2 to remove the file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>0 if removed successfully, other than 0 if failed</p> <p>Raises:</p> Type Description <code>SourceNotFound</code> <p>if the source file was not found.</p> <code>RucioException</code> <p>if it failed to remove the file.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.__gfal2_exist","title":"<code>__gfal2_exist(path)</code>","text":"<p>Uses gfal2 to check whether the file exists.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>0 if it exists, -1 if it doesn't</p> <p>Raises:</p> Type Description <code>RucioException</code> <p>if the error is not source not found.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.__gfal2_rename","title":"<code>__gfal2_rename(path, new_path)</code>","text":"<p>Uses gfal2 to rename a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>path to the current file on the storage</p> required <code>new_path</code> <p>path to the new file on the storage</p> required <p>Returns:</p> Type Description <p>0 if it exists, -1 if it doesn't</p> <p>Raises:</p> Type Description <code>RucioException</code> <p>if failed.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.get_space_usage","title":"<code>get_space_usage()</code>","text":"<p>Get RSE space usage information.</p> <p>Returns:</p> Type Description <p>a list with dict containing 'totalsize' and 'unusedsize'</p> <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.Default.__gfal2_get_space_usage","title":"<code>__gfal2_get_space_usage(path, space_token)</code>","text":"<p>Uses gfal2 to get space usage info with space token.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>the endpoint path</p> required <code>space_token</code> <p>a string space token. E.g. \"ATLASDATADISK\"</p> required <p>Returns:</p> Type Description <p>a list with dict containing 'totalsize' and 'unusedsize'</p> <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if failed.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.NoRename","title":"<code>NoRename(protocol_attr, rse_settings, logger=logging.log)</code>","text":"<p>Implementing access to RSEs using the srm protocol without renaming files on upload/download. Necessary for some storage endpoints.</p> <p>Initializes the object with information about the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>protocol_attr</code> <p>Properties of the requested protocol.</p> required <code>rse_settting</code> <p>The RSE settings.</p> required <code>logger</code> <p>Optional decorated logger that can be passed from the calling daemons or servers.</p> <code>log</code>"},{"location":"gfal.html#rucio.rse.protocols.gfal.NoRename.rename","title":"<code>rename(pfn, new_pfn)</code>","text":"<p>Allows to rename a file stored inside the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Current physical file name</p> required"},{"location":"gfal.html#rucio.rse.protocols.gfal.CLI","title":"<code>CLI(protocol_attr, rse_settings, logger=logging.log)</code>","text":"<p>Implementing access to RSEs using the srm protocol through CLI with 'gfal' commands.</p> <p>Initializes the object with information about the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <p>Properties derived from the RSE Repository</p> required"},{"location":"gfal.html#rucio.rse.protocols.gfal.CLI.get","title":"<code>get(path, dest, transfer_timeout=None)</code>","text":"<p>Provides access to files stored inside connected the RSE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>Physical file name of requested file</p> required <code>dest</code> <p>Name and path of the files when stored at the client</p> required <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <code>None</code> <p>Raises:</p> Type Description <code>RucioException</code> <p>Passthrough of gfal-copy error message.</p>"},{"location":"gfal.html#rucio.rse.protocols.gfal.CLI.put","title":"<code>put(source, target, source_dir, transfer_timeout=None)</code>","text":"<p>Allows to store files inside the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <p>path to the source file on the client file system</p> required <code>target</code> <p>path to the destination file on the storage</p> required <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> required <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <code>None</code> <p>Raises:</p> Type Description <code>RucioException</code> <p>Passthrough of gfal-copy error message.</p>"},{"location":"globus.html","title":"Globus","text":""},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol","title":"<code>GlobusRSEProtocol(protocol_attr, rse_settings, logger=logging.log)</code>","text":"<p>Implementing access to RSEs using the Globus service as a Rucio RSE protocol.</p> <p>Initializes the object with information about the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <p>Properties of the requested protocol</p> required"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol.lfns2pfns","title":"<code>lfns2pfns(lfns)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol._get_path","title":"<code>_get_path(scope, name)</code>","text":"<p>Transforms the logical file name into a PFN. Suitable for sites implementing the RUCIO naming convention. This implementation is only invoked if the RSE is deterministic.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <p>scope</p> required <code>name</code> <p>filename</p> required <p>Returns:</p> Type Description <p>RSE specific URI of the physical file</p>"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol.parse_pfns","title":"<code>parse_pfns(pfns)</code>","text":"<p>Splits the given PFN into the parts known by the protocol. It is also checked if the provided protocol supports the given PFNs.</p> <p>Parameters:</p> Name Type Description Default <code>pfns</code> <p>a list of a fully qualified PFNs</p> required <p>Returns:</p> Type Description <p>dic with PFN as key and a dict with path and name as value</p> <p>Raises:</p> Type Description <code>RSEFileNameNotSupported</code> <p>if the provided PFN doesn't match with the protocol settings</p>"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol.exists","title":"<code>exists(path)</code>","text":"<p>Checks if the requested file is known by the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>True if the file exists, False if it doesn't</p> <p>Raises:</p> Type Description <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol.list","title":"<code>list(path)</code>","text":"<p>Checks if the requested path is known by the referred RSE and returns a list of items</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>List of items</p>"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol.delete","title":"<code>delete(path)</code>","text":"<p>Deletes a file from the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>path to the to be deleted file</p> required <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol.bulk_delete","title":"<code>bulk_delete(pfns)</code>","text":"<p>Submits an async task to bulk delete files on globus endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>pfns</code> <p>list of pfns to delete</p> required <p>Raises:</p> Type Description <code>TransferAPIError</code> <p>if unexpected response from the service.</p>"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol.connect","title":"<code>connect()</code>","text":"<p>Establishes the actual connection to the referred RSE.</p> <p>reaper2 daemon requires implementation of protocol.connect</p>"},{"location":"globus.html#rucio.rse.protocols.globus.GlobusRSEProtocol.close","title":"<code>close()</code>","text":"<p>Closes the connection to RSE.</p> <p>reaper2 daemon requires implementation of protocol.close</p>"},{"location":"http_cache.html","title":"Http cache","text":""},{"location":"http_cache.html#rucio.rse.protocols.http_cache.Default","title":"<code>Default(protocol_attr, rse_settings, logger=None)</code>","text":"<p>Implementing access to RSEs using the ngarc protocol.</p> <p>Initializes the object with information about the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <p>Properties derived from the RSE Repository</p> required"},{"location":"http_cache.html#rucio.rse.protocols.http_cache.Default._get_path","title":"<code>_get_path(scope, name)</code>","text":"<p>Transforms the physical file name into the local URI in the referred RSE. Suitable for sites implementoing the RUCIO naming convention.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <p>filename</p> required <code>scope</code> <p>scope</p> required <p>Returns:</p> Type Description <p>RSE specific URI of the physical file</p>"},{"location":"http_cache.html#rucio.rse.protocols.http_cache.Default.path2pfn","title":"<code>path2pfn(path)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"http_cache.html#rucio.rse.protocols.http_cache.Default.put","title":"<code>put(source, target, source_dir=None, transfer_timeout=None)</code>","text":"<p>Allows to store files inside the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <p>Physical file name</p> required <code>target</code> <p>Name of the file on the storage system e.g. with prefixed scope</p> required"},{"location":"http_cache.html#rucio.rse.protocols.http_cache.Default.delete","title":"<code>delete(pfn)</code>","text":"<p>Deletes a file from the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required"},{"location":"http_cache.html#rucio.rse.protocols.http_cache.Default.rename","title":"<code>rename(pfn, new_pfn)</code>","text":"<p>Allows to rename a file stored inside the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Current physical file name</p> required"},{"location":"mock.html","title":"Mock","text":""},{"location":"mock.html#rucio.rse.protocols.mock.Default","title":"<code>Default(protocol_attr, rse_settings, logger=None)</code>","text":"<p>Implementing access to RSEs using the local filesystem.</p> <p>Initializes the object with information about the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <p>Properties derived from the RSE Repository</p> required"},{"location":"mock.html#rucio.rse.protocols.mock.Default.path2pfn","title":"<code>path2pfn(path)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"mock.html#rucio.rse.protocols.mock.Default.exists","title":"<code>exists(pfn)</code>","text":"<p>Checks if the requested file is known by the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>True if the file exists, False if it doesn't</p>"},{"location":"mock.html#rucio.rse.protocols.mock.Default.connect","title":"<code>connect()</code>","text":"<p>Establishes the actual connection to the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>credentials</code> <p>Provide all necessary information to establish a connection to the referred storage system. Some is loaded from the repository inside the RSE class and some must be provided specific for the SFTP protocol like username, password, private_key, private_key_pass, port. For details about possible additional parameters and details about their usage see the pysftp.Connection() documentation. NOTE: the host parametrer is overwritten with the value provided by the repository</p> required"},{"location":"mock.html#rucio.rse.protocols.mock.Default.close","title":"<code>close()</code>","text":"<p>Closes the connection to RSE.</p>"},{"location":"mock.html#rucio.rse.protocols.mock.Default.get","title":"<code>get(pfn, dest, transfer_timeout=None)</code>","text":"<p>Provides access to files stored inside connected the RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name of requested file</p> required <code>dest</code> <p>Name and path of the files when stored at the client</p> required"},{"location":"mock.html#rucio.rse.protocols.mock.Default.put","title":"<code>put(source, target, source_dir=None, transfer_timeout=None)</code>","text":"<p>Allows to store files inside the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <p>Physical file name</p> required <code>target</code> <p>Name of the file on the storage system e.g. with prefixed scope</p> required"},{"location":"mock.html#rucio.rse.protocols.mock.Default.delete","title":"<code>delete(pfn)</code>","text":"<p>Deletes a file from the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required"},{"location":"mock.html#rucio.rse.protocols.mock.Default.bulk_delete","title":"<code>bulk_delete(pfns)</code>","text":"<p>Submits an async task to bulk delete files.</p> <p>Parameters:</p> Name Type Description Default <code>pfns</code> <p>list of pfns to delete</p> required <p>Raises:</p> Type Description <code>TransferAPIError</code> <p>if unexpected response from the service.</p>"},{"location":"mock.html#rucio.rse.protocols.mock.Default.rename","title":"<code>rename(pfn, new_pfn)</code>","text":"<p>Allows to rename a file stored inside the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Current physical file name</p> required"},{"location":"ngarc.html","title":"Ngarc","text":""},{"location":"ngarc.html#rucio.rse.protocols.ngarc.DataPoint","title":"<code>DataPoint(u, uc)</code>","text":"<p>Wrapper around arc.datapoint_from_url() which does not clean up DataPoints when python objects are destroyed, leading to connection leaking when used with gridftp. This class should be used instead of arc.datapoint_from_url(). It can be called like dp = DataPoint('gsiftp://...', uc); dp.h.Stat() where uc is an arc.UserConfig object.</p>"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default","title":"<code>Default(protocol_attr, rse_settings, logger=None)</code>","text":"<p>Implementing access to RSEs using ARC client.</p> <p>Set up UserConfig object.</p>"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default.path2pfn","title":"<code>path2pfn(path)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default.exists","title":"<code>exists(pfn)</code>","text":"<p>Checks if the requested file is known by the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>True if the file exists, False if it doesn't</p>"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default.connect","title":"<code>connect()</code>","text":"<p>Establishes the actual connection to the referred RSE.</p>"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default.close","title":"<code>close()</code>","text":"<p>Closes the connection to RSE.</p>"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default.get","title":"<code>get(pfn, dest, transfer_timeout=None)</code>","text":"<p>Provides access to files stored inside connected the RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name of requested file</p> required <code>dest</code> <p>Name and path of the files when stored at the client</p> required"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default.put","title":"<code>put(source, target, source_dir=None, transfer_timeout=None)</code>","text":"<p>Allows to store files inside the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <p>Physical file name</p> required <code>target</code> <p>Name of the file on the storage system e.g. with prefixed scope</p> required"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default.delete","title":"<code>delete(pfn)</code>","text":"<p>Deletes a file from the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required"},{"location":"ngarc.html#rucio.rse.protocols.ngarc.Default.rename","title":"<code>rename(pfn, new_pfn)</code>","text":"<p>Allows to rename a file stored inside the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Current physical file name</p> required"},{"location":"posix.html","title":"Posix","text":""},{"location":"posix.html#rucio.rse.protocols.posix.Default","title":"<code>Default(protocol_attr, rse_settings, logger=logging.log)</code>","text":"<p>Implementing access to RSEs using the local filesystem.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default.exists","title":"<code>exists(pfn)</code>","text":"<p>Checks if the requested file is known by the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>True if the file exists, False if it doesn't</p> <p>Raises:</p> Type Description <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default.connect","title":"<code>connect()</code>","text":"<p>Establishes the actual connection to the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>credentials</code> <p>needed to establish a connection with the storage.</p> required <p>Raises:</p> Type Description <code>RSEAccessDenied</code> <p>if no connection could be established.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default.close","title":"<code>close()</code>","text":"<p>Closes the connection to RSE.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default.get","title":"<code>get(pfn, dest, transfer_timeout=None)</code>","text":"<p>Provides access to files stored inside connected the RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name of requested file</p> required <code>dest</code> <p>Name and path of the files when stored at the client</p> required <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default.put","title":"<code>put(source, target, source_dir=None, transfer_timeout=None)</code>","text":"<p>Allows to store files inside the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <p>path to the source file on the client file system</p> required <code>target</code> <p>path to the destination file on the storage</p> required <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> <code>None</code> <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default.delete","title":"<code>delete(pfn)</code>","text":"<p>Deletes a file from the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>pfn to the to be deleted file</p> required <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default.rename","title":"<code>rename(pfn, new_pfn)</code>","text":"<p>Allows to rename a file stored inside the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>path to the current file on the storage</p> required <code>new_path</code> <p>path to the new file on the storage</p> required <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default.lfns2pfns","title":"<code>lfns2pfns(lfns)</code>","text":"<p>Returns fully qualified PFNs for the file referred by each lfn in the lfns list.</p> <p>Parameters:</p> Name Type Description Default <code>lfns</code> <p>List of lfns. If lfn['path'] is present it is used as the path to the file, otherwise the path is constructed deterministically.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFNs.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Default.stat","title":"<code>stat(pfn)</code>","text":"<p>Determines the file size in bytes and checksum (adler32) of the provided file.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>The PFN the file.</p> required <p>Returns:</p> Type Description <p>a dict containing the keys filesize and adler32.</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Symlink","title":"<code>Symlink(protocol_attr, rse_settings, logger=logging.log)</code>","text":"<p>Implementing access to RSEs using the local filesystem, creating a symlink on a get</p>"},{"location":"posix.html#rucio.rse.protocols.posix.Symlink.get","title":"<code>get(pfn, dest, transfer_timeout=None)</code>","text":"<p>Provides access to files stored inside connected the RSE. A download/get will create a symlink on the local file system pointing to the underlying file. Other operations act directly on the remote file.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name of requested file</p> required <code>dest</code> <p>Name and path of the files when stored at the client</p> required <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"protocol.html","title":"Protocol","text":"<p>This module defines the base class for implementing a transfer protocol, along with some of the default methods for LFN2PFN translations.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol","title":"<code>RSEProtocol(protocol_attr, rse_settings, logger=logging.log)</code>","text":"<p>This class is virtual and acts as a base to inherit new protocols from. It further provides some common functionality which applies for the majority of the protocols.</p> <p>Initializes the object with information about the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>protocol_attr</code> <p>Properties of the requested protocol.</p> required <code>rse_settting</code> <p>The RSE settings.</p> required <code>logger</code> <p>Optional decorated logger that can be passed from the calling daemons or servers.</p> <code>log</code>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.lfns2pfns","title":"<code>lfns2pfns(lfns)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.__lfns2pfns_client","title":"<code>__lfns2pfns_client(lfns)</code>","text":"<p>Provides the path of a replica for non-deterministic sites. Will be assigned to get path by the init method if necessary.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <p>list of DIDs</p> required <p>Returns:</p> Type Description <p>dict with scope:name as keys and PFN as value (in case of errors the Rucio exception si assigned to the key)</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol._get_path","title":"<code>_get_path(scope, name)</code>","text":"<p>Transforms the logical file name into a PFN. Suitable for sites implementing the RUCIO naming convention. This implementation is only invoked if the RSE is deterministic.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <p>scope</p> required <code>name</code> <p>filename</p> required <p>Returns:</p> Type Description <p>RSE specific URI of the physical file</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol._get_path_nondeterministic_server","title":"<code>_get_path_nondeterministic_server(scope, name)</code>","text":"<p>Provides the path of a replica for non-deterministic sites. Will be assigned to get path by the init method if necessary.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.parse_pfns","title":"<code>parse_pfns(pfns)</code>","text":"<p>Splits the given PFN into the parts known by the protocol. It is also checked if the provided protocol supports the given PFNs.</p> <p>Parameters:</p> Name Type Description Default <code>pfns</code> <p>a list of a fully qualified PFNs</p> required <p>Returns:</p> Type Description <p>dic with PFN as key and a dict with path and name as value</p> <p>Raises:</p> Type Description <code>RSEFileNameNotSupported</code> <p>if the provided PFN doesn't match with the protocol settings</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.exists","title":"<code>exists(path)</code>  <code>abstractmethod</code>","text":"<p>Checks if the requested file is known by the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>True if the file exists, False if it doesn't</p> <p>Raises:</p> Type Description <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.connect","title":"<code>connect()</code>  <code>abstractmethod</code>","text":"<p>Establishes the actual connection to the referred RSE.</p> <p>Raises:</p> Type Description <code>RSEAccessDenied</code> <p>if no connection could be established.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.close","title":"<code>close()</code>  <code>abstractmethod</code>","text":"<p>Closes the connection to RSE.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.get","title":"<code>get(path, dest, transfer_timeout=None)</code>  <code>abstractmethod</code>","text":"<p>Provides access to files stored inside connected the RSE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>Physical file name of requested file</p> required <code>dest</code> <p>Name and path of the files when stored at the client</p> required <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <code>None</code> <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.put","title":"<code>put(source, target, source_dir, transfer_timeout=None)</code>  <code>abstractmethod</code>","text":"<p>Allows to store files inside the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <p>path to the source file on the client file system</p> required <code>target</code> <p>path to the destination file on the storage</p> required <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> required <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <code>None</code> <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.delete","title":"<code>delete(path)</code>  <code>abstractmethod</code>","text":"<p>Deletes a file from the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>path to the to be deleted file</p> required <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.rename","title":"<code>rename(path, new_path)</code>  <code>abstractmethod</code>","text":"<p>Allows to rename a file stored inside the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>path to the current file on the storage</p> required <code>new_path</code> <p>path to the new file on the storage</p> required <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.get_space_usage","title":"<code>get_space_usage()</code>","text":"<p>Get RSE space usage information.</p> <p>Returns:</p> Type Description <p>a list with dict containing 'totalsize' and 'unusedsize'</p> <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p>"},{"location":"protocol.html#rucio.rse.protocols.protocol.RSEProtocol.stat","title":"<code>stat(path)</code>","text":"<p>Returns the stats of a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>path to file</p> required <p>Returns:</p> Type Description <p>a dict with two keys, filesize and adler32 of the file provided in path.</p> <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"rclone.html","title":"Rclone","text":""},{"location":"rclone.html#rucio.rse.protocols.rclone.Default","title":"<code>Default(protocol_attr, rse_settings, logger=logging.log)</code>","text":"<p>Implementing access to RSEs using the rclone protocol.</p> <p>Initializes the object with information about the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <p>Properties derived from the RSE Repository</p> required"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.setuphostname","title":"<code>setuphostname(protocols)</code>","text":"<p>Initializes the rclone object with information about protocols in the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>protocols</code> <p>Protocols in the RSE</p> required"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.path2pfn","title":"<code>path2pfn(path)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.exists","title":"<code>exists(pfn)</code>","text":"<p>Checks if the requested file is known by the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>True if the file exists, False if it doesn't</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.stat","title":"<code>stat(path)</code>","text":"<p>Returns the stats of a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>path to file</p> required <p>Returns:</p> Type Description <p>a dict with two keys, filesize and an element of GLOBALLY_SUPPORTED_CHECKSUMS.</p> <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.pfn2path","title":"<code>pfn2path(pfn)</code>","text":"<p>Returns the path of a file given the pfn, i.e. scheme, user and hostname are subtracted from the pfn.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>pfn of a file</p> required <p>Returns:</p> Type Description <p>path.</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.lfns2pfns","title":"<code>lfns2pfns(lfns)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.connect","title":"<code>connect()</code>","text":"<p>Establishes the actual connection to the referred RSE.</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.close","title":"<code>close()</code>","text":"<p>Closes the connection to RSE.</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.get","title":"<code>get(pfn, dest, transfer_timeout=None)</code>","text":"<p>Provides access to files stored inside connected the RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name of requested file</p> required <code>dest</code> <p>Name and path of the files when stored at the client</p> required <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <code>None</code>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.put","title":"<code>put(filename, target, source_dir, transfer_timeout=None)</code>","text":"<p>Allows to store files inside the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <p>path to the source file on the client file system</p> required <code>target</code> <p>path to the destination file on the storage</p> required <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> required <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <code>None</code> <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.delete","title":"<code>delete(pfn)</code>","text":"<p>Deletes a file from the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"rclone.html#rucio.rse.protocols.rclone.Default.rename","title":"<code>rename(pfn, new_pfn)</code>","text":"<p>Allows to rename a file stored inside the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Current physical file name</p> required <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"rfio.html","title":"Rfio","text":"<p>RFIO protocol</p>"},{"location":"rfio.html#rucio.rse.protocols.rfio.Default","title":"<code>Default(protocol_attr, rse_settings, logger=logging.log)</code>","text":"<p>Implementing access to RSEs using the RFIO protocol.</p>"},{"location":"rfio.html#rucio.rse.protocols.rfio.Default.connect","title":"<code>connect(credentials)</code>","text":"<p>Establishes the actual connection to the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>credentials</code> <p>needed to establish a connection with the storage.</p> required <p>Raises:</p> Type Description <code>RSEAccessDenied</code> <p>if no connection could be established.</p>"},{"location":"rfio.html#rucio.rse.protocols.rfio.Default.path2pfn","title":"<code>path2pfn(path)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"rfio.html#rucio.rse.protocols.rfio.Default.exists","title":"<code>exists(path)</code>","text":"<p>Checks if the requested file is known by the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>True if the file exists, False if it doesn't</p> <p>Raises:</p> Type Description <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"rfio.html#rucio.rse.protocols.rfio.Default.close","title":"<code>close()</code>","text":"<p>Closes the connection to RSE.</p>"},{"location":"rfio.html#rucio.rse.protocols.rfio.Default.put","title":"<code>put(source, target, source_dir, transfer_timeout=None)</code>","text":"<p>Allows to store files inside the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <p>path to the source file on the client file system</p> required <code>target</code> <p>path to the destination file on the storage</p> required <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> required <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <code>None</code> <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"rfio.html#rucio.rse.protocols.rfio.Default.mkdir","title":"<code>mkdir(directory)</code>","text":"<p>Create new directory.</p>"},{"location":"rfio.html#rucio.rse.protocols.rfio.Default.split_pfn","title":"<code>split_pfn(pfn)</code>","text":"<p>Splits the given PFN into the parts known by the protocol. During parsing the PFN is also checked for validity on the given RSE with the given protocol.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>a fully qualified PFN</p> required <p>Returns:</p> Type Description <p>a dict containing all known parts of the PFN for the protocol e.g. scheme, hostname, port, prefix, path, filename</p> <p>Raises:</p> Type Description <code>RSEFileNameNotSupported</code> <p>if the provided PFN doesn't match with the protocol settings</p>"},{"location":"srm.html","title":"Srm","text":""},{"location":"srm.html#rucio.rse.protocols.srm.Default","title":"<code>Default(protocol_attr, rse_settings, logger=logging.log)</code>","text":"<p>Implementing access to RSEs using the SRM protocol.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.lfns2pfns","title":"<code>lfns2pfns(lfns)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.parse_pfns","title":"<code>parse_pfns(pfns)</code>","text":"<p>Splits the given PFN into the parts known by the protocol. During parsing the PFN is also checked for validity on the given RSE with the given protocol.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>a fully qualified PFN</p> required <p>Returns:</p> Type Description <p>a dict containing all known parts of the PFN for the protocol e.g. scheme, path, filename</p> <p>Raises:</p> Type Description <code>RSEFileNameNotSupported</code> <p>if the provided PFN doesn't match with the protocol settings</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.path2pfn","title":"<code>path2pfn(path)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.connect","title":"<code>connect()</code>","text":"<p>Establishes the actual connection to the referred RSE. As a quick and dirty implementation we just use this method to check if the lcg tools are available. If we decide to use gfal, init should be done here.</p> <p>Raises:</p> Type Description <code>RSEAccessDenied</code> <p>Cannot connect.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.get","title":"<code>get(path, dest, transfer_timeout=None)</code>","text":"<p>Provides access to files stored inside connected the RSE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>Physical file name of requested file</p> required <code>dest</code> <p>Name and path of the files when stored at the client</p> required <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <code>None</code> <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.put","title":"<code>put(source, target, source_dir, transfer_timeout=None)</code>","text":"<p>Allows to store files inside the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <p>path to the source file on the client file system</p> required <code>target</code> <p>path to the destination file on the storage</p> required <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> required <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <code>None</code> <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.delete","title":"<code>delete(path)</code>","text":"<p>Deletes a file from the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>path to the to be deleted file</p> required <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.rename","title":"<code>rename(path, new_path)</code>","text":"<p>Allows to rename a file stored inside the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>path to the current file on the storage</p> required <code>new_path</code> <p>path to the new file on the storage</p> required <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.exists","title":"<code>exists(path)</code>","text":"<p>Checks if the requested file is known by the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>True if the file exists, False if it doesn't</p> <p>Raises:</p> Type Description <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.__parse_srm_error__","title":"<code>__parse_srm_error__(err_code, out, err)</code>","text":"<p>Parse the error message to return error code.</p>"},{"location":"srm.html#rucio.rse.protocols.srm.Default.close","title":"<code>close()</code>","text":"<p>Closes the connection to RSE.</p>"},{"location":"ssh.html","title":"Ssh","text":""},{"location":"ssh.html#rucio.rse.protocols.ssh.Default","title":"<code>Default(protocol_attr, rse_settings, logger=logging.log)</code>","text":"<p>Implementing access to RSEs using the SSH protocol.</p> <p>Initializes the object with information about the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <p>Properties derived from the RSE Repository</p> required"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.path2pfn","title":"<code>path2pfn(path)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.exists","title":"<code>exists(pfn)</code>","text":"<p>Checks if the requested file is known by the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>True if the file exists, False if it doesn't</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.stat","title":"<code>stat(path)</code>","text":"<p>Returns the stats of a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>path to file</p> required <p>Returns:</p> Type Description <p>a dict with two keys, filesize and an element of GLOBALLY_SUPPORTED_CHECKSUMS.</p> <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.pfn2path","title":"<code>pfn2path(pfn)</code>","text":"<p>Returns the path of a file given the pfn, i.e. scheme, user and hostname are subtracted from the pfn.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>pfn of a file</p> required <p>Returns:</p> Type Description <p>path.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.lfns2pfns","title":"<code>lfns2pfns(lfns)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.connect","title":"<code>connect()</code>","text":"<p>Establishes the actual connection to the referred RSE.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.close","title":"<code>close()</code>","text":"<p>Closes the connection to RSE.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.get","title":"<code>get(pfn, dest, transfer_timeout=None)</code>","text":"<p>Provides access to files stored inside connected the RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name of requested file</p> required <code>dest</code> <p>Name and path of the files when stored at the client</p> required <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <code>None</code>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.put","title":"<code>put(filename, target, source_dir, transfer_timeout=None)</code>","text":"<p>Allows to store files inside the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <p>path to the source file on the client file system</p> required <code>target</code> <p>path to the destination file on the storage</p> required <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> required <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <code>None</code> <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.delete","title":"<code>delete(pfn)</code>","text":"<p>Deletes a file from the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Default.rename","title":"<code>rename(pfn, new_pfn)</code>","text":"<p>Allows to rename a file stored inside the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Current physical file name</p> required <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Rsync","title":"<code>Rsync(protocol_attr, rse_settings, logger=logging.log)</code>","text":"<p>Implementing access to RSEs using the ssh.Rsync implementation.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Rsync.stat","title":"<code>stat(path)</code>","text":"<p>Returns the stats of a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>path to file</p> required <p>Returns:</p> Type Description <p>a dict with two keys, filesize and an element of GLOBALLY_SUPPORTED_CHECKSUMS.</p> <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Rsync.connect","title":"<code>connect()</code>","text":"<p>Establishes the actual connection to the referred RSE.</p>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Rsync.get","title":"<code>get(pfn, dest, transfer_timeout=None)</code>","text":"<p>Provides access to files stored inside connected the RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name of requested file</p> required <code>dest</code> <p>Name and path of the files when stored at the client</p> required <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <code>None</code>"},{"location":"ssh.html#rucio.rse.protocols.ssh.Rsync.put","title":"<code>put(filename, target, source_dir, transfer_timeout=None)</code>","text":"<p>Allows to store files inside the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <p>path to the source file on the client file system</p> required <code>target</code> <p>path to the destination file on the storage</p> required <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> required <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <code>None</code> <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"storm.html","title":"Storm","text":""},{"location":"storm.html#rucio.rse.protocols.storm.Default","title":"<code>Default(protocol_attr, rse_settings, logger=None)</code>","text":"<p>Implementing access to RSEs using the local filesystem.</p> <p>Initializes the object with information about the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <p>Properties derived from the RSE Repository</p> required"},{"location":"storm.html#rucio.rse.protocols.storm.Default.lfns2pfns","title":"<code>lfns2pfns(lfns)</code>","text":"<p>Create fake storm:// path. Will be resolved at the get() stage later.</p>"},{"location":"storm.html#rucio.rse.protocols.storm.Default.path2pfn","title":"<code>path2pfn(path)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"storm.html#rucio.rse.protocols.storm.Default.exists","title":"<code>exists(pfn)</code>","text":"<p>Checks if the requested file is known by the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>True if the file exists, False if it doesn't</p>"},{"location":"storm.html#rucio.rse.protocols.storm.Default.connect","title":"<code>connect()</code>","text":"<p>Establishes the actual connection to the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>credentials</code> <p>Provide all necessary information to establish a connection to the referred storage system. Some is loaded from the repository inside the RSE class and some must be provided specific for the SFTP protocol like username, password, private_key, private_key_pass, port. For details about possible additional parameters and details about their usage see the pysftp.Connection() documentation. NOTE: the host parametrer is overwritten with the value provided by the repository</p> required"},{"location":"storm.html#rucio.rse.protocols.storm.Default.close","title":"<code>close()</code>","text":"<p>Closes the connection to RSE.</p>"},{"location":"storm.html#rucio.rse.protocols.storm.Default.get","title":"<code>get(pfn, dest, transfer_timeout=None)</code>","text":"<p>Provides access to files stored inside connected the RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name of requested file</p> required <code>dest</code> <p>Name and path of the files when stored at the client</p> required"},{"location":"storm.html#rucio.rse.protocols.storm.Default.put","title":"<code>put(source, target, source_dir=None, transfer_timeout=None)</code>","text":"<p>Allows to store files inside the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <p>Physical file name</p> required <code>target</code> <p>Name of the file on the storage system e.g. with prefixed scope</p> required"},{"location":"storm.html#rucio.rse.protocols.storm.Default.delete","title":"<code>delete(pfn)</code>","text":"<p>Deletes a file from the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required"},{"location":"storm.html#rucio.rse.protocols.storm.Default.rename","title":"<code>rename(pfn, new_pfn)</code>","text":"<p>Allows to rename a file stored inside the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Current physical file name</p> required"},{"location":"webdav.html","title":"Webdav","text":""},{"location":"webdav.html#rucio.rse.protocols.webdav.TLSHTTPAdapter","title":"<code>TLSHTTPAdapter</code>","text":"<p>Class to force the SSL protocol to latest TLS</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.UploadInChunks","title":"<code>UploadInChunks(filename, chunksize, progressbar=False)</code>","text":"<p>Class to upload by chunks.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.IterableToFileAdapter","title":"<code>IterableToFileAdapter(iterable)</code>","text":"<p>Class IterableToFileAdapter</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav._PropfindFile","title":"<code>_PropfindFile(href, size)</code>  <code>dataclass</code>","text":"<p>Contains the properties of one file from a PROPFIND response.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav._PropfindFile.from_xml_node","title":"<code>from_xml_node(node)</code>  <code>classmethod</code>","text":"<p>Extract file properties from a <code>&lt;{DAV:}response&gt;</code> node.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav._PropfindResponse","title":"<code>_PropfindResponse(files)</code>  <code>dataclass</code>","text":"<p>Contains all the files from a PROPFIND response.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav._PropfindResponse.parse","title":"<code>parse(document)</code>  <code>classmethod</code>","text":"<p>Parses the XML document of a WebDAV PROPFIND response.</p> <p>The PROPFIND response is described in RFC 4918. This method expects the document root to be a node with tag <code>{DAV:}multistatus</code>.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>str</code> <p>XML document to parse.</p> required <p>Returns:</p> Type Description <p>The parsed response.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the XML document couldn't be parsed.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default","title":"<code>Default(protocol_attr, rse_settings, logger=logging.log)</code>","text":"<p>Implementing access to RSEs using the webDAV protocol.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.connect","title":"<code>connect(credentials=None)</code>","text":"<p>Establishes the actual connection to the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>credentials</code> <code>Optional[dict[str, Any]]</code> <p>Provides information to establish a connection to the referred storage system. For WebDAV connections these are ca_cert, cert, auth_type, timeout</p> <code>None</code>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.path2pfn","title":"<code>path2pfn(path)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.exists","title":"<code>exists(pfn)</code>","text":"<p>Checks if the requested file is known by the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>True if the file exists, False if it doesn't</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.get","title":"<code>get(pfn, dest='.', transfer_timeout=None)</code>","text":"<p>Provides access to files stored inside connected the RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name of requested file</p> required <code>dest</code> <p>Name and path of the files when stored at the client</p> <code>'.'</code> <code>transfer_timeout</code> <p>Transfer timeout (in seconds)</p> <code>None</code>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.put","title":"<code>put(source, target, source_dir=None, transfer_timeout=None, progressbar=False)</code>","text":"<p>Allows to store files inside the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <p>Physical file name</p> required <code>target</code> <p>Name of the file on the storage system e.g. with prefixed scope</p> required"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.rename","title":"<code>rename(pfn, new_pfn)</code>","text":"<p>Allows to rename a file stored inside the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Current physical file name</p> required"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.delete","title":"<code>delete(pfn)</code>","text":"<p>Deletes a file from the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.mkdir","title":"<code>mkdir(directory)</code>","text":"<p>Internal method to create directories</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <p>Name of the directory that needs to be created</p> required"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.ls","title":"<code>ls(filename)</code>","text":"<p>Internal method to list files/directories</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <p>Name of the directory that needs to be created</p> required"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.stat","title":"<code>stat(path)</code>","text":"<p>Returns the stats of a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>path to file</p> required <p>Returns:</p> Type Description <p>a dict with filesize of the file provided in path as a key.</p> <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p> <code>RSEAccessDenied</code> <p>in case of permission issue.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.Default.get_space_usage","title":"<code>get_space_usage()</code>","text":"<p>Get RSE space usage information.</p> <p>Returns:</p> Type Description <p>a list with dict containing 'totalsize' and 'unusedsize'</p> <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p>"},{"location":"webdav.html#rucio.rse.protocols.webdav.NoRename","title":"<code>NoRename(protocol_attr, rse_settings, logger=logging.log)</code>","text":"<p>Implementing access to RSEs using the WebDAV protocol but without renaming files on upload/download. Necessary for some storage endpoints.</p> <p>Initializes the object with information about the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>protocol_attr</code> <p>Properties of the requested protocol.</p> required <code>rse_settings</code> <p>The RSE settings.</p> required <code>logger</code> <p>Optional decorated logger that can be passed from the calling daemons or servers.</p> <code>log</code>"},{"location":"webdav.html#rucio.rse.protocols.webdav.NoRename.rename","title":"<code>rename(pfn, new_pfn)</code>","text":"<p>Allows to rename a file stored inside the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Current physical file name</p> required"},{"location":"xrootd.html","title":"Xrootd","text":""},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default","title":"<code>Default(protocol_attr, rse_settings, logger=logging.log)</code>","text":"<p>Implementing access to RSEs using the XRootD protocol using GSI authentication.</p> <p>Initializes the object with information about the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <p>Properties derived from the RSE Repository</p> required"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.path2pfn","title":"<code>path2pfn(path)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.exists","title":"<code>exists(pfn)</code>","text":"<p>Checks if the requested file is known by the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required <p>Returns:</p> Type Description <p>True if the file exists, False if it doesn't</p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.stat","title":"<code>stat(path)</code>","text":"<p>Returns the stats of a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>path to file</p> required <p>Returns:</p> Type Description <p>a dict with two keys, filesize and an element of GLOBALLY_SUPPORTED_CHECKSUMS.</p> <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.pfn2path","title":"<code>pfn2path(pfn)</code>","text":"<p>Returns the path of a file given the pfn, i.e. scheme and hostname are subtracted from the pfn.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>pfn of a file</p> required <p>Returns:</p> Type Description <p>path.</p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.lfns2pfns","title":"<code>lfns2pfns(lfns)</code>","text":"<p>Returns a fully qualified PFN for the file referred by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>The path to the file.</p> required <p>Returns:</p> Type Description <p>Fully qualified PFN.</p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.connect","title":"<code>connect()</code>","text":"<p>Establishes the actual connection to the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>credentials</code> <p>Provides information to establish a connection to the referred storage system. For S3 connections these are access_key, secretkey, host_base, host_bucket, progress_meter and skip_existing.</p> required"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.close","title":"<code>close()</code>","text":"<p>Closes the connection to RSE.</p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.get","title":"<code>get(pfn, dest, transfer_timeout=None)</code>","text":"<p>Provides access to files stored inside connected the RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name of requested file</p> required <code>dest</code> <p>Name and path of the files when stored at the client</p> required <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <code>None</code>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.put","title":"<code>put(filename, target, source_dir, transfer_timeout=None)</code>","text":"<p>Allows to store files inside the referred RSE.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <p>path to the source file on the client file system</p> required <code>target</code> <p>path to the destination file on the storage</p> required <code>source_dir</code> <p>Path where the to be transferred files are stored in the local file system</p> required <code>transfer_timeout</code> <p>Transfer timeout (in seconds) - dummy</p> <code>None</code> <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.delete","title":"<code>delete(pfn)</code>","text":"<p>Deletes a file from the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Physical file name</p> required <p>Raises:</p> Type Description <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"},{"location":"xrootd.html#rucio.rse.protocols.xrootd.Default.rename","title":"<code>rename(pfn, new_pfn)</code>","text":"<p>Allows to rename a file stored inside the connected RSE.</p> <p>Parameters:</p> Name Type Description Default <code>pfn</code> <p>Current physical file name</p> required <p>Raises:</p> Type Description <code>DestinationNotAccessible</code> <p>if the destination storage was not accessible.</p> <code>ServiceUnavailable</code> <p>if some generic error occurred in the library.</p> <code>SourceNotFound</code> <p>if the source file was not found on the referred storage.</p>"}]}