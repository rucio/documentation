"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[57912],{45729:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"client_api/uploadclient","title":"UploadClient","description":"\\\\\\\\init\\\\\\\\","source":"@site/../docs/client_api/uploadclient.md","sourceDirName":"client_api","slug":"/client_api/uploadclient","permalink":"/documentation/client_api/uploadclient","draft":false,"unlisted":false,"editUrl":"https://github.com/rucio/documentation/tree/main/docs/../docs/client_api/uploadclient.md","tags":[],"version":"current","frontMatter":{"title":"UploadClient"},"sidebar":"docs","previous":{"title":"TouchClient","permalink":"/documentation/client_api/touchclient"},"next":{"title":"Developing with Rucio","permalink":"/documentation/user/developing_with_rucio"}}');var o=t(74848),i=t(28453);const l={title:"UploadClient"},s=void 0,d={},c=[{value:"__init__",id:"__init__",level:2},{value:"upload",id:"upload",level:2},{value:"preferred_impl",id:"preferred_impl",level:2}];function a(e){const n={code:"code",h2:"h2",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"__init__",children:"__init__"}),"\n",(0,o.jsxs)("span",{style:{"white-space":"pre"},children:[(0,o.jsx)(n.p,{children:"Initialises the basic settings for an UploadClient object"}),(0,o.jsx)("table",{style:{border:"none"},children:(0,o.jsx)("tbody",{children:(0,o.jsxs)("tr",{style:{border:"none"},children:[(0,o.jsx)("td",{style:{border:"none",backgroundColor:"var(--ifm-background-color)",verticalAlign:"top"},children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Arguments"}),":"]})}),(0,o.jsxs)("td",{style:{border:"none",backgroundColor:"var(--ifm-background-color)",verticalAlign:"top"},children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"_client"}),": - Optional: rucio.client.client.Client object. If None, a new object will be created."]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"logger"}),": - Optional: logging.Logger object. If None, default logger will be used."]})]})]})})})]}),"\n",(0,o.jsx)(n.h2,{id:"upload",children:"upload"}),"\n",(0,o.jsx)("span",{style:{"white-space":"pre"},children:(0,o.jsx)("table",{style:{border:"none"},children:(0,o.jsxs)("tbody",{children:[(0,o.jsxs)("tr",{style:{border:"none"},children:[(0,o.jsx)("td",{style:{border:"none",backgroundColor:"var(--ifm-background-color)",verticalAlign:"top"},children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Arguments"}),":"]})}),(0,o.jsxs)("td",{style:{border:"none",backgroundColor:"var(--ifm-background-color)",verticalAlign:"top"},children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"items"}),": List of dictionaries. Each dictionary describing a file to upload. Keys:\npath                  - path of the file that will be uploaded\nrse                   - rse expression/name (e.g. 'CERN-PROD_DATADISK') where to upload the file\ndid_scope             - Optional: custom did scope (Default: user.<account>)\ndid_name              - Optional: custom did name (Default: name of the file)\ndataset_scope         - Optional: custom dataset scope\ndataset_name          - Optional: custom dataset name\ndataset_meta          - Optional: custom metadata for dataset\nimpl                  - Optional: name of the protocol implementation to be used to upload this item.\nforce_scheme          - Optional: force a specific scheme (if PFN upload this will be overwritten) (Default: None)\npfn                   - Optional: use a given PFN (this sets no_register to True, and no_register becomes mandatory)\nno_register           - Optional: if True, the file will not be registered in the rucio catalogue\nregister_after_upload - Optional: if True, the file will be registered after successful upload\nlifetime              - Optional: the lifetime of the file after it was uploaded\ntransfer_timeout      - Optional: time after the upload will be aborted\nguid                  - Optional: guid of the file\nrecursive             - Optional: if set, parses the folder structure recursively into collections"]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"summary_file_path"}),": Optional: a path where a summary in form of a json file will be stored"]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"traces_copy_out"}),": reference to an external list, where the traces should be uploaded"]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"ignore_availability"}),": ignore the availability of a RSE"]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"activity"}),": the activity set to the rule if no dataset is specified"]})]})]}),(0,o.jsxs)("tr",{style:{border:"none"},children:[(0,o.jsx)("td",{style:{border:"none",backgroundColor:"var(--ifm-background-color)",verticalAlign:"top"},children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Raises"}),":"]})}),(0,o.jsxs)("td",{style:{border:"none",backgroundColor:"var(--ifm-background-color)",verticalAlign:"top"},children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"InputValidationError"}),": if any input arguments are in a wrong format"]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"RSEWriteBlocked"}),": if a given RSE is not available for writing"]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"NoFilesUploaded"}),": if no files were successfully uploaded"]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"NotAllFilesUploaded"}),": if not all files were successfully uploaded"]})]})]}),(0,o.jsxs)("tr",{style:{border:"none"},children:[(0,o.jsx)("td",{style:{border:"none",backgroundColor:"var(--ifm-background-color)",verticalAlign:"top"},children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Returns"}),":"]})}),(0,o.jsx)("td",{style:{border:"none",backgroundColor:"var(--ifm-background-color)",verticalAlign:"top"},children:(0,o.jsx)(n.p,{children:"0 on success"})})]})]})})}),"\n",(0,o.jsx)(n.h2,{id:"preferred_impl",children:"preferred_impl"}),"\n",(0,o.jsxs)("span",{style:{"white-space":"pre"},children:[(0,o.jsx)(n.p,{children:"Finds the optimum protocol impl preferred by the client and"}),(0,o.jsx)(n.p,{children:"supported by the remote RSE."}),(0,o.jsx)("table",{style:{border:"none"},children:(0,o.jsxs)("tbody",{children:[(0,o.jsxs)("tr",{style:{border:"none"},children:[(0,o.jsx)("td",{style:{border:"none",backgroundColor:"var(--ifm-background-color)",verticalAlign:"top"},children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Arguments"}),":"]})}),(0,o.jsxs)("td",{style:{border:"none",backgroundColor:"var(--ifm-background-color)",verticalAlign:"top"},children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"rse_settings"}),": dictionary containing the RSE settings"]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"domain"}),": The network domain, either 'wan' (default) or 'lan'"]})]})]}),(0,o.jsxs)("tr",{style:{border:"none"},children:[(0,o.jsx)("td",{style:{border:"none",backgroundColor:"var(--ifm-background-color)",verticalAlign:"top"},children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Raises"}),":"]})}),(0,o.jsx)("td",{style:{border:"none",backgroundColor:"var(--ifm-background-color)",verticalAlign:"top"},children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"RucioException(msg)"}),": general exception with msg for more details."]})})]})]})})]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var r=t(96540);const o={},i=r.createContext(o);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);