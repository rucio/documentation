"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[33304],{8149:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"bin/rucio","title":"rucio","description":"","source":"@site/../docs/bin/rucio.md","sourceDirName":"bin","slug":"/bin/rucio","permalink":"/documentation/bin/rucio","draft":false,"unlisted":false,"editUrl":"https://github.com/rucio/documentation/tree/main/docs/../docs/bin/rucio.md","tags":[],"version":"current","lastUpdatedBy":null,"lastUpdatedAt":null,"frontMatter":{"title":"rucio"},"sidebar":"docs","previous":{"title":"rucio-undertaker","permalink":"/documentation/bin/rucio-undertaker"},"next":{"title":"Dependency management","permalink":"/documentation/developer/dependency_management"}}');var i=t(74848),s=t(28453);const r={title:"rucio"},c=void 0,a={},u=[];function d(e){const n={code:"code",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Usage: rucio [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --account, --issuer TEXT        Rucio account to use.\n  --auth-host TEXT                The Rucio Authentication host\n  -S, --auth-strategy [userpass|x509|x509_proxy|gss|ssh|saml|oidc]\n                                  Authentication strategy\n  --ca-certificate TEXT           CA certificate to verify peer against (SSL)\n  --certificate TEXT              Client certificate file\n  --client-key TEXT               Client key for x509 Authentication\n  --config TEXT                   The Rucio configuration file to use\n  -H, --host TEXT                 The Rucio API host\n  --oidc-user TEXT                OIDC username\n  --oidc-password TEXT            OIDC password\n  --oidc-audience TEXT            Defines which audience are tokens requested\n                                  for.\n  --oidc-auto                     If not specified, username and password\n                                  credentials are not required and users will\n                                  be given a URL to use in their browser. If\n                                  specified, the users explicitly trust Rucio\n                                  with their IdP credentials\"\n  --oidc-issuer TEXT              Defines which Identity Provider is going to\n                                  be used. The issuer string must correspond\n                                  to the keys configured in the\n                                  /etc/idpsecrets.json auth server\n                                  configuration file\")\n  --oidc-polling                  If not specified, user will be asked to\n                                  enter a code returned by the browser to the\n                                  command line. If --polling is set, Rucio\n                                  Client should get the token without any\n                                  further interaction of the user. This option\n                                  is active only if --auto is *not* specified\n  --oidc-refresh-lifetime TEXT    Max lifetime in hours for this access token;\n                                  the token will be refreshed by an\n                                  asynchronous Rucio daemon. If not specified,\n                                  refresh will be stopped after 4 days. This\n                                  option is effective only if --oidc-scope\n                                  includes offline_access scope for a refresh\n                                  token to be granted to Rucio\n  --oidc-scope TEXT               Defines which (OIDC) information user will\n                                  share with Rucio. Rucio requires at least\n                                  -sc='openid profile'. To request refresh\n                                  token for Rucio, scope must include 'openid\n                                  offline_access' and there must be no active\n                                  access token saved on the side of the\n                                  currently used Rucio Client,\n  -T, --timeout FLOAT             Set all timeout values to seconds\n  -U, --user-agent TEXT           Rucio User Agent\n  -u, --user TEXT                 Username for userpass\n  --password TEXT                 Password for userpass\n  --vo TEXT                       VO to authenticate at. Only used in multi-VO\n                                  mode\n  -v, --verbose                   Print more verbose output\n  --version                       Show the version and exit.\n  -h, --help                      Show this message and exit.\n\nCommands:\n  ping                Ping Rucio server\n  test-server         Test client against the server\n  whoami              Get information about account whose token is used\n  account             Methods to add or change accounts for users,...\n  config              Modify the configuration table\n  did                 Manage Data Identifiers - the source data objects\n  download            Download DID(s) (in the form of scope:name) to a...\n  lifetime-exception  Interact with the lifetime exception model\n  replica             Manage replicas - DIDs with locations on RSEs\n  rse                 Manage Rucio Storage Elements (RSEs)\n  rule                View and define rules for creating replicas of DIDs\n  scope               Interact with scopes - a logical grouping of DIDs\n  subscription        The methods for automated and regular processing of...\n  upload              Upload file(s) to a Rucio RSE\n"})})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var o=t(96540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);