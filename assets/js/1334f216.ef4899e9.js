"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8695],{25725:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>t,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"bin/rucio-necromancer","title":"rucio-necromancer","description":"","source":"@site/../docs/bin/rucio-necromancer.md","sourceDirName":"bin","slug":"/bin/rucio-necromancer","permalink":"/documentation/bin/rucio-necromancer","draft":false,"unlisted":false,"editUrl":"https://github.com/rucio/documentation/tree/main/docs/../docs/bin/rucio-necromancer.md","tags":[],"version":"current","frontMatter":{"title":"rucio-necromancer"},"sidebar":"docs","previous":{"title":"rucio-minos","permalink":"/documentation/bin/rucio-minos"},"next":{"title":"rucio-oauth-manager","permalink":"/documentation/bin/rucio-oauth-manager"}}');var c=o(74848),i=o(28453);const t={title:"rucio-necromancer"},a=void 0,l={},s=[];function u(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"usage: rucio-necromancer [-h] [--run-once] [--threads THREADS] [--bulk BULK]\n                         [--sleep-time SLEEP_TIME]\n\nThe Necromancer daemon is responsible for managing bad replicas. If a replica that got declared bad has other replicas, it will try to recover it by requesting a new transfer. If there are no replicas anymore, then the file gets marked as lost.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --run-once            Runs one loop iteration\n  --threads THREADS     Concurrency control: number of threads\n  --bulk BULK           Bulk control: number of requests per cycle\n  --sleep-time SLEEP_TIME\n                        Concurrency control: thread sleep time after each\n                        chunk of work\n\nLost replica:\nIn this example the file gets uploaded and will only have this replica as there are no replication rules. If it gets declared bad, there will be no replica to recover from.\nTherefore the replica gets marked as lost.\n\nUpload a file::\n\n  $ rucio upload --scope mock --rse MOCK --name file filename.txt\n\nCheck replicas::\n\n  $ rucio list-file-replicas mock:file\n  +---------+--------+------------+-----------+---------------------------------------------------------+\n  | SCOPE   | NAME   | FILESIZE   |   ADLER32 | RSE: REPLICA                                            |\n  |---------+--------+------------+-----------+---------------------------------------------------------|\n  | mock    | file   | 149.000 B  |    948240 | MOCK: file://localhost:0/tmp/rucio_rse/mock/fb/d1/file  |\n  +---------+--------+------------+-----------+---------------------------------------------------------+\n\nDeclare it as bad::\n\n  $ rucio-admin replicas declare-bad file://localhost:0/tmp/rucio_rse/mock/fb/d1/file --reason 'bad'\n\nRun the daemon::\n\n  $ rucio-necromancer --run-once\n\nCheck replicas again::\n\n  $ rucio list-file-replicas mock:file\n  +---------+--------+------------+-----------+----------------+\n  | SCOPE   | NAME   | FILESIZE   | ADLER32   | RSE: REPLICA   |\n  |---------+--------+------------+-----------+----------------|\n  +---------+--------+------------+-----------+----------------+\n\nBad replica:\nIn this example the file gets uploaded and will have two replicas. If it gets declared bad, then the daemon will try to recover it from the second replica.\n\nUpload a file and replicate it::\n\n  $ rucio upload --scope mock --rse MOCK filename.txt\n  $ rucio add-rule mock:file 1 MOCK2\n  $ rucio-conveyor-submitter --run-once\n\nCheck replicas::\n\n  $ rucio list-file-replicas mock:file\n  +---------+--------+------------+-----------+---------------------------------------------------------+\n  | SCOPE   | NAME   | FILESIZE   |   ADLER32 | RSE: REPLICA                                            |\n  |---------+--------+------------+-----------+---------------------------------------------------------|\n  | mock    | file   | 149.000 B  |    948240 | MOCK: file://localhost:0/tmp/rucio_rse/mock/fb/d1/file  |\n  |---------+--------+------------+-----------+---------------------------------------------------------|\n  | mock    | file   | 149.000 B  |    948240 | MOCK2: file://localhost:1/tmp/rucio_rse/mock/fb/d1/file |\n  +---------+--------+------------+-----------+---------------------------------------------------------+\n\nDeclare one replica as bad::\n\n  $ rucio-admin replicas declare-bad file://localhost:1/tmp/rucio_rse/mock/fb/d1/file --reason 'bad'\n\nRun the daemon::\n\n  $ rucio-necromancer --run-once\n\nCheck replicas again::\n\n  $ rucio list-file-replicas mock:file\n  +---------+--------+------------+-----------+---------------------------------------------------------+\n  | SCOPE   | NAME   | FILESIZE   |   ADLER32 | RSE: REPLICA                                            |\n  |---------+--------+------------+-----------+---------------------------------------------------------|\n  | mock    | file   | 149.000 B  |    948240 | MOCK: file://localhost:0/tmp/rucio_rse/mock/fb/d1/file  |\n  |---------+--------+------------+-----------+---------------------------------------------------------|\n  | mock    | file   | 149.000 B  |    948240 | MOCK2: file://localhost:1/tmp/rucio_rse/mock/fb/d1/file |\n  +---------+--------+------------+-----------+---------------------------------------------------------+\n"})})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(u,{...e})}):u(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>a});var r=o(96540);const c={},i=r.createContext(c);function t(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:t(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);