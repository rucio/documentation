"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8282],{15680:(e,n,r)=>{r.d(n,{xA:()=>p,yg:()=>d});var t=r(96540);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),u=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=u(e.components);return t.createElement(s.Provider,{value:n},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=u(r),f=o,d=l["".concat(s,".").concat(f)]||l[f]||m[f]||a;return r?t.createElement(d,i(i({ref:n},p),{},{components:r})):t.createElement(d,i({ref:n},p))}));function d(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[l]="string"==typeof e?e:o,i[1]=c;for(var u=2;u<a;u++)i[u]=r[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},16944:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>c,metadata:()=>u,toc:()=>l});var t=r(58168),o=r(98587),a=(r(96540),r(15680)),i=["components"],c={title:"rucio-oauth-manager"},s=void 0,u={unversionedId:"bin/rucio-oauth-manager",id:"bin/rucio-oauth-manager",title:"rucio-oauth-manager",description:"",source:"@site/../docs/bin/rucio-oauth-manager.md",sourceDirName:"bin",slug:"/bin/rucio-oauth-manager",permalink:"/documentation/bin/rucio-oauth-manager",draft:!1,editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/bin/rucio-oauth-manager.md",tags:[],version:"current",frontMatter:{title:"rucio-oauth-manager"},sidebar:"docs",previous:{title:"rucio-necromancer",permalink:"/documentation/bin/rucio-necromancer"},next:{title:"rucio-reaper",permalink:"/documentation/bin/rucio-reaper"}},p={},l=[],m={toc:l},f="wrapper";function d(e){var n=e.components,r=(0,o.A)(e,i);return(0,a.yg)(f,(0,t.A)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"usage: rucio-oauth-manager [-h] [--max-rows MAX_ROWS] [--loop-rate LOOP_RATE]\n                           [--run-once] [--threads THREADS]\n                           [--sleep-time SLEEP_TIME]\n\nOAuth Manager is a daemon which is responsible for: - deletion of expired\naccess tokens (in case there is a valid refresh token, expired access tokens\nwill be kept until refresh_token expires as well.) - deletion of expired OAuth\nsession parameters - refreshing access tokens via their refresh tokens. These\n3 actions run consequently one after another in a loop with a sleeptime of\n'looprate' seconds. The maximum number of DB rows (tokens, parameters, refresh\ntokens) on which the script will operate can be specified by 'maxrows'\nparameter.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --max-rows MAX_ROWS   Max number of DB rows to deal with per operation.\n  --loop-rate LOOP_RATE\n                        OBSOLETE, USE --sleep-time INSTEAD. The number of\n                        seconds the daemon will wait before running next loop\n                        of operations.\n  --run-once            One iteration only.\n  --threads THREADS     Concurrency control: total number of threads for this\n                        process\n  --sleep-time SLEEP_TIME\n                        The number of seconds the daemon will wait before\n                        running next loop of operations.\n")))}d.isMDXComponent=!0}}]);