"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9825],{15680:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>f});var r=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),u=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(a.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,f=m["".concat(a,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(f,s(s({ref:t},l),{},{components:n})):r.createElement(f,s({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=d;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c[m]="string"==typeof e?e:o,s[1]=c;for(var u=2;u<i;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4482:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>c,metadata:()=>u,toc:()=>m});var r=n(58168),o=n(98587),i=(n(96540),n(15680)),s=["components"],c={title:"rucio-conveyor-submitter"},a=void 0,u={unversionedId:"bin/rucio-conveyor-submitter",id:"bin/rucio-conveyor-submitter",title:"rucio-conveyor-submitter",description:"",source:"@site/../docs/bin/rucio-conveyor-submitter.md",sourceDirName:"bin",slug:"/bin/rucio-conveyor-submitter",permalink:"/documentation/bin/rucio-conveyor-submitter",draft:!1,editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/bin/rucio-conveyor-submitter.md",tags:[],version:"current",frontMatter:{title:"rucio-conveyor-submitter"},sidebar:"docs",previous:{title:"rucio-conveyor-stager",permalink:"/documentation/bin/rucio-conveyor-stager"},next:{title:"rucio-conveyor-throttler",permalink:"/documentation/bin/rucio-conveyor-throttler"}},l={},m=[],p={toc:m},d="wrapper";function f(e){var t=e.components,n=(0,o.A)(e,s);return(0,i.yg)(d,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"usage: rucio-conveyor-submitter [-h] [--run-once]\n                                [--total-threads TOTAL_THREADS] [--bulk BULK]\n                                [--group-bulk GROUP_BULK]\n                                [--group-policy GROUP_POLICY]\n                                [--source-strategy SOURCE_STRATEGY]\n                                [--exclude-rses EXCLUDE_RSES]\n                                [--include-rses INCLUDE_RSES]\n                                [--rses RSES [RSES ...]] [--vos VOS [VOS ...]]\n                                [--activities ACTIVITIES [ACTIVITIES ...]]\n                                [--exclude-activities EXCLUDE_ACTIVITIES [EXCLUDE_ACTIVITIES ...]]\n                                [--ignore-availability]\n                                [--sleep-time SLEEP_TIME]\n                                [--max-sources MAX_SOURCES]\n                                [--archive-timeout-override INTEGER_SECONDS]\n\nThe Conveyor-Submitter daemon is responsible for managing non-tape file transfers. It prepares transfer jobs and submits them to the transfertool.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --run-once            One iteration only\n  --total-threads TOTAL_THREADS\n                        Concurrency control: total number of threads per\n                        process\n  --bulk BULK           Bulk control: number of requests\n  --group-bulk GROUP_BULK\n                        Group control: number of requests per group\n  --group-policy GROUP_POLICY\n                        Group control: policy used to group. enum{rule, dest,\n                        src_dest, rule_src_dest, activity_dest,\n                        activity_src_dest}\n  --source-strategy SOURCE_STRATEGY\n                        Source strategy. Overload the strategy defined in\n                        config DB.\n  --exclude-rses EXCLUDE_RSES\n                        RSE expression to exclude\n  --include-rses INCLUDE_RSES\n                        RSE expression to include\n  --rses RSES [RSES ...]\n                        Explicit list of RSEs to include\n  --vos VOS [VOS ...]   Optional list of VOs to consider. Only used in multi-\n                        VO mode.\n  --activities ACTIVITIES [ACTIVITIES ...]\n                        Explicit list of activities to include\n  --exclude-activities EXCLUDE_ACTIVITIES [EXCLUDE_ACTIVITIES ...]\n                        Explicit list of activities to exclude\n  --ignore-availability\n                        If True, will also try to submit transfers having\n                        blocklisted RSEs as sources\n  --sleep-time SLEEP_TIME\n                        Seconds to sleep if few requests\n  --max-sources MAX_SOURCES\n                        Maximum source replicas per multi-source FTS job\n  --archive-timeout-override INTEGER_SECONDS\n                        Override the archive_timeout parameter for any\n                        transfers with it set (0 to unset)\n\nUpload a file and create a replication rule::\n\n  $ rucio upload --scope mock --rse MOCK --name file filename.txt\n  $ rucio add-rule mock:file 1 MOCK2\n  $ rucio-admin rse add-distance MOCK2 MOCK --distance 1\n\nThe rule should replicate the file from RSE MOCK to RSE MOCK2. Therefore a distance between these RSEs is needed.\n\nCheck transfer requests for the DID::\n\n    $ python\n    from rucio.db.sqla import session,models\n    session.get_session().query(models.Request).filter_by(scope='mock', name='file').first()\n    # {'request_type': TRANSFER, 'state': QUEUED', ...}\n\nA queued request was created which can be picked uped by the Conveyor-Submiter daemon.\n\nRun the daemon::\n\n  $ rucio-conveyor-submitter --run-once\n\nCheck again the transfer requests for the DID::\n\n    $ python\n    from rucio.db.sqla import session,models\n    session.get_session().query(models.Request).filter_by(scope='mock', name='file').first()\n    # {'request_type': TRANSFER, 'state': SUBMITTED', ...}\n\nA transfer request got created by executing the transfer. Depending on the transfer submission, the request state can be different. In this example the transfer got submitted successfully.\n\nWhen run in multi-VO mode, by default the daemon will run on RSEs from all VOs::\n\n  $ rucio-conveyor-submitter --run-once\n  2020-07-29 13:51:09,436 5784    INFO    This instance will work on VOs: def, abc, xyz, 123\n  2020-07-29 13:51:13,315 5784    INFO    RSE selection: automatic for relevant VOs\n  2020-07-29 13:51:13,316 5784    INFO    starting submitter threads\n\nBy using the ``--vos`` argument only the VO or VOs specified will be affected::\n\n  $ rucio-conveyor-submitter --run-once --vos abc xyz\n  2020-07-29 13:51:09,436 5784    INFO    This instance will work on VOs: abc, xyz\n  2020-07-29 13:51:13,315 5784    INFO    RSE selection: automatic for relevant VOs\n  2020-07-29 13:51:13,316 5784    INFO    starting submitter threads\n\nNote that attempting the use the ``--vos`` argument when in single-VO mode will have no affect::\n\n  $ rucio-conveyor-submitter --run-once --vos abc xyz\n  2020-07-29 13:39:37,263 5752    INFO    RSE selection: automatic\n  2020-07-29 13:39:37,264 5752    INFO    starting submitter threads\n    \n")))}f.isMDXComponent=!0}}]);