"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[68762],{69678:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"bin/rucio-atropos","title":"rucio-atropos","description":"","source":"@site/../docs/bin/rucio-atropos.md","sourceDirName":"bin","slug":"/bin/rucio-atropos","permalink":"/documentation/bin/rucio-atropos","draft":false,"unlisted":false,"editUrl":"https://github.com/rucio/documentation/tree/main/docs/../docs/bin/rucio-atropos.md","tags":[],"version":"current","frontMatter":{"title":"rucio-atropos"},"sidebar":"docs","previous":{"title":"rucio-admin","permalink":"/documentation/bin/rucio-admin"},"next":{"title":"rucio-auditor","permalink":"/documentation/bin/rucio-auditor"}}');var r=t(74848),i=t(28453);const s={title:"rucio-atropos"},c=void 0,a={},d=[];function u(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"usage: rucio-atropos [-h] [--run-once] [--dry-run] [--threads THREADS]\n                     [--grace-period GRACE_PERIOD] [--date-check DATE_CHECK]\n                     [--unlock-rules] [--spread-period SPREAD_PERIOD]\n                     [--purge-replicas] [--sleep-time SLEEP_TIME]\n\nThe Atropos Daemon is responsible for the deletion of rules with expired\neol_at (end the life at), according to the Lifetime Model. Once the rule is\ndeleted, the replicas covered by the rule will not be protected anymore and\neventually, will be deleted by another daemon.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --run-once            Runs one loop iteration\n  --dry-run             Dry run mode\n  --threads THREADS     Concurrency control: number of threads\n  --grace-period GRACE_PERIOD\n                        Grace period for the rules. In seconds !!!\n  --date-check DATE_CHECK\n                        Date when the lifetime model will be applied. Cannot\n                        be used for a date in the future if dry-run is not\n                        enabled\n  --unlock-rules        Automatically unlock affected rules\n  --spread-period SPREAD_PERIOD\n                        Set the rules to randomly expire over a period (in\n                        seconds). Uses a uniform distribution\n  --purge-replicas      Set the replicas to be deleted instead of secondarised\n  --sleep-time SLEEP_TIME\n                        Concurrency control: thread sleep time after each\n                        chunk of work\n"})})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var o=t(96540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);