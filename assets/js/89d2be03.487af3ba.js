"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2400],{15680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>g});var o=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=u(n),c=a,g=p["".concat(s,".").concat(c)]||p[c]||d[c]||r;return n?o.createElement(g,l(l({ref:t},m),{},{components:n})):o.createElement(g,l({ref:t},m))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<r;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},56503:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var o=n(58168),a=n(98587),r=(n(96540),n(15680)),l=["components"],i={id:"dev_style_guide",title:"Style Guide"},s=void 0,u={unversionedId:"developer/dev_style_guide",id:"developer/dev_style_guide",title:"Style Guide",description:"TL;DR  - Install the provided pre-commits, follow their recommendations",source:"@site/../docs/developer/style_guide.md",sourceDirName:"developer",slug:"/developer/dev_style_guide",permalink:"/documentation/developer/dev_style_guide",draft:!1,editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/developer/style_guide.md",tags:[],version:"current",lastUpdatedBy:"voetberg",lastUpdatedAt:1712590147,formattedLastUpdatedAt:"Apr 8, 2024",frontMatter:{id:"dev_style_guide",title:"Style Guide"},sidebar:"docs",previous:{title:"Type Annotation Guide",permalink:"/documentation/developer/type_annotation_guide"},next:{title:"Setting up a WebUI Developer Environment using Visual Studio Code",permalink:"/documentation/developer/webui/webui_frontend_vscode_dev_env"}},m={},p=[{value:"Imports",id:"imports",level:2},{value:"Examples:",id:"examples",level:4},{value:"Examples",id:"examples-1",level:3},{value:"Simple Select",id:"simple-select",level:4},{value:"Select with Join",id:"select-with-join",level:4},{value:"Multiple Conditions",id:"multiple-conditions",level:4},{value:"Checking existence/Single Value",id:"checking-existencesingle-value",level:4}],d={toc:p},c="wrapper";function g(e){var t=e.components,n=(0,a.A)(e,l);return(0,r.yg)(c,(0,o.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"TL;DR"),"  - Install the provided pre-commits, follow their recommendations"),(0,r.yg)("h1",{id:"general-style"},"General Style"),(0,r.yg)("p",null,"Rucio follows ",(0,r.yg)("a",{parentName:"p",href:"https://flake8.pycqa.org/en/latest/user/index.html"},"flake8")," style, (",(0,r.yg)("a",{parentName:"p",href:"https://github.com/rucio/rucio/blob/master/.flake8"},"with exclusions listed here"),").\nTo use them to lint your code, run: "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"python{version} -m pip install flake8 \nflake8 --extend-ignore {codes to ignore} /your/code/path\n")),(0,r.yg)("h2",{id:"imports"},"Imports"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Never import using ",(0,r.yg)("inlineCode",{parentName:"li"},"from x import *")),(0,r.yg)("li",{parentName:"ul"},"Order alphabetically, then seperated into sections for internal and external dependencies. Group internal imports at the end of the block, and group imports from the same external package."),(0,r.yg)("li",{parentName:"ul"},"Order modules such that ",(0,r.yg)("inlineCode",{parentName:"li"},"import {packageA}")," is before ",(0,r.yg)("inlineCode",{parentName:"li"},"from {packageB} import {Module}")),(0,r.yg)("li",{parentName:"ul"},"Do not import whole packages when single modules would suffice. "),(0,r.yg)("li",{parentName:"ul"},"Unused imports must be removed. "),(0,r.yg)("li",{parentName:"ul"},"When a large number of individual imports form a single package/module is required, group them together with ",(0,r.yg)("inlineCode",{parentName:"li"},"()")," and separate them on their own lines. "),(0,r.yg)("li",{parentName:"ul"},"When importing a module specifically for type checking (e.g. a core module that may not be included in every distribution of rucio, a type from SQLAlchemy), contain them in a block using ")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from typing import TYPE_CHECKING\nif TYPE_CHECKING: \n    from {package} import {module}\n")),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://docs.astral.sh/ruff/faq/#how-does-ruffs-import-sorting-compare-to-isort"},(0,r.yg)("inlineCode",{parentName:"a"},"ruff's isort")," implementation")," handles import sorting in the rucio ",(0,r.yg)("inlineCode",{parentName:"p"},"pre-commit"),"s. "),(0,r.yg)("h4",{id:"examples"},"Examples:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"}," # Wrong\nimport rucio  \nfrom datetime import * \nimport os \n\n # Right\nimport os \nfrom datetime import datetime, timedelta\n\nfrom rucio.core.did import add_did\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"}," # Wrong\nfrom packageA import moduleA, moduleB, moduleC, moduleD, moduleE, moduleF, moduleG, ...\n\n # Right\nfrom packageA import ( \n  moduleA, \n  moduleB, \n  moduleC, \n  moduleD, \n  moduleE,\n  moduleF, \n  moduleG, \n  ...\n)\n")),(0,r.yg)("h1",{id:"sqlalchemy-query-guide"},"SQLAlchemy Query Guide"),(0,r.yg)("p",null,"Rucio uses a custom SQLAlchemy style.\nEach major clause or operation is given a new line, and a level of indentation is added for each operation within a part of a query."),(0,r.yg)("p",null,"When queries are executed, preferred output types are either scalars or single values, to avoid using an index to select an element out of a query. "),(0,r.yg)("p",null,"Shorter statements can be written on a single line. "),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Note")," - When using SQLAlchemy to make query data model, it is best practice to name the code executed (the ",(0,r.yg)("inlineCode",{parentName:"p"},"select")," statement or similar) ",(0,r.yg)("inlineCode",{parentName:"p"},"statement")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"stmt"),". The actual ",(0,r.yg)("inlineCode",{parentName:"p"},"query")," is the result of the statement's execution. ")),(0,r.yg)("h3",{id:"examples-1"},"Examples"),(0,r.yg)("h4",{id:"simple-select"},"Simple Select"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"statement = select(\n  models.Table.ColumnA, \n  models.Table.ColumnB, \n)\nquery = session.execute(statement).scalars()\nfor column_a, column_b in query: \n  ...\n")),(0,r.yg)("h4",{id:"select-with-join"},"Select with Join"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"statement = select(\n  models.Table1.ColumnA, \n  models.Table1.ColumnB, \n  models.Table2.Column2\n).join(\n  models.Table2, \n  (models.Table1.keyA == models.Table2.keyA) & (models.Table1.keyB == models.Table2.keyB) \n)\nquery = session.execute(statement).scalars()\nfor column_a, column_b, column_c in query: \n  ...\n")),(0,r.yg)("h4",{id:"multiple-conditions"},"Multiple Conditions"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"statement = select(\n  models.Table1.Column_a, \n  models.Table1.Column_b, \n  models.Table1.Column_c,\n).where(\n  and_(\n    models.Table1.Condition1 == True,  \n    models.Table1.Condition2 != None, \n    models.Table1.Condition2 < {Different Statement}\n  )\n)\nquery = session.execute(statement).scalars()\nfor column_a, column_b, column_c in query: \n  ...\n")),(0,r.yg)("h4",{id:"checking-existencesingle-value"},"Checking existence/Single Value"),(0,r.yg)("p",null,"When using the query to ensure that the table has been populated, or only a single result is required, use either ",(0,r.yg)("inlineCode",{parentName:"p"},"session.execute().one()")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"session.execute().scalar_one()"),". "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"statement = select(model.Table.Column).where(Condition)\ntry: \n  session.execute(statement).one() \nexcept NoResultFound as e: \n  ... # Handle the case where nothing exists \n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"statement = select(model.Table).where(Condition)\nquery = session.execute(statement).scalar_one()\nfoo(query.Column1, query.Column2)\n")),(0,r.yg)("h1",{id:"pre-commits"},"Pre-commits"),(0,r.yg)("p",null,"Rucio uses the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/PyCQA/flake8"},(0,r.yg)("inlineCode",{parentName:"a"},"flake8"))," precommit as a linter, ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/astral-sh/ruff-pre-commit"},(0,r.yg)("inlineCode",{parentName:"a"},"ruff"))," as a formatter,\na custom whitespace remover, and a script to verify a uniform file-header format.\nPlease use these before submitting a pull request. "),(0,r.yg)("p",null,"The Rucio repo provides a ",(0,r.yg)("inlineCode",{parentName:"p"},"pre-commit")," that does this automatically.\nInstall it with the below commands. "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"pip install pre-commit\npre-commit install\n")),(0,r.yg)("h1",{id:"github-actions"},"GitHub Actions"),(0,r.yg)("p",null,"Code style is checked during a pull request with a GitHub action.\nThe action checks the header and type annotations (including a count and veracity).\nMore information about type annotations can be found ",(0,r.yg)("a",{parentName:"p",href:"/documentation/developer/type_annotation_guide"},"here"),".\nThese checks can also be run locally using"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"tools/count_missing_type_annotations_utils.sh \ntools/run_pyright.sh generate {report_output_path.json}\n")),(0,r.yg)("p",null,"The first action will raise an error if your commits introduce more un-annotated types than it solves,\nand the second ensures the added types are consistent with the rest of the codebase."))}g.isMDXComponent=!0}}]);